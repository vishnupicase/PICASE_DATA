/****** Object:  Database [DEV.PICASE_DATA]    Script Date: 12-05-2023 22:47:07 ******/
CREATE DATABASE [DEV.PICASE_DATA]  (EDITION = 'GeneralPurpose', SERVICE_OBJECTIVE = 'GP_Gen5_2', MAXSIZE = 32 GB) WITH CATALOG_COLLATION = SQL_Latin1_General_CP1_CI_AS;
GO
ALTER DATABASE [DEV.PICASE_DATA] SET COMPATIBILITY_LEVEL = 150
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ARITHABORT OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ALLOW_SNAPSHOT_ISOLATION ON 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET READ_COMMITTED_SNAPSHOT ON 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET  MULTI_USER 
GO
ALTER DATABASE [DEV.PICASE_DATA] SET ENCRYPTION ON
GO
ALTER DATABASE [DEV.PICASE_DATA] SET QUERY_STORE = ON
GO
ALTER DATABASE [DEV.PICASE_DATA] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 100, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 200, WAIT_STATS_CAPTURE_MODE = ON)
GO
/*** The scripts of database scoped configurations in Azure should be executed inside the target database connection. ***/
GO
-- ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
GO
/****** Object:  Schema [Config]    Script Date: 12-05-2023 22:47:08 ******/
CREATE SCHEMA [Config]
GO
/****** Object:  Schema [Report]    Script Date: 12-05-2023 22:47:08 ******/
CREATE SCHEMA [Report]
GO
/****** Object:  Schema [Stg]    Script Date: 12-05-2023 22:47:08 ******/
CREATE SCHEMA [Stg]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_diagramobjects]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE FUNCTION [dbo].[fn_diagramobjects]() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
	
GO
/****** Object:  UserDefinedFunction [dbo].[funCmnGetID]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
Purpose    :  
Author     : 
Copyright  :  
Created on :  
Input      :  
Output     :  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- MODIFICATIONS
Modifications
On   By   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Eg  

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/  
  
CREATE FUNCTION [dbo].[funCmnGetID](  
   @Table VARCHAR(50),   
   @Param1 VARCHAR(50)
  )      
RETURNS BIGINT  
AS     
BEGIN         
  
 DECLARE @ID BIGINT = 0   
  
 IF @Table ='RefAdjusterCompanyType' 
 BEGIN    
	SELECT @ID = [ID_CompanyType] FROM [dbo].[RefAdjusterCompanyType] WHERE [CompanyType] = @Param1 AND [IsDeleted] = 0  
 END
 ELSE IF @Table ='RefAgeRange' 
 BEGIN     
	SELECT @ID = [ID_AgeRange] FROM [dbo].[RefAgeRange] WHERE [AgeRange] = @Param1 AND [IsDeleted] = 0   
 END  
 ELSE IF @Table ='State' 
 BEGIN     
	SELECT @ID = [ID_State] FROM [dbo].[State] WHERE [States] = @Param1 AND [IsDeleted] = 0   
 END  
   
 RETURN @ID
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetID]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetID](
	@ID NVARCHAR (50),
	@Table NVARCHAR (50),
	@Column NVARCHAR (50),
	@ColumnValue NVARCHAR (50)
	
)
RETURNS BIGINT
AS 
BEGIN
	DECLARE @Query NVARCHAR (500) = ''
	--DECLARE @ParmDefinition NVARCHAR(500)= ''
	--SET @Query = 'SELECT @IDOUT='+ @ID + ' FROM ' + @Table + ' WHERE ' + @Column + ' = ''' + @ColumnValue + ''''
	--SET @ParmDefinition = N'@IDOUT NVARCHAR (50) OUTPUT,@pTable NVARCHAR (50),@pColumn NVARCHAR (50),@pColumnValue NVARCHAR (50)'  
 --   EXECUTE sp_executesql @Query, @ParmDefinition, @pTable = @Table,
	--		@pColumn = @Column,@pColumnValue=@ColumnValue,@IDOUT=@ID OUTPUT;  



	SET @Query = 'SELECT @max_titleOUT='+ @ID + ' FROM ' + 'DBO.'+@Table + ' WHERE ' + @Column + ' = ''' + @ColumnValue + ''''
	 Execute @Query
	  return 1 
END
GO
/****** Object:  Table [dbo].[RefGender]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefGender](
	[ID_Gender] [int] IDENTITY(1,1) NOT NULL,
	[GenderName] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_RefGender] PRIMARY KEY CLUSTERED 
(
	[ID_Gender] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefJobClassificationCode]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefJobClassificationCode](
	[ID_JobClassCode] [int] IDENTITY(1,1) NOT NULL,
	[JobZone] [varchar](2) NULL,
	[JobClassCode] [varchar](50) NOT NULL,
	[DOL_Plaintiff_Occupation] [varchar](250) NULL,
	[DataLevel] [char](10) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefJobCl__56BF46B1BA5116B6] PRIMARY KEY CLUSTERED 
(
	[ID_JobClassCode] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefPlaintiff_Occupation]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefPlaintiff_Occupation](
	[ID_Occupation] [int] IDENTITY(1,1) NOT NULL,
	[Occupation] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Occupation] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefPlaintiffHCCoverage]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefPlaintiffHCCoverage](
	[ID_PlaintiffHCCoverage] [int] IDENTITY(1,1) NOT NULL,
	[PlaintiffHCCoverage] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_PlaintiffHCCoverage] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[State]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[State](
	[ID_State] [bigint] NOT NULL,
	[States] [varchar](2) NULL,
	[StateName] [varchar](50) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__State__922BDCAE739670E5] PRIMARY KEY CLUSTERED 
(
	[ID_State] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Cases]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cases](
	[ID_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [varchar](30) NULL,
	[CaseName] [varchar](600) NULL,
	[Status] [int] NULL,
	[StatusOn] [date] NULL,
	[DateofAccidentIllness] [date] NULL,
	[Accident_Type_LoB] [varchar](100) NULL,
	[FK_Accident_SubType] [int] NULL,
	[FK_Judge] [bigint] NULL,
	[Court_District_City] [varchar](100) NULL,
	[FK_Venue_State] [bigint] NULL,
	[Accident_LocationName] [varchar](100) NULL,
	[InjuryOccuredLocation] [varchar](100) NULL,
	[FK_AgeRange] [int] NULL,
	[Accident_Address] [varchar](1000) NULL,
	[Accident_City] [varchar](100) NULL,
	[FK_State] [bigint] NULL,
	[Accident_ZIP] [varchar](15) NULL,
	[Accident_Country] [int] NULL,
	[Specific_Work] [varchar](1000) NULL,
	[Accident_Description] [varchar](2500) NULL,
	[FK_AccidentNature] [int] NULL,
	[DisabilityCharacter] [varchar](1000) NULL,
	[Pre_Existing_Condition_Flag] [bit] NULL,
	[Pre_Existing_Condition_Description] [varchar](1500) NULL,
	[Litigation_Status] [int] NULL,
	[FK_Litigation_Sub_Status] [int] NULL,
	[AssignedOn] [date] NULL,
	[Government_Record_Status] [int] NULL,
	[Confidential_Flag] [int] NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[Mediator] [nvarchar](250) NULL,
	[Source] [char](1) NULL,
 CONSTRAINT [PK__Cases__721406BD26E64AE2] PRIMARY KEY CLUSTERED 
(
	[ID_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Plaintiff_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Plaintiff_Case](
	[ID_Plaintiff_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NULL,
	[Case_Num] [varchar](30) NULL,
	[FK_Plaintiff] [bigint] NOT NULL,
	[FK_AgeRange] [int] NULL,
	[FK_JobClassCode] [int] NULL,
	[FK_PlaintiffHCCoverage] [int] NULL,
	[AWW13WeekPreAccident] [money] NULL,
	[AWWCurrent] [money] NULL,
	[WorkLevel] [varchar](1000) NULL,
	[MMIReached] [bit] NULL,
	[HasMMIDate] [bit] NULL,
	[MMIDate] [date] NULL,
	[JobDescription] [varchar](1000) NULL,
	[IsClaimantWithSameEmpoyer] [bit] NULL,
	[IsMedicalBenefit] [bit] NULL,
	[IsSSDIApplied] [bit] NULL,
	[IsSSDIAccepted] [bit] NULL,
	[SSDIDate] [date] NULL,
	[AssociatedFiles] [varchar](1000) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[SEQNo] [int] NULL,
 CONSTRAINT [PK__Plaintif__540576FEFEDF5EBD] PRIMARY KEY CLUSTERED 
(
	[ID_Plaintiff_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Plaintiff_Hist]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Plaintiff_Hist](
	[ID_Plaintiff] [bigint] IDENTITY(1,1) NOT NULL,
	[FullName] [nvarchar](250) NULL,
	[FirstName] [nvarchar](250) NULL,
	[MiddleName] [nvarchar](250) NULL,
	[LastName] [nvarchar](250) NULL,
	[Suffix] [varchar](100) NULL,
	[Address1] [varchar](250) NULL,
	[Address2] [varchar](250) NULL,
	[City] [varchar](150) NULL,
	[FK_State] [int] NULL,
	[Zip4] [varchar](50) NULL,
	[Phone] [varchar](50) NULL,
	[Birthdate] [date] NULL,
	[IsDisabled] [bit] NULL,
	[FK_Gender] [int] NULL,
	[FK_Occupation] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[Case_Num] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Plaintif__10A2A9A5BC0981FA] PRIMARY KEY CLUSTERED 
(
	[ID_Plaintiff] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefAgeRange]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefAgeRange](
	[ID_AgeRange] [int] NOT NULL,
	[AgeRange] [varchar](50) NOT NULL,
	[MinAge] [int] NOT NULL,
	[MaxAge] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefAgeRa__CA3AD82802587914] PRIMARY KEY CLUSTERED 
(
	[ID_AgeRange] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwPlaintiff]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO












CREATE VIEW [Report].[VwPlaintiff] AS
SELECT 

CaseNumber,
FullName,
FirstName,
MiddleName,
LastName,
Suffix,
Address1,
Address2,
City,
States,
Zip4,
Phone,
Birthdate,
GenderName,
Occupation as Plaintiff_Occupation,
IsDisabled,
AgeRange,
IsMedicalBenefit,
AWW13WeekPreAccident,
AWWCurrent,
IsClaimantWithSameEmpoyer,
WorkLevel,
PLC.MMIReached,
PLC.HasMMIDate,
MMIDate,
JobClassCode,
JobDescription,
IsSSDIApplied,
IsSSDIAccepted,
SSDIDate,
AssociatedFiles,
SEQNo,
PlaintiffHCCoverage
FROM DBO.Plaintiff_Case PLC
INNER JOIN Plaintiff_Hist PL ON PLC.FK_Plaintiff=PL.ID_Plaintiff
INNER JOIN [dbo].[Cases] CAS ON PLC.FK_Case= CAS.ID_Case
LEFT JOIN [dbo].[RefAgeRange] AR ON AR.ID_AgeRange= PLC.FK_AgeRange
LEFT JOIN [dbo].RefJobClassificationCode JC ON JC.ID_JobClassCode= PLC.FK_JobClassCode
LEFT JOIN dbo.State St ON Pl.FK_State = St.ID_State
LEFT JOIN dbo.RefPlaintiff_Occupation Ocp ON Pl.FK_Occupation = Ocp.ID_Occupation
LEFT JOIN dbo.RefGender Gen ON Pl.FK_Gender = Gen.ID_Gender
LEFT JOIN dbo.RefPlaintiffHCCoverage HC ON PLC.FK_PlaintiffHCCoverage = HC.ID_PlaintiffHCCoverage
GO
/****** Object:  Table [dbo].[OJCCOffices]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OJCCOffices](
	[ID_OJCC] [int] IDENTITY(1,1) NOT NULL,
	[District] [varchar](50) NULL,
	[Address] [varchar](51) NULL,
	[City] [varchar](52) NULL,
	[FK_State] [bigint] NULL,
	[Zip4] [varchar](54) NULL,
	[District_Counties] [varchar](55) NULL,
	[Telephone] [varchar](56) NULL,
	[Fax] [varchar](57) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__OJCCOffi__537B85776782DDC5] PRIMARY KEY CLUSTERED 
(
	[ID_OJCC] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwOJCCOffices_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [Report].[VwOJCCOffices_Master] AS

SELECT [District]
      ,[Address]
      ,[City]
	  ,[Telephone]
      ,States
      ,[Zip4]
      ,[District_Counties]
      ,[Fax]
      
  FROM [dbo].[OJCCOffices] JD
  LEFT JOIN dbo.State St ON JD.FK_State = St.ID_State
  where JD.[IsDeleted]=0
GO
/****** Object:  Table [dbo].[ICDCode_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ICDCode_Master](
	[ID_ICD_Code] [int] IDENTITY(1,1) NOT NULL,
	[ICD_Code] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__ICDCode__91B2A5CEE7C9E93D] PRIMARY KEY CLUSTERED 
(
	[ID_ICD_Code] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Injury]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Injury](
	[ID_Injury] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_BodyPart] [int] NULL,
	[FK_BodyPartLocation] [int] NULL,
	[FK_ICD_Code] [int] NULL,
	[BodyPart_IDNumber] [int] NULL,
	[InjuryName] [varchar](300) NULL,
	[RecoveryDate] [datetime] NULL,
	[OrderNoBodyPart] [int] NOT NULL,
	[OrderNoInjury] [int] NOT NULL,
	[OrderNoColumn] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SEQNo] [int] NULL,
 CONSTRAINT [PK_Injuries] PRIMARY KEY CLUSTERED 
(
	[ID_Injury] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefBodyPart]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefBodyPart](
	[ID_BodyPart] [int] IDENTITY(1,1) NOT NULL,
	[BodyPart] [varchar](100) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefBodyP__08CC2F103AB55214] PRIMARY KEY CLUSTERED 
(
	[ID_BodyPart] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefBodyPartLocation]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefBodyPartLocation](
	[ID_BodyPartLocation] [int] IDENTITY(1,1) NOT NULL,
	[BodyPartLocation] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_BodyPartLocation] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwInjury]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









/*===========================================
	Author:FairCode
	Created Date: 12-JAN-2023
	Description:To view the data in main table
	EXECUTION : SELECT * FROM [Report].[VwInjury]
=============================================*/
CREATE  VIEW [Report].[VwInjury] AS

		SELECT DISTINCT 
				C.CaseNumber Court_CaseNumber,
				REPLACE(CAST(ICD_Code AS VARCHAR(100)), NCHAR(UNICODE('�')), '') AS ICD_Code,
				BodyPart BodyPart_Name,
				OrderNoBodyPart	BodyPart_SequenceNumber,
				InjuryName Injury_Name,
				OrderNoInjury Injury_SequenceNumber,
				--SEQNo Injury_SequenceNumber,
				RecoveryDate Recovery_Date, 
				BodyPartLocation BodyPart_Location,
				BodyPart_IDNumber BodyPart_ID_Number
		  FROM [dbo].[Injury] I
					JOIN [dbo].[Cases] C ON C.ID_Case = I.FK_Case
					LEFT JOIN [dbo].[RefBodyPart] RBP ON ISNULL(RBP.ID_BodyPart,0) = ISNULL(I.FK_BodyPart,0)
					LEFT JOIN [dbo].[RefBodyPartLocation] RBPL ON ISNULL(RBPL.ID_BodyPartLocation,0) = ISNULL(I.FK_BodyPartLocation,0)
					LEFT JOIN [dbo].[ICDCode_Master] ICD ON ISNULL(ICD.ID_ICD_Code,0) = ISNULL(I.FK_ICD_Code,0)
GO
/****** Object:  Table [dbo].[Negotiations]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Negotiations](
	[ID_Negotiations] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NULL,
	[Demand_Letter_Date] [date] NULL,
	[Demand_Letter_Damages] [money] NULL,
	[Demand_Letter_Amount] [money] NULL,
	[Counter_Offer_Date] [date] NULL,
	[Counter_Amount] [money] NULL,
	[Court_Case_Num] [varchar](30) NULL,
	[CreatedOn] [smalldatetime] NULL,
	[ModifiedOn] [smalldatetime] NULL,
 CONSTRAINT [PK_Negotiations] PRIMARY KEY CLUSTERED 
(
	[ID_Negotiations] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwNegotiations]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [Report].[VwNegotiations] AS
select Court_Case_Num
,Demand_Letter_Date
,Demand_Letter_Damages
,Demand_Letter_Amount
,Counter_Offer_Date
,Counter_Amount
 from [dbo].[Negotiations]
GO
/****** Object:  Table [dbo].[Carrier_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Carrier_Case](
	[ID_Carrier_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NULL,
	[FK_Carrier] [bigint] NULL,
	[FK_Adjuster] [bigint] NULL,
	[InjuryReportedDate] [datetime] NULL,
	[InjurySystemCreatedDate] [datetime] NULL,
	[PolicyNumber] [varchar](100) NULL,
	[ClaimNumber] [varchar](100) NULL,
	[FK_CoverageType] [int] NULL,
	[FederalEmployerID] [nvarchar](50) NULL,
	[CoverageAmountLimit] [money] NULL,
	[LossDate] [datetime] NULL,
	[OrderNo] [int] NULL,
	[ID_Group_Num] [int] NULL,
	[ID_Co_Num] [int] NULL,
	[Parent_Name] [nvarchar](100) NULL,
	[Name] [nvarchar](100) NULL,
	[PO_Box_or_Street_Address1] [nvarchar](100) NULL,
	[PO_Box_or_Street_Address2] [nvarchar](100) NULL,
	[Carrier_City] [nvarchar](100) NULL,
	[State] [nvarchar](100) NULL,
	[Zip] [nvarchar](100) NULL,
	[Phone] [nvarchar](100) NULL,
	[Coverage] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Carrier_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefCoverageType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefCoverageType](
	[ID_CoverageType] [int] IDENTITY(1,1) NOT NULL,
	[CoverageTypeName] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_CoverageType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwCarrier_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




/*===========================================
	Author:Praveen
	Created Date: 10-JAN-2023
	Description:To view the data in main table
	EXECUTION : SELECT * FROM [Report].[VwCarrier_Case]
=============================================*/
CREATE VIEW [Report].[VwCarrier_Case] AS

SELECT DISTINCT
		 [Name] AS Carrier_Name
		,Parent_Name AS Carrier_Parent_Name
		,PO_Box_or_Street_Address1 AS Carrier_Address1
		,PO_Box_or_Street_Address2 AS Carrier_Address2
		,Carrier_City
		,State AS Carrier_State
		,Zip AS Carrier_Zip4
		,Phone AS Carrier_Phone
		,InjuryReportedDate AS Date_Injury_Reported_to_CARRIER
		,InjurySystemCreatedDate AS Date_Injury_Record_Created_in_CARRIER_System
		,PolicyNumber AS Carrier_Policy_Number
		,ClaimNumber AS Carrier_Claim_Number
		,CoverageTypeName AS Coverage_Type
		,FederalEmployerID AS Licensed_Carrier_FEIN
		,ID_Group_Num AS Insurer_NAIC_Group_Number
		,ID_Co_Num AS Insurer_NAIC_Company_Number
		,CoverageAmountLimit AS Coverage_Limits
		,LossDate AS Carrier_Loss_Date
		 ,ROW_NUMBER() OVER(PARTITION BY CaseNumber ORDER BY Parent_Name) CARRIER_Sequence_Number
		,CaseNumber AS Court_Case_Number
		--,Adjuster_LastName
		--,Adjuster_FirstName
		--,Adjuster__Address1
		--,Adjuster_City
		--,Adjuster_State
		--,Adjuster_Zip4
		--,Adjuster_Email
		--,Adjusters_CompanyName
		--,Adjuster_unique_ID
      
  FROM [dbo].[Carrier_Case] CC
	JOIN [dbo].Cases S ON S.ID_Case = CC.FK_Case
	JOIN [dbo].[RefCoverageType] RCT ON RCT.ID_CoverageType = CC.FK_CoverageType
  where CC.[IsDeleted]=0
GO
/****** Object:  Table [dbo].[PastDamages_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PastDamages_Case](
	[ID_PastDamages_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[MedicalBenefitAmount] [money] NULL,
	[IndemnityBenefitsTotalAmount] [money] NULL,
	[PTDBenefitAmount] [money] NULL,
	[SupplementalBenefitAmount] [money] NULL,
	[LienAmount] [money] NULL,
	[AttorneyFeeAmount] [money] NULL,
	[WorkedHoursAmount] [money] NULL,
	[SequenceNumber] [int] NULL,
	[StatutoryFeeAmount] [money] NULL,
	[MOBenefitAmount] [money] NULL,
	[INDBenefitAmount] [money] NULL,
	[DisabilityBenefitAmount] [money] NULL,
	[IsLightDuty] [bit] NULL,
	[IsReturnedToWork] [bit] NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwPast_Damages]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwPast_Damages] AS

		SELECT [MedicalBenefitAmount] PASTMedical_Benefits, 
			   [IndemnityBenefitsTotalAmount] PASTIndemnity_Benefits_Total, 
			   [PTDBenefitAmount] PASTIndemnity_Benefits_PTD, 
			   [SupplementalBenefitAmount] PASTIndemnity_Benefits_Supplemental, 
			   [LienAmount] PASTLien_Amount, 
			   [AttorneyFeeAmount] 'PASTPreDetermination_Attorney Fees', 
			   [WorkedHoursAmount] 'PASTPreDetermination_Hours Billed', 
			   [StatutoryFeeAmount] PASTPreDetermination_Statutory_Fees, 
			   [MOBenefitAmount] PASTBenefits_MO, 
			   [INDBenefitAmount] PASTBenefits_IND, 
			   [DisabilityBenefitAmount] PASTBenefits_Disability, 
			   [IsLightDuty],[IsReturnedToWork],
			   (CASE WHEN  ISNULL([IsLightDuty],0) = 1 THEN 'Yes'  ELSE 'No' END) PASTLight_Duty, 
			   (CASE WHEN ISNULL([IsReturnedToWork],0) = 1 THEN 'Yes'  ELSE 'No' END) PASTReturn_to_work,
				C.[CaseNumber] Court_Case_Number
				,[SequenceNumber] PASTPreDetermination_Sequence_Number
		FROM  [dbo].[PastDamages_Case] PDC		
		JOIN [dbo].[Cases] C ON C.ID_Case = PDC.FK_Case
GO
/****** Object:  Table [dbo].[Attorney]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Attorney](
	[ID_Attorney] [bigint] IDENTITY(1,1) NOT NULL,
	[BoardCertification] [varchar](250) NULL,
	[FullName] [nvarchar](300) NULL,
	[FirstName] [nvarchar](100) NULL,
	[MI] [nvarchar](100) NULL,
	[LastName] [nvarchar](100) NULL,
	[Suffix] [varchar](100) NULL,
	[Salutation] [varchar](30) NULL,
	[Address1] [varchar](250) NULL,
	[Address2] [varchar](250) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [bigint] NULL,
	[Zip4] [varchar](100) NULL,
	[Email] [varchar](100) NULL,
	[OfficePhone] [varchar](50) NULL,
	[CellPhone] [varchar](50) NULL,
	[Fax] [varchar](100) NULL,
	[BARNumber] [varchar](500) NULL,
	[County_OfficialAddress] [varchar](1000) NULL,
	[Circuit_OfficialAddress] [varchar](1000) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Attorney__537B857796E2CD31] PRIMARY KEY CLUSTERED 
(
	[ID_Attorney] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Attorney_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Attorney_Case](
	[ID_Attorney_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_Attorney] [bigint] NOT NULL,
	[FK_AttorneyFirm] [bigint] NULL,
	[FullName] [varchar](300) NULL,
	[Suffix] [varchar](100) NULL,
	[Address1] [varchar](250) NULL,
	[Address2] [varchar](250) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [bigint] NULL,
	[Zip4] [varchar](100) NULL,
	[Email] [varchar](100) NULL,
	[OfficePhone] [varchar](50) NULL,
	[CellPhone] [varchar](50) NULL,
	[Fax] [varchar](100) NULL,
	[LawFirmId] [varchar](100) NULL,
	[BARNumber] [varchar](500) NULL,
	[OrderNo] [int] NOT NULL,
	[RepresentationType] [char](1) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[FirstName] [varchar](100) NULL,
	[MI] [varchar](100) NULL,
	[LastName] [varchar](100) NULL,
	[BadgeType] [int] NOT NULL,
 CONSTRAINT [PK__Attorney__917DE01F9874ED1F] PRIMARY KEY CLUSTERED 
(
	[ID_Attorney_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AttorneyFirm]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AttorneyFirm](
	[ID_AttorneyFirm] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Attorney] [bigint] NOT NULL,
	[FirmName] [varchar](100) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Attorney_Firm__537B857796E2CD31] PRIMARY KEY CLUSTERED 
(
	[ID_AttorneyFirm] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwAttorney_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwAttorney_Case] AS

		SELECT  AC.[FullName] Attorney_FULLName,
				ISNULL(A.[FirstName],AC.[FirstName]) ATTORNEY_FirstName,
				ISNULL(A.[MI],AC.[MI]) ATTORNEY_MI,
				ISNULL(A.[LastName],AC.[LastName]) Attorney_LastName,
				AC.[Suffix] ATTORNEY_Suffix,
				AF.[FirmName] ATTORNEY_FIRMName,
				AC.[Address1] ATTORNEY_Address1,
				AC.[Address2] Attorney_Address2,
				AC.[City] ATTORNEY_City,
				S.States ATTORNEY_State,
				AC.[Zip4] ATTORNEY_Zip4,
				AC.[Email] ATTORNEY_Email,
				AC.[OfficePhone] ATTORNEY_Office_Phone,
				AC.[CellPhone] ATTORNEY_Cell_Phone,
				AC.[Fax] Attorney_Fax,
				AC.[LawFirmId] Law_Firm_ID,
				AC.[BARNumber] Attorney_BAR_Number,
				AC.[OrderNo] ATTORNEY_Sequence_Number,
				AC.[RepresentationType] ATTORNEY_REPRESENTATION_FLAG,
				[CaseNumber] Court_Case_Number				
		FROM [dbo].[Attorney_Case] AC 
		LEFT JOIN [dbo].[Attorney] A ON ISNULL(A.ID_Attorney,0) = ISNULL(AC.FK_Attorney,0)
		JOIN [dbo].[Cases] C ON C.ID_Case = AC.FK_Case
		LEFT JOIN [dbo].[AttorneyFirm] AF ON AF.FK_Attorney = AC.FK_Attorney AND ISNULL(AF.ID_AttorneyFirm,0) = ISNULL(AC.[FK_AttorneyFirm],0)
		LEFT JOIN [dbo].[State] S ON S.ID_State = A.FK_State
GO
/****** Object:  View [Report].[VwAgeRange_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [Report].[VwAgeRange_Master] AS

SELECT  [ID_AgeRange]
      ,[AgeRange]
      ,[MinAge]
      ,[MaxAge]

  FROM [dbo].[RefAgeRange]
  WHERE [IsDeleted]=0
GO
/****** Object:  Table [dbo].[AWW_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AWW_Case](
	[ID_AWW_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NULL,
	[Case_Num] [varchar](30) NULL,
	[SO_AWW_Amount] [decimal](18, 0) NULL,
	[SO_MMI_Date] [date] NULL,
	[PFB_MMI_Date] [date] NULL,
	[PFB_AWW_Amount] [decimal](18, 0) NULL,
	[AWW_STATUS] [varchar](50) NULL,
	[SO_AWW_HOUR_WAGE] [decimal](18, 0) NULL,
	[SEQNo] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[SEQ_TNO] [int] NOT NULL,
 CONSTRAINT [PK_AWW_Case] PRIMARY KEY CLUSTERED 
(
	[ID_AWW_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwAWW_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [Report].[VwAWW_Case] AS

SELECT [Case_Num]
      ,[SO_AWW_Amount]
      ,[SO_MMI_Date]
      ,[PFB_MMI_Date]
      ,[PFB_AWW_Amount]
      ,[AWW_STATUS]
      ,[SO_AWW_HOUR_WAGE],
ROW_NUMBER() OVER(PARTITION BY Case_Num  ORDER BY [SO_MMI_Date],[PFB_MMI_Date] )AS SEQNo
FROM [dbo].AWW_Case
GO
/****** Object:  Table [dbo].[RefDisabilityType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefDisabilityType](
	[ID_DisabilityType] [int] IDENTITY(1,1) NOT NULL,
	[DisabilityType] [varchar](50) NOT NULL,
	[Mode] [char](1) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefDisab__8A6A4227126B17D2] PRIMARY KEY CLUSTERED 
(
	[ID_DisabilityType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FutureDamages_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FutureDamages_Case](
	[ID_FutureDamages_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[LienAmount] [money] NULL,
	[MOBenefitAmount] [money] NULL,
	[INDBenefitTotalAmount] [money] NULL,
	[INDBenefitSuppAmount] [money] NULL,
	[INDPTDBenefitAmount] [money] NULL,
	[DisabilityBenefitAmount] [money] NULL,
	[FK_DisabilityType] [int] NULL,
	[FK_DisabilityTypeOriginal] [int] NULL,
	[FK_DisabilityTypeSevere] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_FutureDamages_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwFuture_Damages]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwFuture_Damages] AS

		SELECT [LienAmount] FUTURELien_Amount, 
			   [MOBenefitAmount] FUTUREBenefits_MO, 
			   [INDBenefitTotalAmount] FUTUREBenefits_IND_TOTAL, 
			   [INDBenefitSuppAmount] FUTUREBenefits_IND_Supplemental, 
			   [INDPTDBenefitAmount] FUTUREBenefits_IND_PTD, 
			   [DisabilityBenefitAmount] FUTUREBenefits_Disability, 
			   [DisabilityType] FUTUREDisability_Type, 
			   [FK_DisabilityTypeOriginal] FUTUREOriginal_Disability_Type, 
			   [FK_DisabilityTypeSevere] FUTURESevere_Disability_Type,
			   C.[CaseNumber] Court_Case_Number
		FROM [dbo].[FutureDamages_Case]  FDC		
		JOIN [dbo].[Cases] C ON C.ID_Case = FDC.FK_Case	
		LEFT JOIN [dbo].[RefDisabilityType] RDTA ON RDTA.[DisabilityType] = FDC.[FK_DisabilityType] AND RDTA.Mode = 'A'
GO
/****** Object:  Table [dbo].[Adjuster]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Adjuster](
	[ID_Adjuster_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[Adjuster_UNQID] [int] NULL,
	[Salutation] [varchar](10) NULL,
	[FirstName] [varchar](255) NULL,
	[MiddleName] [varchar](2) NULL,
	[LastName] [varchar](255) NULL,
	[FullName] [varchar](255) NULL,
	[Gender] [varchar](10) NULL,
	[Suffix] [varchar](9) NULL,
	[Address1] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [bigint] NULL,
	[Zip4] [varchar](10) NULL,
	[Email] [varchar](200) NULL,
	[Phone_Number] [varchar](12) NULL,
	[Fax] [varchar](10) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[Case_Number] [varchar](30) NULL,
	[FK_Case] [int] NULL,
	[CompanyName] [varchar](200) NULL,
	[Parent_CompanyName] [varchar](200) NULL,
	[Company_Type] [varchar](30) NULL,
	[Company_State_ID] [varchar](30) NULL,
	[Company_SeqNo] [int] NOT NULL,
	[SEQ_CASE] [int] NOT NULL,
 CONSTRAINT [PK__Adjuster__CAB4FF6D790B7D47] PRIMARY KEY CLUSTERED 
(
	[ID_Adjuster_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwAdjuster_Master_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









/*===========================================
	Author:Praveen
	Created Date: 23-JAN-2023
	Description:To view the data in main table
	EXECUTION : SELECT * FROM [Report].[VwAdjuster]
=============================================*/
CREATE VIEW [Report].[VwAdjuster_Master_Case] AS

SELECT  Adjuster_UNQID As ADJUSTER_UniqueID
		,Salutation AS ADJUSTER_Salutation
		,FirstName AS ADJUSTER_FirstName
		,MiddleName AS ADJUSTER_MI
		,LastName AS ADJUSTER_LastName
		,FullName AS ADJUSTER_FullName
		,Suffix AS ADJUSTER_Suffix
		,Gender as Gender
		,Address1 AS ADJUSTER_Address1
		,Address2 AS ADJUSTER_Address2
		,City AS ADJUSTER_City
		,S.States
		,Zip4 AS ADJUSTER_Zip4
		,Email AS ADJUSTER_Email
		,Phone_Number AS ADJUSTER_Phone_Number
		,Fax AS ADJUSTER_Fax
		,CompanyName AS Adjusters_CompanyName
		,Parent_CompanyName AS Adjusters_Parent_CompanyName
		,Company_Type AS Adjusters_Company_Type
		,Company_SeqNo AS Adjuster_Company_Sequence_Number
		,Company_State_ID AS Company_State_ID 
		,CaseNumber AS Court_Case_Number
		,SEQ_CASE AS Court_Case_Sequence_Number
  FROM [dbo].Adjuster A
		JOIN dbo.Cases CS ON CS.ID_Case = A.FK_Case
	    LEFT JOIN dbo.State S ON S.ID_State = A.FK_State
  where A.[IsDeleted]=0
GO
/****** Object:  Table [dbo].[RefEntityType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefEntityType](
	[ID_EntityType] [int] IDENTITY(1,1) NOT NULL,
	[EntityType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_EntityType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TPA]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TPA](
	[ID_TPA] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_CompanyType] [int] NULL,
	[FK_EntityType] [int] NULL,
	[StateID] [varchar](150) NULL,
	[InternalID] [varchar](150) NULL,
	[ParentName] [varchar](200) NULL,
	[TPAName] [varchar](200) NULL,
	[Address1] [varchar](150) NULL,
	[Address2] [varchar](150) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [int] NULL,
	[Zip4] [varchar](10) NULL,
	[Phone] [varchar](30) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__TPA__27BF2B2236B51FC1] PRIMARY KEY CLUSTERED 
(
	[ID_TPA] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwTPA_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ========================================================================================================================================================================
--Created Date : 11/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwTPA_Master] AS

		SELECT  [StateID] TPA_State_ID,
				[InternalID] TPA_Internal_ID,
				[EntityType] Entity_Type,
				[ParentName] TPA_PARENT,
				[TPAName] TPA_Name,
				NULL ALT_CO_Name,
				[Address1] TPA_Address1,
				[Address2] TPA_Address2,
				[City] TPA_City,
				S.States TPA_State,
				[Zip4] TPA_Zip4,
				[Phone] TPA_CA_Phone				
		FROM  [dbo].[TPA] T	
		LEFT JOIN [dbo].[RefEntityType] RET ON RET.[ID_EntityType] = T.[FK_EntityType] 
		LEFT JOIN [dbo].[State] S ON S.ID_State = T.FK_State
GO
/****** Object:  Table [dbo].[TPA_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TPA_Case](
	[ID_TPA_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_TPA] [bigint] NOT NULL,
	[FK_Adjuster] [bigint] NULL,
	[OrderNo] [int] NOT NULL,
	[CaseNo] [varchar](150) NULL,
	[Adjuster_Email] [varchar](150) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[FK_EntityType] [int] NULL,
	[ParentName] [varchar](200) NULL,
	[TPAName] [varchar](200) NULL,
	[Address1] [varchar](150) NULL,
	[Address2] [varchar](150) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [int] NULL,
	[Zip4] [varchar](10) NULL,
	[Phone] [varchar](30) NULL,
	[StateID] [varchar](150) NULL,
	[InternalID] [varchar](150) NULL,
 CONSTRAINT [PK__TPA_Case__FDF6D4BC4F3D9798] PRIMARY KEY CLUSTERED 
(
	[ID_TPA_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwTPA_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- ========================================================================================================================================================================
--Created Date : 11/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwTPA_Case] AS

		SELECT  RET.EntityType TPA_Type,
		        TC.[ParentName] TPA_PARENT_Name,
		        TC.[TPAName] TPA_Name,
		        TC.[Address1] TPA_Address1,
				TC.[Address2] TPA_Address2,
				TC.[City] TPA_City,
				S.States TPA_State,
				TC.[Zip4] TPA_Zip4,
				TC.[Phone] TPA_Phone,
				OrderNo 'TPA Sequence Number',
		        CaseNo TPA_Case_Number,
				TC.[InternalID] TPA_Internal_ID,
		        TC.[StateID] TPA_State_ID_Number,				
				--NULL Adjusters_CompanyName,
				TC.Adjuster_Email Adjuster_Email,
				---NULL Adjuster_unique_ID,
				CaseNumber Court_Case_Number								
		FROM  [dbo].[TPA_Case] TC
		LEFT JOIN [dbo].[TPA] T ON T.ID_TPA = TC.FK_TPA
		JOIN [dbo].[Cases] C ON C.ID_Case = TC.FK_Case
		LEFT JOIN [dbo].[State] S ON S.ID_State = T.FK_State	
		LEFT JOIN [dbo].[RefEntityType] RET ON RET.ID_EntityType = T.FK_EntityType
GO
/****** Object:  Table [dbo].[RefInsuredStatus]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefInsuredStatus](
	[ID_InsuredStatus] [int] IDENTITY(1,1) NOT NULL,
	[InsuredStatus] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_InsuredStatus] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Defendant]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Defendant](
	[ID_Defendant] [bigint] IDENTITY(1,1) NOT NULL,
	[Defendant_Name] [nvarchar](200) NULL,
	[Defendant_Parent] [nvarchar](250) NULL,
	[Defendant_Phone] [nvarchar](50) NULL,
	[Defendant_Address1] [nvarchar](500) NULL,
	[Defendant_Address2] [nvarchar](500) NULL,
	[Defendant_City] [nvarchar](100) NULL,
	[FK_State] [int] NULL,
	[Defendant_Zip] [nvarchar](50) NULL,
	[Defendant_Licensed_Number] [nvarchar](150) NULL,
	[FK_InsuredStatus] [int] NULL,
	[Defendant_Self_Insured_Name] [nvarchar](250) NULL,
	[Defendant_FEIN] [nvarchar](50) NULL,
	[Case_Num] [nvarchar](50) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Defendan__E4060B46CBA7AC1C] PRIMARY KEY CLUSTERED 
(
	[ID_Defendant] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Defendant_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Defendant_Case](
	[ID_Defendant_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Defendent] [bigint] NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[Case_Num] [varchar](50) NULL,
	[ClaimNumber] [varchar](100) NULL,
	[ReportedInjuryDate] [date] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[SEQNo] [int] NULL,
 CONSTRAINT [PK__Defendan__A49CE3D81E4A5845] PRIMARY KEY CLUSTERED 
(
	[ID_Defendant_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwDefendant]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*===========================================
	Author:BB
	Created Date: 07-JAN-2023
	Description:
=============================================*/

CREATE VIEW [Report].[VwDefendant] AS
select 
Defendant_Name,Defendant_Parent,Defendant_Phone as Defendant_Phone,Defendant_Address1,
Defendant_Address2,Defendant_City,States as Defendant_State,Defendant_Zip,
Defendant_Licensed_Number as Defendant_License_Number,InsuredStatus,
Defendant_Self_Insured_Name,Defendant_FEIN,
DFC.Case_Num,ClaimNumber,ReportedInjuryDate,SEQNo
from Defendant_Case DFC
INNER JOIN Defendant df ON ID_Defendant=FK_Defendent
LEFT JOIN dbo.State St ON DF.FK_State = St.ID_State
LEFT JOIN dbo.RefInsuredStatus INS ON INS.ID_InsuredStatus = DF.FK_InsuredStatus
WHERE Dfc.IsDeleted=0
GO
/****** Object:  Table [dbo].[AttorneyBadgeType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AttorneyBadgeType](
	[ID_AttorneyBadgeType] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Attorney] [bigint] NOT NULL,
	[FK_BadgeType] [int] NOT NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Attorney_BadgeType__537B857796E2CD31] PRIMARY KEY CLUSTERED 
(
	[ID_AttorneyBadgeType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefBadgeType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefBadgeType](
	[ID_BadgeType] [int] IDENTITY(1,1) NOT NULL,
	[BadgeType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_BadgeType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwAttorney_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE VIEW [Report].[VwAttorney_Master] AS
	
	SELECT [BadgeType] 'Badge_Type_ Name',
		   [BoardCertification] Board_Certification,
		   [BARNumber] Florida_BAR_Number,
		   [Salutation] Salutation,
		   [FirstName] Attorney_First_Name,
		   [MI] Attorney_MI,
		   [LastName] Attorney_Last_Name,
		   [Suffix] Attorney_Suffix,
		   [FirmName] Attorney_Firm_Name,
		   [Address1] Attorney_Address_1, 
		   [Address2] Attorney_Address_2, 
		   [City] Attorney_Mailing_City, 
		   S.StateName Attorney_Mailing_State, 
		   [Zip4] Attorney_Zip4,  
		   [OfficePhone] ATTORNEY_Office_Phone, 
		   [CellPhone] ATTORNEY_Cell_Phone, 
		   [Fax] Attorney_Fax, 
		   [Email] Attorney_Email,
		   [County_OfficialAddress] Attorney_County_Official_Address,
		   [Circuit_OfficialAddress] Attorney_Circuit_Number_Official_Address,
		   [FullName] Attorney_Full_Name
	FROM [dbo].[Attorney] A
	JOIN [dbo].[AttorneyBadgeType] ABT ON ABT.[FK_Attorney] = A.ID_Attorney
	JOIN [dbo].[RefBadgeType] RBT ON RBT.ID_BadgeType = ABT.[FK_BadgeType]
	LEFT JOIN [dbo].[State] S ON S.ID_State = A.FK_State
	LEFT JOIN [dbo].[AttorneyFirm] AF ON AF.FK_Attorney = A.ID_Attorney
GO
/****** Object:  Table [dbo].[RefLitigationSubStatus]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefLitigationSubStatus](
	[ID_LitigationSubStatus] [int] IDENTITY(1,1) NOT NULL,
	[LitigationSubStatus] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_LitigationSubStatus] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[County]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[County](
	[ID_County] [int] IDENTITY(1,1) NOT NULL,
	[County_Code] [varchar](3) NULL,
	[County] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Judge]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Judge](
	[ID_Judge] [bigint] IDENTITY(1,1) NOT NULL,
	[JudgeUniqueID] [varchar](50) NULL,
	[FirstName] [varchar](250) NOT NULL,
	[MiddleName] [varchar](250) NULL,
	[LastName] [varchar](250) NULL,
	[Initials] [varchar](250) NULL,
	[City] [varchar](150) NULL,
	[FK_State] [bigint] NULL,
	[Zip4] [varchar](50) NULL,
	[District] [varchar](150) NULL,
	[TermExpiration] [date] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK__Judge__897DBC8B58B3A3A7] PRIMARY KEY CLUSTERED 
(
	[ID_Judge] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefAccidentNature]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefAccidentNature](
	[ID_AccidentNature] [int] IDENTITY(1,1) NOT NULL,
	[AccidentNature] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_AccidentNature] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefAccidentSubType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefAccidentSubType](
	[ID_AccidentSubType] [int] IDENTITY(1,1) NOT NULL,
	[AccidentSubType] [varchar](200) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefAccid__208E76E181433A07] PRIMARY KEY CLUSTERED 
(
	[ID_AccidentSubType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefCaseStatus]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefCaseStatus](
	[ID_CaseStatus] [int] NOT NULL,
	[CaseStatus] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefCaseS__31808B440A81A05B] PRIMARY KEY CLUSTERED 
(
	[ID_CaseStatus] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwCases]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*===========================================
	Author:Praveen
	Created Date: 10-JAN-2023
	Description:To view the data in main table
	EXECUTION : SELECT * FROM [Report].[VwCases]
=============================================*/
CREATE  VIEW [Report].[VwCases] AS

SELECT DISTINCT  
		CaseNumber
		,CaseName
				,ST.CaseStatus AS CaseStatus
		,StatusOn

		,DateofAccidentIllness
		,Accident_Type_LoB
		,AccidentSubType
		,FirstName AS Judge_FirstName
		,LastName AS Judge_LastName
		,Mediator
		,Court_District_City
		,SV.States AS Venue_State
		,Accident_LocationName
		,InjuryOccuredLocation
		,AgeRange
		,Accident_Address
		,Accident_City
		,S.States AS Accident_State
		,Accident_ZIP
		,CT.[County] Accident_County
		,Specific_Work
		,Accident_Description
		,AccidentNature
		,DisabilityCharacter
		,Pre_Existing_Condition_Flag
		,Pre_Existing_Condition_Description
		,Litigation_Status
		,LitigationSubStatus
		,AssignedOn
		,GRS.CaseStatus AS Government_Record_Status
		,Confidential_Flag
      
  FROM [dbo].[Cases] C
	  LEFT JOIN [dbo].[RefAccidentSubType] AST ON AST.ID_AccidentSubType = C.FK_Accident_SubType
	  LEFT JOIN [dbo].[Judge] J ON J.ID_Judge =C.FK_Judge
	  LEFT JOIN [dbo].[State] SV ON SV.ID_State = C.FK_Venue_State
	  LEFT JOIN [dbo].[State] S ON S.ID_State = C.FK_State
	  LEFT JOIN [dbo].[RefAccidentNature] AN ON AN.ID_AccidentNature = C.FK_AccidentNature
	  LEFT JOIN [dbo].[RefLitigationSubStatus] LS ON LS.ID_LitigationSubStatus = C.FK_Litigation_Sub_Status
	  LEFT JOIN [dbo].[RefAgeRange] AR ON AR.ID_AgeRange = C.FK_AgeRange
	  LEFT JOIN [dbo].[RefCaseStatus] ST ON ST.ID_CaseStatus = C.Status
	  LEFT JOIN [dbo].[RefCaseStatus] GRS ON GRS.ID_CaseStatus = C.Government_Record_Status
	  LEFT JOIN [dbo].[County] CT ON CT.ID_County = C.[Accident_Country]
GO
/****** Object:  View [Report].[VwJudge_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 07-JAN-2023
	Description:
=============================================*/
CREATE VIEW [Report].[VwJudge_Master] AS
select 
 FirstName,MiddleName,LastName,Initials,City,Zip4,District,TermExpiration,States
 from dbo.Judge JD
LEFT JOIN dbo.State St ON JD.FK_State = St.ID_State
where JD.IsDeleted=0
GO
/****** Object:  Table [dbo].[RefDeterminationType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefDeterminationType](
	[ID_DeterminationType] [int] IDENTITY(1,1) NOT NULL,
	[DeterminationType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_DeterminationType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Determination_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Determination_Case](
	[ID_Determination_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_DeterminationType] [int] NOT NULL,
	[Amount] [money] NULL,
	[PayorName] [varchar](100) NULL,
	[PayorAmount] [money] NULL,
	[DeterminationDate] [date] NULL,
	[IsConfidential] [bit] NULL,
	[CourtDecision] [varchar](4000) NULL,
	[OtherDecisionInformation] [varchar](4000) NULL,
	[AssociatedFiles] [varchar](500) NULL,
	[AwardCostAmount] [money] NULL,
	[AttorneyFeeAmount] [money] NULL,
	[OrderNumber] [int] NULL,
	[BenefitSecuredAmount] [money] NULL,
	[TotalAwardAmount] [money] NULL,
	[EffectedOn] [datetime] NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SEQNo] [int] NOT NULL,
	[AWARD_FEE_DATE] [date] NULL,
	[DETERMINATION_UNQ_NO] [int] NOT NULL,
 CONSTRAINT [PK__Determin__42357C51E697183B] PRIMARY KEY CLUSTERED 
(
	[ID_Determination_Case] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [Report].[VwDetermination]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*===========================================
	Author:Praveen
	Created Date: 10-JAN-2023
	Description:To view the data in main table
	EXECUTION : SELECT * FROM [Report].[VwDetermination]
=============================================*/
CREATE VIEW [Report].[VwDetermination] AS

SELECT  CaseNumber
	   ,DeterminationType
	   ,Amount
	   ,PayorName
	   ,PayorAmount
	   ,DeterminationDate
	   ,IsConfidential
	   ,CourtDecision
	   ,OtherDecisionInformation
	   ,AssociatedFiles
	   ,AwardCostAmount
	   ,AttorneyFeeAmount
	   ,OrderNumber
	   ,BenefitSecuredAmount
	   ,TotalAwardAmount
	   ,EffectedOn
       ,ROW_NUMBER() OVER(PARTITION BY CaseNumber ORDER BY DeterminationDate) AS Determination_Case_Sequence
  FROM [dbo].[Determination_Case] DC
	LEFT JOIN [dbo].[Cases] C ON C.ID_Case = DC.FK_Case
	LEFT JOIN [dbo].[RefDeterminationType] DT ON DT.ID_DeterminationType = DC.FK_DeterminationType
  where DC.[IsDeleted]=0
GO
/****** Object:  Table [Stg].[Plaintiff]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Plaintiff](
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[PLAINTIFF1_FULL_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_FIRST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_MI] [nvarchar](max) NULL,
	[PLAINTIFF1_LAST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_SUFFIX] [nvarchar](max) NULL,
	[PLAINTIFF1_ADDRESS1] [nvarchar](max) NULL,
	[PLAINTIFF1_ADDRESS2] [nvarchar](max) NULL,
	[PLAINTIFF1_CITY] [nvarchar](max) NULL,
	[PLAINTIFF1_STATE] [nvarchar](max) NULL,
	[PLAINTIFF1_ZIP4] [nvarchar](max) NULL,
	[PLAINTIFF1_PHONE] [nvarchar](max) NULL,
	[PLAINTIFF1_BIRTHDATE] [nvarchar](max) NULL,
	[PLAINTIFF1_AGE_RANGE_AT_TIME_OF_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF1_DISABLED] [nvarchar](max) NULL,
	[PLAINTIFF1_GENDER] [nvarchar](max) NULL,
	[PLAINTIFF1_FIRST_PARTY_HEALTHCARE_COVERAGE] [nvarchar](max) NULL,
	[PLAINTIFF1_OCCUPATION] [nvarchar](max) NULL,
	[PLAINTIFF1_MEDICAL_BENEFITS_ONLY] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_13_WEEKS_PRECEDING_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENTLY_WITH_SAME_EMPLOYER] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_WORK_LEVEL] [nvarchar](max) NULL,
	[PLAINTIFF1_HAS_MMI_BEEN_REACHED] [nvarchar](max) NULL,
	[PLAINTIFF1_HAS_MMI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF1_DOL_JOB_CLASSIFICATION_CODE] [nvarchar](max) NULL,
	[PLAINTIFF1_DOL_JOB_CLASSIFICATION_DESCRIPTION] [nvarchar](max) NULL,
	[PLAINTIFF1_DETAIL_DESCRIPTION_OF_JOB] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_APPLIED] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_ACCEPTED] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_PRECEDING_13WEEKS_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_PRECEDING_13WEEKS_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF2_FULL_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_FIRST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_MI] [nvarchar](max) NULL,
	[PLAINTIFF2_LAST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_SUFFIX] [nvarchar](max) NULL,
	[PLAINTIFF2_ADDRESS1] [nvarchar](max) NULL,
	[PLAINTIFF2_ADDRESS2] [nvarchar](max) NULL,
	[PLAINTIFF2_CITY] [nvarchar](max) NULL,
	[PLAINTIFF2_STATE] [nvarchar](max) NULL,
	[PLAINTIFF2_ZIP4] [nvarchar](max) NULL,
	[PLAINTIFF2_PHONE] [nvarchar](max) NULL,
	[PLAINTIFF2_BIRTHDATE] [nvarchar](max) NULL,
	[PLAINTIFF2_AGE_RANGE_AT_TIME_OF_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF2_DISABLED] [nvarchar](max) NULL,
	[PLAINTIFF2_GENDER] [nvarchar](max) NULL,
	[PLAINTIFF2_FIRST_PARTY_HEALTHCARE_COVERAGE] [nvarchar](max) NULL,
	[PLAINTIFF2_OCCUPATION] [nvarchar](max) NULL,
	[PLAINTIFF2_MEDICAL_BENEFITS_ONLY] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_13_WEEKS_PRECEDING_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENTLY_WITH_SAME_EMPLOYER] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_WORK_LEVEL] [nvarchar](max) NULL,
	[PLAINTIFF2_HAS_MMI_BEEN_REACHED] [nvarchar](max) NULL,
	[PLAINTIFF2_HAS_MMI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF2_DOL_JOB_CLASSIFICATION_CODE] [nvarchar](max) NULL,
	[PLAINTIFF2_DOL_JOB_CLASSIFICATION_DESCRIPTION] [nvarchar](max) NULL,
	[PLAINTIFF2_DETAIL_DESCRIPTION_OF_JOB] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_APPLIED] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_ACCEPTED] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_PRECEDING_13WEEKS_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_PRECEDING_13WEEKS_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[ASSOCIATEDFILES] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[AWW_13WEEKS_PRECEDING_ACCIDENT_HOURLY] [nvarchar](max) NULL,
	[AWW_PRECEDING_13_WEEKS_DETAIL] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Stg].[VwPlantiff]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO















CREATE VIEW [Stg].[VwPlantiff] AS
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT [COURT_CASE_NUM]
      ,[Plaintiff1_Full_Name]
      ,[Plaintiff1_FIRST_NAME]
      ,[Plaintiff1_MI]
      ,[Plaintiff1_LAST_NAME]
      ,[Plaintiff1_SUFFIX]
      ,[Plaintiff1_Address1]
      ,[Plaintiff1_Address2]
      ,[Plaintiff1_City]
      ,[Plaintiff1_State]
      ,[Plaintiff1_Zip4]
      ,[Plaintiff1_Phone]
      ,[Plaintiff1_BIRTHDATE]
      ,[Plaintiff1_AGE_RANGE_AT_TIME_OF_ACCIDENT]
      ,[Plaintiff1_DISABLED]
      ,[Plaintiff1_GENDER]
      ,[Plaintiff1_FIRST_PARTY_HEALTHCARE_COVERAGE]
      ,[Plaintiff1_OCCUPATION]
      ,[Plaintiff1_MEDICAL_BENEFITS_ONLY]
      ,[Plaintiff1_AWW_13_WEEKS_PRECEDING_ACCIDENT]
      ,[Plaintiff1_CURRENT_AWW]
      ,[Plaintiff1_CURRENTLY_WITH_SAME_EMPLOYER]
      ,[Plaintiff1_CURRENT_WORK_LEVEL]
      ,[Plaintiff1_HAS_MMI_BEEN_REACHED]
      ,[Plaintiff1_HAS_MMI_DATE]
      ,[Plaintiff1_DOL_JOB_CLASSIFICATION_CODE]
      ,[Plaintiff1_DOL_JOB_CLASSIFICATION_DESCRIPTION]
      ,[Plaintiff1_DETAIL_DESCRIPTION_OF_JOB]
      ,[Plaintiff1_SSDI_APPLIED]
      ,[Plaintiff1_SSDI_ACCEPTED]
      ,[Plaintiff1_SSDI_DATE]
	  ,AssociatedFILES
	  ,Plaintiff1_CURRENT_AWW_HOURLY
	  ,Plaintiff1_CURRENT_AWW_DETAIL
	  ,PLAINTIFF1_AWW_PRECEDING_13WEEKS_HOURLY
	  ,PLAINTIFF1_AWW_PRECEDING_13WEEKS_DETAIL
	  ,1 as OrderNo
      ,[IsValidRecord]
  FROM [Stg].[Plaintiff]
   WHERE ([Plaintiff1_Full_Name] IS NOT NULL OR [Plaintiff1_FIRST_NAME]  IS NOT NULL OR [Plaintiff1_LAST_NAME]  IS NOT NULL)

  UNION ALL

  /****** Script for SelectTopNRows command from SSMS  ******/
SELECT [COURT_CASE_NUM]
      ,[Plaintiff2_Full_Name]
      ,[Plaintiff2_FIRST_NAME]
      ,[Plaintiff2_MI]
      ,[Plaintiff2_LAST_NAME]
      ,[Plaintiff2_SUFFIX]
      ,[Plaintiff2_Address1]
      ,[Plaintiff2_Address2]
      ,[Plaintiff2_City]
      ,[Plaintiff2_State]
      ,[Plaintiff2_Zip4]
      ,[Plaintiff2_Phone]
      ,[Plaintiff2_BIRTHDATE]
      ,[Plaintiff2_AGE_RANGE_AT_TIME_OF_ACCIDENT]
      ,[Plaintiff2_DISABLED]
      ,[Plaintiff2_GENDER]
      ,[Plaintiff2_FIRST_PARTY_HEALTHCARE_COVERAGE]
      ,[Plaintiff2_OCCUPATION]
      ,[Plaintiff2_MEDICAL_BENEFITS_ONLY]
      ,[Plaintiff2_AWW_13_WEEKS_PRECEDING_ACCIDENT]
      ,[Plaintiff2_CURRENT_AWW]
      ,[Plaintiff2_CURRENTLY_WITH_SAME_EMPLOYER]
      ,[Plaintiff2_CURRENT_WORK_LEVEL]
      ,[Plaintiff2_HAS_MMI_BEEN_REACHED]
      ,[Plaintiff2_HAS_MMI_DATE]
      ,[Plaintiff2_DOL_JOB_CLASSIFICATION_CODE]
      ,[Plaintiff2_DOL_JOB_CLASSIFICATION_DESCRIPTION]
      ,[Plaintiff2_DETAIL_DESCRIPTION_OF_JOB]
      ,[Plaintiff2_SSDI_APPLIED]
      ,[Plaintiff2_SSDI_ACCEPTED]
      ,[Plaintiff2_SSDI_DATE]
	  ,AssociatedFILES
	  ,Plaintiff2_CURRENT_AWW_HOURLY
	  ,Plaintiff2_CURRENT_AWW_DETAIL
	  ,PLAINTIFF2_AWW_PRECEDING_13WEEKS_HOURLY
	  ,PLAINTIFF2_AWW_PRECEDING_13WEEKS_DETAIL
	  ,2 as OrderNo
      ,[IsValidRecord]
  FROM [Stg].[Plaintiff]
  WHERE ([Plaintiff2_Full_Name] IS NOT NULL OR [Plaintiff2_FIRST_NAME]  IS NOT NULL OR [Plaintiff2_LAST_NAME]  IS NOT NULL)
GO
/****** Object:  Table [Stg].[Injuries]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Injuries](
	[COURT_CASE_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_1] [nvarchar](max) NULL,
	[BODYPART1_NAME] [nvarchar](max) NULL,
	[INJURY1_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_1] [nvarchar](max) NULL,
	[BODY_PART1_LOCATION] [nvarchar](max) NULL,
	[BODY_PART1_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_2] [nvarchar](max) NULL,
	[BODY_PART2_NAME] [nvarchar](max) NULL,
	[INJURY_2_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_2] [nvarchar](max) NULL,
	[BODY_PART2_LOC] [nvarchar](max) NULL,
	[BODY_PART2_ID_NUM] [nvarchar](max) NULL,
	[ICD_CODE_3] [nvarchar](max) NULL,
	[BODY_PART3_NAME] [nvarchar](max) NULL,
	[INJURY_3_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_3] [nvarchar](max) NULL,
	[BODY_PART3_LOCATION] [nvarchar](max) NULL,
	[BODY_PART3_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_4] [nvarchar](max) NULL,
	[BODY_PART4_NAME] [nvarchar](max) NULL,
	[INJURY_4_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_4] [nvarchar](max) NULL,
	[BODY_PART4_LOCATION] [nvarchar](max) NULL,
	[BODY_PART4_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_5] [nvarchar](max) NULL,
	[BODY_PART5_NAME] [nvarchar](max) NULL,
	[INJURY_5_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_5] [nvarchar](max) NULL,
	[BODY_PART5_LOCATION] [nvarchar](max) NULL,
	[BODY_PART5_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_6] [nvarchar](max) NULL,
	[BODY_PART6_NAME] [nvarchar](max) NULL,
	[INJURY_6_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_6] [nvarchar](max) NULL,
	[BODY_PART6_LOCATION] [nvarchar](max) NULL,
	[BODY_PART6_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_7] [nvarchar](max) NULL,
	[BODY_PART7_NAME] [nvarchar](max) NULL,
	[INJURY_7_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_7] [nvarchar](max) NULL,
	[BODY_PART7_LOCATION] [nvarchar](max) NULL,
	[BODY_PART7_ID_NUMBER] [nvarchar](max) NULL,
	[ICD_CODE_8] [nvarchar](max) NULL,
	[BODY_PART8_NAME] [nvarchar](max) NULL,
	[INJURY_8_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_8] [nvarchar](max) NULL,
	[ICD_CODE_9] [nvarchar](max) NULL,
	[BODY_PART9_NAME] [nvarchar](max) NULL,
	[INJURY_9_NAME] [nvarchar](max) NULL,
	[RECOVERY_DATE_9] [nvarchar](max) NULL,
	[BODY_PART9_LOCATION] [nvarchar](max) NULL,
	[BODY_PART9_ID_NUMBER] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Stg].[VwInjuries]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [Stg].[VwInjuries] 
AS
/*===========================================
	Author:Praveen
	Created Date: 06-JAN-2023
	Description:To transform Injury table
	EXECUTION : SELECT * FROM 
 =============================================*/
SELECT DISTINCT [Court_Case_Number] Case_number,1 OrderNo, [ICD_Code_1] ICD_Code, [BodyPart1_Name] Body_Part_Name, [Injury1_Name] Injury_Name, [Recovery_Date_1] Recovery_Date, [Body_Part1_Location] Body_Part_Loc, [Body_Part1_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 2 OrderNo,[ICD_Code_2] ICD_Code, [Body_Part2_Name] Body_Part_Name, [Injury_2_Name] Injury_Name, [Recovery_Date_2] Recovery_Date, [Body_Part2_Loc] Body_Part_Loc, [Body_Part2_ID_Num] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 3 OrderNo,[ICD_Code_3] ICD_Code, [Body_Part3_Name] Body_Part_Name, [Injury_3_Name] Injury_Name, [Recovery_Date_3] Recovery_Date, [Body_Part3_Location] Body_Part_Loc, [Body_Part3_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 4 OrderNo,[ICD_Code_4] ICD_Code, [Body_Part4_Name] Body_Part_Name, [Injury_4_Name] Injury_Name, [Recovery_Date_4] Recovery_Date, [Body_Part4_Location] Body_Part_Loc, [Body_Part4_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 5 OrderNo,[ICD_Code_5] ICD_Code, [Body_Part5_Name] Body_Part_Name, [Injury_5_Name] Injury_Name, [Recovery_Date_5] Recovery_Date, [Body_Part5_Location] Body_Part_Loc, [Body_Part5_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 6 OrderNo,[ICD_Code_6] ICD_Code, [Body_Part6_Name] Body_Part_Name, [Injury_6_Name] Injury_Name, [Recovery_Date_6] Recovery_Date, [Body_Part6_Location] Body_Part_Loc, [Body_Part6_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 7 OrderNo,[ICD_Code_7] ICD_Code, [Body_Part7_Name] Body_Part_Name, [Injury_7_Name] Injury_Name, [Recovery_Date_7] Recovery_Date, [Body_Part7_Location] Body_Part_Loc, [Body_Part7_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 8 OrderNo,[ICD_Code_8] ICD_Code, [Body_Part8_Name] Body_Part_Name, [Injury_8_Name] Injury_Name, [Recovery_Date_8] Recovery_Date, '' Body_Part_Loc, '' Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries] 
UNION  
SELECT DISTINCT [Court_Case_Number] Case_number, 9 OrderNo,[ICD_Code_9] ICD_Code, [Body_Part9_Name] Body_Part_Name, [Injury_9_Name] Injury_Name, [Recovery_Date_9] Recovery_Date, [Body_Part9_Location] Body_Part_Loc, [Body_Part9_ID_Number] Body_Part_ID_Num,IsValidRecord FROM [Stg].[Injuries]
GO
/****** Object:  Table [Stg].[AWW]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[AWW](
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[SO_AWW_AMOUNT] [nvarchar](max) NULL,
	[SO_MMI_DATE] [nvarchar](max) NULL,
	[SO_MMI_DATE_SEQUENCE_NUMBER] [nvarchar](max) NULL,
	[PFB_MMI_DATE] [nvarchar](max) NULL,
	[PFB_AWW_AMOUNT] [nvarchar](max) NULL,
	[PFB_MMI_DATE_SEQUENCE_NUMBER] [nvarchar](max) NULL,
	[AWW_STATUS] [nvarchar](max) NULL,
	[SO_AWW_HOUR_WAGE] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[SEQ_NO] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Stg].[VwAWW_Case]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*===========================================
	Author:BB
	Created Date: 07-JAN-2023
	Description:
=============================================*/



CREATE VIEW [Stg].[VwAWW_Case] AS
SELECT  [COURT_CASE_NUM]
      ,[SO_AWW_Amount] AS AWW_Amount
      ,[SO_MMI_Date] AS MMI_Date
      ,[SO_MMI_Date_SEQUENCE_NUMBER] AS Sub_Num
	  ,'SO' AWWType
      ,[IsValidRecord]
	  ,[AWW_Status]
	  ,[SO_AWW_Hour_Wage] [AWW_Hour_Wage]
  FROM [Stg].[AWW]

  UNION ALL

  SELECT  [COURT_CASE_NUM]
      ,[PFB_AWW_Amount]
      ,[PFB_MMI_Date]
      ,[PFB_MMI_Date_SEQUENCE_NUMBER]
	  ,'PFB' AWWType
      ,[IsValidRecord]
	   ,[AWW_Status]
	  ,[SO_AWW_Hour_Wage] [AWW_Hour_Wage]
  FROM [Stg].[AWW]
GO
/****** Object:  View [Stg].[VwICD_Codes]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [Stg].[VwICD_Codes] 
AS
select DISTINCT ICD_Code_1 FROM STG.Injuries WHERE ICD_Code_1 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_2 FROM STG.Injuries WHERE ICD_Code_2 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_3 FROM STG.Injuries WHERE ICD_Code_3 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_4 FROM STG.Injuries WHERE ICD_Code_4 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_5 FROM STG.Injuries WHERE ICD_Code_5 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_6 FROM STG.Injuries WHERE ICD_Code_6 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_7 FROM STG.Injuries WHERE ICD_Code_7 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_8 FROM STG.Injuries WHERE ICD_Code_8 IS NOT NULL 
UNION
select DISTINCT  ICD_Code_9 FROM STG.Injuries WHERE ICD_Code_9 IS NOT NULL
GO
/****** Object:  Table [Stg].[Carrier]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Carrier](
	[CASE_NUM] [nvarchar](max) NULL,
	[CARRIER_1_ID_GROUP_NUM] [nvarchar](max) NULL,
	[CARRIER_1_ID_CO_NUM] [nvarchar](max) NULL,
	[CARRIER_1_PARENT_NAME] [nvarchar](max) NULL,
	[CARRIER_1_NAME] [nvarchar](max) NULL,
	[CARRIER_1_PO_BOX_OR_STREET_ADDRESS1] [nvarchar](max) NULL,
	[CARRIER_1_PO_BOX_OR_STREET_ADDRESS2] [nvarchar](max) NULL,
	[INSURANCE_CARRIER_1_CITY] [nvarchar](max) NULL,
	[CARRIER_1_STATE] [nvarchar](max) NULL,
	[CARRIER_1_ZIP] [nvarchar](max) NULL,
	[CARRIER_1_PHONE] [nvarchar](max) NULL,
	[DATE_REPORTED_TO_CARRIER] [nvarchar](max) NULL,
	[DATE_INJURY_OR_ILLNESS_RECORD_IS_CREATED_IN_SELF_INSURED_OR_CARRIER_SYSTEM] [nvarchar](max) NULL,
	[CARRIER_POLICY_NUMBER] [nvarchar](max) NULL,
	[CARRIER_1_CLAIM_NUMBER] [nvarchar](max) NULL,
	[CARRIER_1_COVERAGE] [nvarchar](max) NULL,
	[CARRIER_1_FEIN] [nvarchar](max) NULL,
	[CARRIER_1_COVERAGE_LIMITS] [nvarchar](max) NULL,
	[CARRIER_1_LOSS_DATE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_FIRST_NAME] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_LAST_NAME] [nvarchar](max) NULL,
	[CARRIER_1_ADDRESS_1] [nvarchar](max) NULL,
	[CARRIER-_1_ADJUSTER_CITY] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_STATE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_ZIP] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_EMAIL] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_PHONE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_FAX] [nvarchar](max) NULL,
	[CARRIER_2_ID_CO_NUM] [nvarchar](max) NULL,
	[CARRIER_2_PARENT_NAME] [nvarchar](max) NULL,
	[CARRIER_2_NAME] [nvarchar](max) NULL,
	[CARRIER_2_PO_BOX_OR_STREET_ADDRESS] [nvarchar](max) NULL,
	[CARRIER_2_CITY] [nvarchar](max) NULL,
	[CARRIER_2_STATE] [nvarchar](max) NULL,
	[CARRIER_2_ZIP] [nvarchar](max) NULL,
	[CARRIER_2_PHONE] [nvarchar](max) NULL,
	[DATE_REPORTED_TO_CARRIER_2] [nvarchar](max) NULL,
	[CARRIER_2_DATE_INJURY_OR_ILLNESS_RECORD_IS_CREATED_IN_SELF_INSURED_OR_CARRIER_SYSTEM] [nvarchar](max) NULL,
	[CARRIER_2_POLICY_NUMBER] [nvarchar](max) NULL,
	[CARRIER_2_CLAIM_NUMBER] [nvarchar](max) NULL,
	[CARRIER_2_COVERAGE] [nvarchar](max) NULL,
	[CARRIER_2_FEIN] [nvarchar](max) NULL,
	[CARRIER_2_COVERAGE_LIMITS] [nvarchar](max) NULL,
	[CARRIER_2_LOSS_DATE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_LAST_NAME] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_FIRST_NAME] [nvarchar](max) NULL,
	[CARRIER_2_ADDRESS_1] [nvarchar](max) NULL,
	[CARRIER-_2_ADJUSTER_CITY] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_STATE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_ZIP] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_EMAIL] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_PHONE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_FAX] [nvarchar](max) NULL,
	[CARRIER_2_ID_GROUP_NUM] [nvarchar](max) NULL,
	[CARRIER_2_PO_BOX_OR_STREET_ADDRESS2] [nvarchar](max) NULL,
	[ISVALIDRECORD1] [bit] NOT NULL,
	[ISVALIDRECORD2] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[VALIDDATA] [nvarchar](max) NULL,
	[ISVALIDRECORD] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [Stg].[VwCarrier]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [Stg].[VwCarrier] 
AS
/*===========================================
	Author:Praveen
	Created Date: 06-JAN-2023
	Description:To transform Injury table
	EXECUTION : SELECT * FROM [Stg].[VwCarrier] 
 =============================================*/
SELECT DISTINCT 
 Case_Num
,Carrier_1_ID_Group_Num AS ID_Group_Num
,Carrier_1_ID_Co_Num AS ID_Co_Num
,Carrier_1_Parent_Name AS Parent_Name
,Carrier_1_Name AS [Name]
,Carrier_1_PO_Box_or_Street_Address1 AS PO_Box_or_Street_Address1
,Carrier_1_PO_Box_or_Street_Address2 AS PO_Box_or_Street_Address2
,Insurance_Carrier_1_City AS Carrier_City
,Carrier_1_State AS State
,Carrier_1_Zip AS Zip
,Carrier_1_Phone AS Phone
,Date_Reported_to_Carrier AS InjuryReportedDate
,Date_Injury_or_Illness_Record_is_Created_in_Self_Insured_or_Carrier_System AS InjurySystemCreatedDate
,Carrier_Policy_Number AS PolicyNumber
,Carrier_1_Claim_Number AS ClaimNumber
,Carrier_1_Coverage AS Coverage
,Carrier_1_FEIN AS FederalEmployerID
,Carrier_1_Coverage_Limits AS CoverageAmountLimit
,Carrier_1_Loss_Date AS LossDate
,Carrier_1_Adjuster_First_Name AS Adjuster_First_Name
,Carrier_1_Adjuster_Last_Name AS Adjuster_Last_Name
,Carrier_1_Address_1 AS Adjuster_Address
,[Carrier-_1_Adjuster_City] AS Adjuster_City
,Carrier_1_Adjuster_State   AS Adjuster_State
,Carrier_1_Adjuster_Zip		AS Adjuster_Zip
,Carrier_1_Adjuster_Email	AS Adjuster_Email
,Carrier_1_Adjuster_Phone	AS Adjuster_Phone
,Carrier_1_Adjuster_Fax		AS Adjuster_Fax

FROM [Stg].[Carrier] 
where ISVALIDRECORD1 = 1

UNION  
SELECT DISTINCT 
 Case_Num
,Carrier_2_ID_Group_Num
,Carrier_2_ID_Co_Num
,Carrier_2_Parent_Name
,Carrier_2_Name
,Carrier_2_PO_Box_or_Street_Address
,Carrier_2_PO_Box_or_Street_Address2
,Carrier_2_City
,Carrier_2_State
,Carrier_2_Zip
,Carrier_2_Phone
,Date_Reported_to_Carrier_2
,Carrier_2_Date_Injury_or_Illness_Record_is_Created_in_Self_Insured_or_Carrier_System
,Carrier_2_Policy_Number
,Carrier_2_Claim_Number
,Carrier_2_Coverage
,Carrier_2_FEIN
,Carrier_2_Coverage_Limits
,Carrier_2_Loss_Date
,Carrier_2_Adjuster_Last_Name
,Carrier_2_Adjuster_First_Name
,Carrier_2_Address_1
,[Carrier-_2_Adjuster_City]
,Carrier_2_Adjuster_State
,Carrier_2_Adjuster_Zip
,Carrier_2_Adjuster_Email
,Carrier_2_Adjuster_Phone
,Carrier_2_Adjuster_Fax

FROM  [Stg].[Carrier] 
where ISVALIDRECORD2 = 1
and (Carrier_2_Parent_Name is not null
 AND Carrier_2_Name is not null)
GO
/****** Object:  View [dbo].[pbi_financials]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE   VIEW  [dbo].[pbi_financials] AS
(


SELECT c.[CaseNumber]
      ,[CaseName]
      ,[StatusOn]					as [Status]
      ,[DateofAccidentIllness]		as AccidentDate
	  ,dt.[DeterminationDate]		as SettlementDate
	  ,c.[AssignedOn]				as AssignmentDate
      ,[Accident_Type_LoB]
	  ,[Judge_FirstName] + ' ' + [Judge_LastName] as Judge
      ,[Accident_County]			as County
	  ,dt.[DeterminationType]
	  ,[AgeRange]

      ,SUM(dt.[Amount])					as SettlementAmount
	  ,SUM(dt.[AttorneyFeeAmount])		as AttorneyFee
	  ,SUM(dt.[AwardCostAmount])		as AwardCost
	  ,SUM(dt.[TotalAwardAmount])		as TotalDeterminationAward 
	  ,SUM([PASTPreDetermination_Attorney Fees]) as PreDeterminationAttorneyFees
      ,SUM([PASTPreDetermination_Hours Billed])	 as PreDeterminationHoursBilled
	  ,SUM([PASTPreDetermination_Attorney Fees])/SUM([PASTPreDetermination_Hours Billed]) as HourlyRate
	  ,SUM([PASTPreDetermination_Statutory_Fees]) as PASTPreDetermination_Statutory_Fees

FROM [Report].[VwCases] as c

LEFT JOIN [Report].[VwDetermination] as dt on c.[CaseNumber] = dt.[CaseNumber]
LEFT JOIN [Report].[VwPast_Damages] as pd on pd.[Court_Case_Number] = c.[CaseNumber]

WHERE c.[CaseName] IS NOT NULL
	and YEAR (c.[AssignedOn]) >= 2017	

GROUP BY c.[CaseNumber]
      ,[CaseName]
      ,[StatusOn]					
      ,[DateofAccidentIllness]
	  ,c.[AssignedOn]	
	  ,dt.[DeterminationDate]
	  ,[Accident_Type_LoB]
	  ,[Judge_FirstName]
	  ,[Judge_LastName]
      ,[Accident_County]
	  ,dt.[DeterminationType]
	  ,[AgeRange]

	  )
GO
/****** Object:  Table [Config].[DataFlowControl]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Config].[DataFlowControl](
	[DataFlowControlID] [bigint] IDENTITY(1,1) NOT NULL,
	[SourceSystem] [nvarchar](200) NOT NULL,
	[SourceSchema] [nvarchar](100) NULL,
	[SourceTable] [nvarchar](100) NULL,
	[TargetSchema] [nvarchar](100) NULL,
	[TargetTable] [nvarchar](100) NULL,
	[IsActive] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [varchar](20) NULL,
	[UpdatedDate] [datetime] NULL,
	[UpdatedBy] [datetime] NULL,
	[DataLoadProcedure] [nvarchar](200) NULL,
	[DataValidateProcedure] [nvarchar](100) NULL,
	[VaildationQuery] [nvarchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AWW_Case_OLD]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AWW_Case_OLD](
	[ID_AWW_Case] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NULL,
	[Case_Num] [varchar](30) NULL,
	[SO_AWW_Amount] [decimal](18, 0) NULL,
	[SO_MMI_Date] [date] NULL,
	[PFB_MMI_Date] [date] NULL,
	[PFB_AWW_Amount] [decimal](18, 0) NULL,
	[AWW_STATUS] [varchar](50) NULL,
	[SO_AWW_HOUR_WAGE] [decimal](18, 0) NULL,
	[SEQNo] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Carrier_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Carrier_Master](
	[ID_Carrier_Master] [bigint] IDENTITY(1,1) NOT NULL,
	[INS_CA_ID] [varchar](50) NULL,
	[Group_Number] [int] NULL,
	[Entity_Type] [varchar](100) NULL,
	[CARRIER_PARENT] [varchar](100) NULL,
	[INS_CA_Name] [varchar](100) NULL,
	[ALT_CO_Name] [nvarchar](100) NULL,
	[Insured_Address1] [varchar](100) NULL,
	[Insured_Address2] [varchar](100) NULL,
	[Insured_City] [varchar](100) NULL,
	[Insured_State] [varchar](100) NULL,
	[Insured_Zip4] [varchar](100) NULL,
	[INS_CA_Phone] [varchar](100) NULL,
	[Carrier_FEIN] [bigint] NULL,
	[Data_SOURCE] [varchar](100) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Carrier_Master] PRIMARY KEY CLUSTERED 
(
	[ID_Carrier_Master] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Carrier_Old]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Carrier_Old](
	[ID_Carrier] [bigint] IDENTITY(1,1) NOT NULL,
	[INS_CA_ID] [varchar](50) NULL,
	[CarrierName] [varchar](100) NULL,
	[FullName] [varchar](100) NULL,
	[ParentName] [varchar](100) NULL,
	[Address1] [varchar](100) NULL,
	[Address2] [varchar](100) NULL,
	[City] [varchar](100) NULL,
	[FK_State] [bigint] NULL,
	[ZIP4] [varchar](9) NULL,
	[Phone] [varchar](12) NULL,
	[GroupNumber] [int] NULL,
	[Licensed_Carrier_FEIN] [varchar](9) NULL,
	[Insurer_NAIC_GroupNumber] [varchar](10) NULL,
	[Insurer_NAIC_CompanyNumber] [varchar](10) NULL,
	[CreatedOn] [date] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [date] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Carrier__1502C5895CD036FE] PRIMARY KEY CLUSTERED 
(
	[ID_Carrier] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CaseNumberEntries]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseNumberEntries](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[caseNumber] [nvarchar](255) NOT NULL,
	[userId] [nvarchar](255) NOT NULL,
	[email] [nvarchar](255) NOT NULL,
	[date] [datetimeoffset](7) NOT NULL,
	[requestUrl] [nvarchar](255) NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CsvData]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CsvData](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[userId] [nvarchar](255) NOT NULL,
	[container] [nvarchar](255) NOT NULL,
	[directory] [nvarchar](255) NOT NULL,
	[filename] [nvarchar](255) NOT NULL,
	[url] [nvarchar](255) NULL,
	[date] [datetimeoffset](7) NOT NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataLoadStatus]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataLoadStatus](
	[StatusDate] [date] NOT NULL,
	[DataTable] [varchar](50) NOT NULL,
	[TotalRecord] [int] NOT NULL,
	[ProcessedRecords] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FullFormEntries]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FullFormEntries](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[primaryBodyPart1] [nvarchar](255) NULL,
	[primaryBodyPart2] [nvarchar](255) NULL,
	[primaryBodyPart3] [nvarchar](255) NULL,
	[primaryBodyPart4] [nvarchar](255) NULL,
	[primaryBodyPart5] [nvarchar](255) NULL,
	[primaryBodyPart6] [nvarchar](255) NULL,
	[accidentType] [nvarchar](255) NULL,
	[accidentLineOfBusiness] [nvarchar](255) NULL,
	[medicalCondition] [nvarchar](255) NULL,
	[state] [nvarchar](255) NULL,
	[countyOrJurisdiction] [nvarchar](255) NULL,
	[dateOfBirth] [nvarchar](255) NULL,
	[gender] [nvarchar](255) NULL,
	[isThirdPartyAdministrator] [int] NULL,
	[thirdPartyAdministrator] [nvarchar](255) NULL,
	[isCompanySelfInsured] [int] NULL,
	[insuranceCarrierGroup] [nvarchar](255) NULL,
	[insuranceCarrierGroup2] [nvarchar](255) NULL,
	[adjusterName] [nvarchar](255) NULL,
	[employerOrInsuredName1] [nvarchar](255) NULL,
	[employerOrInsuredName2] [nvarchar](255) NULL,
	[defenceAttorney1] [nvarchar](255) NULL,
	[defenceAttorneyLawFirm1] [nvarchar](255) NULL,
	[defenceAttorney2] [nvarchar](255) NULL,
	[defenceAttorneyLawFirm2] [nvarchar](255) NULL,
	[judgeName] [nvarchar](255) NULL,
	[mediatorName] [nvarchar](255) NULL,
	[caseNumber] [nvarchar](255) NULL,
	[userId] [nvarchar](255) NOT NULL,
	[email] [nvarchar](255) NOT NULL,
	[date] [datetimeoffset](7) NOT NULL,
	[requestUrl] [nvarchar](255) NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
	[claimantName] [nvarchar](255) NULL,
	[dateOfAccident] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Injury_OLD11042023]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Injury_OLD11042023](
	[ID_Injury] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_BodyPart] [int] NULL,
	[FK_BodyPartLocation] [int] NULL,
	[FK_ICD_Code] [int] NULL,
	[BodyPart_IDNumber] [int] NULL,
	[InjuryName] [varchar](300) NULL,
	[RecoveryDate] [datetime] NULL,
	[OrderNoBodyPart] [int] NOT NULL,
	[OrderNoInjury] [int] NOT NULL,
	[OrderNoColumn] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SEQNo] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Migrations]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Migrations](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[fileName] [nvarchar](255) NOT NULL,
	[batch] [nvarchar](255) NOT NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PlaintiffPartyHCCoverage]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PlaintiffPartyHCCoverage](
	[ID_PlaintiffPartyHCCoverage] [bigint] IDENTITY(1,1) NOT NULL,
	[FK_Case] [bigint] NOT NULL,
	[FK_Plaintiff] [bigint] NOT NULL,
	[FK_PlaintiffHCCoverage] [int] NOT NULL,
	[PartyNo] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__Plaintif__25BCE080B59C318B] PRIMARY KEY CLUSTERED 
(
	[ID_PlaintiffPartyHCCoverage] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefAccident_Type_LoB]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefAccident_Type_LoB](
	[ID_Accident_Type_LoB] [int] IDENTITY(1,1) NOT NULL,
	[Accident_Type_LoB] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefAdjusterCompanyType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefAdjusterCompanyType](
	[ID_CompanyType] [int] IDENTITY(1,1) NOT NULL,
	[CompanyType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_CompanyType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefCaseStatusResult]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefCaseStatusResult](
	[ID_CaseStatusResult] [int] NOT NULL,
	[CaseStatusResult] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefCourtDispositonType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefCourtDispositonType](
	[ID_CourtDispositonType] [int] IDENTITY(1,1) NOT NULL,
	[CourtDispositonType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_CourtDispositonType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefCurrent_Work_level]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefCurrent_Work_level](
	[ID_Current_Work_level] [int] IDENTITY(1,1) NOT NULL,
	[Current_Work_level] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NULL,
	[ModifiedOn] [datetime] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefDataSource]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefDataSource](
	[ID_DataSource] [int] IDENTITY(1,1) NOT NULL,
	[DataSource] [varchar](100) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_RefDataSource] PRIMARY KEY CLUSTERED 
(
	[ID_DataSource] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefDemandLetterDamages]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefDemandLetterDamages](
	[ID_DemandLetterDamages] [int] IDENTITY(1,1) NOT NULL,
	[DemandLetterDamages] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_DemandLetterDamages] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefDisabilityCodes]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefDisabilityCodes](
	[ID_DisabilityCodes] [int] IDENTITY(1,1) NOT NULL,
	[DisabilityCodes] [varchar](50) NOT NULL,
	[DisabilityDesc] [varchar](250) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK__RefDisab__F281C3E9654572C0] PRIMARY KEY CLUSTERED 
(
	[ID_DisabilityCodes] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefInsuredType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefInsuredType](
	[ID_InsuredType] [int] IDENTITY(1,1) NOT NULL,
	[InsuredType] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[ModifiedOn] [datetime] NULL,
	[ModifiedBy] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_InsuredType] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RefTPAType]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RefTPAType](
	[ID_TPAType] [int] IDENTITY(1,1) NOT NULL,
	[TPA_Type] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RoleMasters]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RoleMasters](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[name] [nvarchar](255) NOT NULL,
	[label] [nvarchar](255) NOT NULL,
	[description] [nvarchar](255) NOT NULL,
	[status] [int] NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[sysdiagrams]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[sysdiagrams](
	[name] [sysname] NOT NULL,
	[principal_id] [int] NOT NULL,
	[diagram_id] [int] IDENTITY(1,1) NOT NULL,
	[version] [int] NULL,
	[definition] [varbinary](max) NULL,
PRIMARY KEY CLUSTERED 
(
	[diagram_id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_principal_name] UNIQUE NONCLUSTERED 
(
	[principal_id] ASC,
	[name] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[sysLogError]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[sysLogError](
	[ErrorLogID] [int] IDENTITY(1,1) NOT NULL,
	[ErrorNumber] [int] NULL,
	[ErrorSeverity] [int] NULL,
	[ErrorState] [int] NULL,
	[ErrorProcedure] [varchar](250) NULL,
	[ErrorLine] [int] NULL,
	[ErrorMessage] [varchar](4000) NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedUser] [varchar](50) NULL,
 CONSTRAINT [PK_sysLogError] PRIMARY KEY CLUSTERED 
(
	[ErrorLogID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[sysLogImport]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[sysLogImport](
	[LogImportID] [bigint] IDENTITY(1,1) NOT NULL,
	[ImportedSystem] [varchar](250) NULL,
	[ImportStartDate] [datetime] NULL,
	[ImportEndDate] [datetime] NULL,
	[TotalRowCount] [int] NULL,
	[ElapsedSeconds]  AS (datediff(second,[ImportStartDate],[ImportEndDate])),
	[Note] [varchar](2000) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[CreatedUser] [varchar](50) NOT NULL,
 CONSTRAINT [PK_sysLogImport] PRIMARY KEY CLUSTERED 
(
	[LogImportID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserDevices]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserDevices](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[userId] [nvarchar](255) NOT NULL,
	[deviceId] [nvarchar](255) NOT NULL,
	[appType] [nvarchar](255) NOT NULL,
	[sessionId] [nvarchar](255) NOT NULL,
	[refreshToken] [nvarchar](max) NOT NULL,
	[status] [int] NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Users]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[firstName] [nvarchar](255) NOT NULL,
	[lastName] [nvarchar](255) NOT NULL,
	[email] [nvarchar](255) NOT NULL,
	[companyName] [nvarchar](255) NOT NULL,
	[companyPhone] [nvarchar](255) NOT NULL,
	[password] [nvarchar](255) NOT NULL,
	[role] [nvarchar](255) NOT NULL,
	[status] [int] NOT NULL,
	[createdAt] [datetimeoffset](7) NOT NULL,
	[updatedAt] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Adjuster]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Adjuster](
	[ADJUSTER_UNIQUE_ID] [varchar](max) NULL,
	[ADJUSTER_SALUTATION] [varchar](max) NULL,
	[ADJUSTER_FIRSTNAME] [varchar](max) NULL,
	[ADJUSTER_MI] [varchar](max) NULL,
	[ADJUSTER_LASTNAME] [varchar](max) NULL,
	[ADJUSTER_SUFFIX] [varchar](max) NULL,
	[ADJUSTER_ADDRESS1] [varchar](max) NULL,
	[ADJUSTER_ADDRESS2] [varchar](max) NULL,
	[ADJUSTER_CITY] [varchar](max) NULL,
	[ADJUSTER_STATE] [varchar](max) NULL,
	[ADJUSTER_ZIP4] [varchar](max) NULL,
	[ADJUSTER_EMAIL] [varchar](max) NULL,
	[ADJUSTER_PHONE_NUMBER] [varchar](max) NULL,
	[ADJUSTER_FAX] [varchar](max) NULL,
	[ADJUSTER_COMPANYNAME] [varchar](max) NULL,
	[ADJUSTERS_PARENT_COMPANYNAME] [varchar](max) NULL,
	[ADJUSTER_COMPANY_TYPE] [varchar](max) NULL,
	[COMPANY_STATE_ID_NUMBER] [varchar](max) NULL,
	[COURT_CASE_NUMBER] [varchar](max) NULL,
	[COURT_CASE_SEQUENCE_NUMBER] [varchar](max) NULL,
	[ADJUSTER_FULLNAME] [varchar](max) NULL,
	[ADJUSTER_GENDER] [varchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Adjuster_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Adjuster_HIS](
	[ADJUSTER_UNIQUE_ID] [varchar](max) NULL,
	[ADJUSTER_SALUTATION] [varchar](max) NULL,
	[ADJUSTER_FIRSTNAME] [varchar](max) NULL,
	[ADJUSTER_MI] [varchar](max) NULL,
	[ADJUSTER_LASTNAME] [varchar](max) NULL,
	[ADJUSTER_SUFFIX] [varchar](max) NULL,
	[ADJUSTER_ADDRESS1] [varchar](max) NULL,
	[ADJUSTER_ADDRESS2] [varchar](max) NULL,
	[ADJUSTER_CITY] [varchar](max) NULL,
	[ADJUSTER_STATE] [varchar](max) NULL,
	[ADJUSTER_ZIP4] [varchar](max) NULL,
	[ADJUSTER_EMAIL] [varchar](max) NULL,
	[ADJUSTER_PHONE_NUMBER] [varchar](max) NULL,
	[ADJUSTER_FAX] [varchar](max) NULL,
	[ADJUSTER_COMPANYNAME] [varchar](max) NULL,
	[ADJUSTERS_PARENT_COMPANYNAME] [varchar](max) NULL,
	[ADJUSTER_COMPANY_TYPE] [varchar](max) NULL,
	[COMPANY_STATE_ID_NUMBER] [varchar](max) NULL,
	[COURT_CASE_NUMBER] [varchar](max) NULL,
	[COURT_CASE_SEQUENCE_NUMBER] [varchar](max) NULL,
	[ADJUSTER_FULLNAME] [varchar](max) NULL,
	[ADJUSTER_GENDER] [varchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Age_Range]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Age_Range](
	[Data Point] [nvarchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Attorney_List]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Attorney_List](
	[BADGE_TYPE_NAME] [nvarchar](max) NULL,
	[SALUTATION] [nvarchar](max) NULL,
	[FIRST_NAME] [nvarchar](max) NULL,
	[MIDDLE_NAME] [nvarchar](max) NULL,
	[LAST_NAME] [nvarchar](max) NULL,
	[SUFFIX] [nvarchar](max) NULL,
	[FIRM_NAME] [nvarchar](max) NULL,
	[MAILING_STREET] [nvarchar](max) NULL,
	[MAILING_CITY] [nvarchar](max) NULL,
	[MAILING_STATE/PROVINCE] [nvarchar](max) NULL,
	[PHONE] [nvarchar](max) NULL,
	[FAX] [nvarchar](max) NULL,
	[EMAIL] [nvarchar](max) NULL,
	[COUNTY_OF_OFFICIAL_ADDRESS] [nvarchar](max) NULL,
	[CIRCUIT_NUMBER_OF_OFFICIAL_ADDRESS] [nvarchar](max) NULL,
	[ATTORNEY_FULL_NAME] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[BOARD_CERTIFICATION] [nvarchar](max) NULL,
	[FLORIDA_BAR_NUMBER] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS_1] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS_2] [nvarchar](max) NULL,
	[ATTORNEY_ZIP4] [nvarchar](max) NULL,
	[ATTORNEY_CELL_PHONE] [nvarchar](max) NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[AWW_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[AWW_HIS](
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[SO_AWW_AMOUNT] [nvarchar](max) NULL,
	[SO_MMI_DATE] [nvarchar](max) NULL,
	[SO_MMI_DATE_SEQUENCE_NUMBER] [nvarchar](max) NULL,
	[PFB_MMI_DATE] [nvarchar](max) NULL,
	[PFB_AWW_AMOUNT] [nvarchar](max) NULL,
	[PFB_MMI_DATE_SEQUENCE_NUMBER] [nvarchar](max) NULL,
	[AWW_STATUS] [nvarchar](max) NULL,
	[SO_AWW_HOUR_WAGE] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Body_Part]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Body_Part](
	[Case_Num] [nvarchar](max) NULL,
	[Body_Part1_ID_Num] [nvarchar](max) NULL,
	[Body_Part1_Loc] [nvarchar](max) NULL,
	[Body_Part1] [nvarchar](max) NULL,
	[Body_Part2_ID_Num] [nvarchar](max) NULL,
	[Body_Part2_Loc] [nvarchar](max) NULL,
	[Body_Part2] [nvarchar](max) NULL,
	[Body_Part3_ID_Num] [nvarchar](max) NULL,
	[Body_Part3_Loc] [nvarchar](max) NULL,
	[Body_Part3] [nvarchar](max) NULL,
	[Body_Part4_ID_Num] [nvarchar](max) NULL,
	[Body_Part4_Loc] [nvarchar](max) NULL,
	[Body_Part4] [nvarchar](max) NULL,
	[Body_Part5_ID_Num] [nvarchar](max) NULL,
	[Body_Part5_Loc] [nvarchar](max) NULL,
	[Body_Part5] [nvarchar](max) NULL,
	[Body_Part6_ID_Num] [nvarchar](max) NULL,
	[Body_Part6_Loc] [nvarchar](max) NULL,
	[Body_Part6] [nvarchar](max) NULL,
	[Body_Part7_ID_Num] [nvarchar](max) NULL,
	[Body_Part7_Loc] [nvarchar](max) NULL,
	[Body_Part7] [nvarchar](max) NULL,
	[Body_Part8_ID_Num] [nvarchar](max) NULL,
	[Body_Part8_Loc] [nvarchar](max) NULL,
	[Body_Part8] [nvarchar](max) NULL,
	[Body_Part9_ID_Num] [nvarchar](max) NULL,
	[Body_Part9_Loc] [nvarchar](max) NULL,
	[Body_Part9] [nvarchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Carrier_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Carrier_HIS](
	[CASE_NUM] [nvarchar](max) NULL,
	[CARRIER_1_ID_GROUP_NUM] [nvarchar](max) NULL,
	[CARRIER_1_ID_CO_NUM] [nvarchar](max) NULL,
	[CARRIER_1_PARENT_NAME] [nvarchar](max) NULL,
	[CARRIER_1_NAME] [nvarchar](max) NULL,
	[CARRIER_1_PO_BOX_OR_STREET_ADDRESS1] [nvarchar](max) NULL,
	[CARRIER_1_PO_BOX_OR_STREET_ADDRESS2] [nvarchar](max) NULL,
	[INSURANCE_CARRIER_1_CITY] [nvarchar](max) NULL,
	[CARRIER_1_STATE] [nvarchar](max) NULL,
	[CARRIER_1_ZIP] [nvarchar](max) NULL,
	[CARRIER_1_PHONE] [nvarchar](max) NULL,
	[DATE_REPORTED_TO_CARRIER] [nvarchar](max) NULL,
	[DATE_INJURY_OR_ILLNESS_RECORD_IS_CREATED_IN_SELF_INSURED_OR_CARRIER_SYSTEM] [nvarchar](max) NULL,
	[CARRIER_POLICY_NUMBER] [nvarchar](max) NULL,
	[CARRIER_1_CLAIM_NUMBER] [nvarchar](max) NULL,
	[CARRIER_1_COVERAGE] [nvarchar](max) NULL,
	[CARRIER_1_FEIN] [nvarchar](max) NULL,
	[CARRIER_1_COVERAGE_LIMITS] [nvarchar](max) NULL,
	[CARRIER_1_LOSS_DATE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_FIRST_NAME] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_LAST_NAME] [nvarchar](max) NULL,
	[CARRIER_1_ADDRESS_1] [nvarchar](max) NULL,
	[CARRIER-_1_ADJUSTER_CITY] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_STATE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_ZIP] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_EMAIL] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_PHONE] [nvarchar](max) NULL,
	[CARRIER_1_ADJUSTER_FAX] [nvarchar](max) NULL,
	[CARRIER_2_ID_CO_NUM] [nvarchar](max) NULL,
	[CARRIER_2_PARENT_NAME] [nvarchar](max) NULL,
	[CARRIER_2_NAME] [nvarchar](max) NULL,
	[CARRIER_2_PO_BOX_OR_STREET_ADDRESS] [nvarchar](max) NULL,
	[CARRIER_2_CITY] [nvarchar](max) NULL,
	[CARRIER_2_STATE] [nvarchar](max) NULL,
	[CARRIER_2_ZIP] [nvarchar](max) NULL,
	[CARRIER_2_PHONE] [nvarchar](max) NULL,
	[DATE_REPORTED_TO_CARRIER_2] [nvarchar](max) NULL,
	[CARRIER_2_DATE_INJURY_OR_ILLNESS_RECORD_IS_CREATED_IN_SELF_INSURED_OR_CARRIER_SYSTEM] [nvarchar](max) NULL,
	[CARRIER_2_POLICY_NUMBER] [nvarchar](max) NULL,
	[CARRIER_2_CLAIM_NUMBER] [nvarchar](max) NULL,
	[CARRIER_2_COVERAGE] [nvarchar](max) NULL,
	[CARRIER_2_FEIN] [nvarchar](max) NULL,
	[CARRIER_2_COVERAGE_LIMITS] [nvarchar](max) NULL,
	[CARRIER_2_LOSS_DATE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_LAST_NAME] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_FIRST_NAME] [nvarchar](max) NULL,
	[CARRIER_2_ADDRESS_1] [nvarchar](max) NULL,
	[CARRIER-_2_ADJUSTER_CITY] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_STATE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_ZIP] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_EMAIL] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_PHONE] [nvarchar](max) NULL,
	[CARRIER_2_ADJUSTER_FAX] [nvarchar](max) NULL,
	[CARRIER_2_ID_GROUP_NUM] [nvarchar](max) NULL,
	[CARRIER_2_PO_BOX_OR_STREET_ADDRESS2] [nvarchar](max) NULL,
	[ISVALIDRECORD1] [bit] NOT NULL,
	[ISVALIDRECORD2] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[VALIDDATA] [nvarchar](max) NULL,
	[ISVALIDRECORD] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Carrier_Master]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Carrier_Master](
	[INS_CA_ID] [nvarchar](max) NULL,
	[GROUP_NUMBER] [nvarchar](max) NULL,
	[ENTITY_TYPE] [nvarchar](max) NULL,
	[CARRIER_PARENT] [nvarchar](max) NULL,
	[INS_CA_NAME] [nvarchar](max) NULL,
	[ALT_CO_NAME] [nvarchar](max) NULL,
	[INSURED_ADDRESS1] [nvarchar](max) NULL,
	[INSURED_ADDRESS2] [nvarchar](max) NULL,
	[INSURED_CITY] [nvarchar](max) NULL,
	[INSURED_STATE] [nvarchar](max) NULL,
	[INSURED_ZIP4] [nvarchar](max) NULL,
	[INS_CA_PHONE] [nvarchar](max) NULL,
	[CARRIER_FEIN] [nvarchar](max) NULL,
	[DATA_SOURCE] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Case_Attorney]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Case_Attorney](
	[ATTORNEY_FULLNAME] [nvarchar](max) NULL,
	[ATTORNEY_FIRSTNAME] [nvarchar](max) NULL,
	[ATTORNEY_MI] [nvarchar](max) NULL,
	[ATTORNEY_LASTNAME] [nvarchar](max) NULL,
	[ATTORNEY_SUFFIX] [nvarchar](max) NULL,
	[FIRM_NAME] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS 1] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS 2] [nvarchar](max) NULL,
	[ATTORNEY_CITY] [nvarchar](max) NULL,
	[ATTORNEY_STATE] [nvarchar](max) NULL,
	[ATTORNEY_ZIP4] [nvarchar](max) NULL,
	[ATTORNEY_OFFICE_PHONE] [nvarchar](max) NULL,
	[ATTORNEY_CELL_PHONE] [nvarchar](max) NULL,
	[ATTORNEY_FAX] [nvarchar](max) NULL,
	[ATTORNEY_BAR_NUMBER] [nvarchar](max) NULL,
	[ATTORNEY_EMAIL] [nvarchar](max) NULL,
	[ATTORNEY_REPRESENTATION_FLAG] [nvarchar](max) NULL,
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Case_Attorney_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Case_Attorney_HIS](
	[ATTORNEY_FULLNAME] [nvarchar](max) NULL,
	[ATTORNEY_FIRSTNAME] [nvarchar](max) NULL,
	[ATTORNEY_MI] [nvarchar](max) NULL,
	[ATTORNEY_LASTNAME] [nvarchar](max) NULL,
	[ATTORNEY_SUFFIX] [nvarchar](max) NULL,
	[FIRM_NAME] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS 1] [nvarchar](max) NULL,
	[ATTORNEY_ADDRESS 2] [nvarchar](max) NULL,
	[ATTORNEY_CITY] [nvarchar](max) NULL,
	[ATTORNEY_STATE] [nvarchar](max) NULL,
	[ATTORNEY_ZIP4] [nvarchar](max) NULL,
	[ATTORNEY_OFFICE_PHONE] [nvarchar](max) NULL,
	[ATTORNEY_CELL_PHONE] [nvarchar](max) NULL,
	[ATTORNEY_FAX] [nvarchar](max) NULL,
	[ATTORNEY_BAR_NUMBER] [nvarchar](max) NULL,
	[ATTORNEY_EMAIL] [nvarchar](max) NULL,
	[ATTORNEY_REPRESENTATION_FLAG] [nvarchar](max) NULL,
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Case_Attorney_Old]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Case_Attorney_Old](
	[CaseNo] [nvarchar](max) NULL,
	[Case_Num] [nvarchar](max) NULL,
	[Attorney] [nvarchar](max) NULL,
	[AttorneyFor] [nvarchar](max) NULL,
	[Bar#] [nvarchar](max) NULL,
	[Firm Name] [nvarchar](max) NULL,
	[Address 1] [nvarchar](max) NULL,
	[Address 2] [nvarchar](max) NULL,
	[City] [nvarchar](max) NULL,
	[State ] [nvarchar](max) NULL,
	[Zip] [nvarchar](max) NULL,
	[Phone] [nvarchar](max) NULL,
	[Cell_Phone] [nvarchar](max) NULL,
	[Fax] [nvarchar](max) NULL,
	[Email] [nvarchar](max) NULL,
	[Attorney_Middle_Name_or_Iniital] [nvarchar](max) NULL,
	[Attorney_Last_Name] [nvarchar](max) NULL,
	[Attorney_Suffix] [nvarchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Case_Data]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Case_Data](
	[CASE_NUM] [nvarchar](max) NULL,
	[CASE_STATUS] [nvarchar](max) NULL,
	[CASE_STATUS_DATE] [nvarchar](max) NULL,
	[DATE_OF_ACCIDENT_OR_ILLLNESS] [nvarchar](max) NULL,
	[ACCIDENT_TYPE] [nvarchar](max) NULL,
	[ACCIDENT_SUB_TYPE] [nvarchar](max) NULL,
	[JUDGE_1_LAST_NAME_ASSIGNED_TO_CASE] [nvarchar](max) NULL,
	[JUDGE_ASSIGNED_TO_CASE_INITIALS] [nvarchar](max) NULL,
	[MEDIATOR_ASSIGNED_TO_CASE] [nvarchar](max) NULL,
	[COURT_DISTRICT_VENUE] [nvarchar](max) NULL,
	[VENUE_STATE] [nvarchar](max) NULL,
	[ACCIDENT_LOCATION_NAME] [nvarchar](max) NULL,
	[ACCIDENT_INJURED_PERSON_OTHER_LOCATION_WHERE_INJURY_OCCURRED] [nvarchar](max) NULL,
	[PLAINTIFF_RATED_AGE] [nvarchar](max) NULL,
	[ACCIDENT_STREET_ADDRESS] [nvarchar](max) NULL,
	[ACCIDENT_CITY] [nvarchar](max) NULL,
	[ACCIDENT_STATE] [nvarchar](max) NULL,
	[ACCIDENT_ZIP] [nvarchar](max) NULL,
	[ACCIDENT_COUNTY] [nvarchar](max) NULL,
	[SPECIFIC_WORK] [nvarchar](max) NULL,
	[DETAILED_DESCRIPTION-OF_ACCIDENT] [nvarchar](max) NULL,
	[NATURE_OF_ACCIDENT] [nvarchar](max) NULL,
	[CHARACTER_OF_DISABILITY] [nvarchar](max) NULL,
	[PRE_EXISTING_CONDITION_FLAG] [nvarchar](max) NULL,
	[PRE_EXISTING_CONDITION_DESCRIPTION] [nvarchar](max) NULL,
	[LITIGATION_STATUS] [nvarchar](max) NULL,
	[LITIGATION_SUB_STATUS] [nvarchar](max) NULL,
	[COURT_CASE_NUMBER] [nvarchar](max) NULL,
	[CASE_NAME] [nvarchar](max) NULL,
	[ASSIGNED_DATE] [nvarchar](max) NULL,
	[GOVERNMENT_RECORD_STATUS] [nvarchar](max) NULL,
	[CONFIDENTIAL_FLAG] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CASE_STATUS_RESULT] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Case_Data_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Case_Data_HIS](
	[CASE_NUM] [nvarchar](max) NULL,
	[CASE_STATUS] [nvarchar](max) NULL,
	[CASE_STATUS_DATE] [nvarchar](max) NULL,
	[DATE_OF_ACCIDENT_OR_ILLLNESS] [nvarchar](max) NULL,
	[ACCIDENT_TYPE] [nvarchar](max) NULL,
	[ACCIDENT_SUB_TYPE] [nvarchar](max) NULL,
	[JUDGE_1_LAST_NAME_ASSIGNED_TO_CASE] [nvarchar](max) NULL,
	[JUDGE_ASSIGNED_TO_CASE_INITIALS] [nvarchar](max) NULL,
	[MEDIATOR_ASSIGNED_TO_CASE] [nvarchar](max) NULL,
	[COURT_DISTRICT_VENUE] [nvarchar](max) NULL,
	[VENUE_STATE] [nvarchar](max) NULL,
	[ACCIDENT_LOCATION_NAME] [nvarchar](max) NULL,
	[ACCIDENT_INJURED_PERSON_OTHER_LOCATION_WHERE_INJURY_OCCURRED] [nvarchar](max) NULL,
	[PLAINTIFF_RATED_AGE] [nvarchar](max) NULL,
	[ACCIDENT_STREET_ADDRESS] [nvarchar](max) NULL,
	[ACCIDENT_CITY] [nvarchar](max) NULL,
	[ACCIDENT_STATE] [nvarchar](max) NULL,
	[ACCIDENT_ZIP] [nvarchar](max) NULL,
	[ACCIDENT_COUNTY] [nvarchar](max) NULL,
	[SPECIFIC_WORK] [nvarchar](max) NULL,
	[DETAILED_DESCRIPTION-OF_ACCIDENT] [nvarchar](max) NULL,
	[NATURE_OF_ACCIDENT] [nvarchar](max) NULL,
	[CHARACTER_OF_DISABILITY] [nvarchar](max) NULL,
	[PRE_EXISTING_CONDITION_FLAG] [nvarchar](max) NULL,
	[PRE_EXISTING_CONDITION_DESCRIPTION] [nvarchar](max) NULL,
	[LITIGATION_STATUS] [nvarchar](max) NULL,
	[LITIGATION_SUB_STATUS] [nvarchar](max) NULL,
	[COURT_CASE_NUMBER] [nvarchar](max) NULL,
	[CASE_NAME] [nvarchar](max) NULL,
	[ASSIGNED_DATE] [nvarchar](max) NULL,
	[GOVERNMENT_RECORD_STATUS] [nvarchar](max) NULL,
	[CONFIDENTIAL_FLAG] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CASE_STATUS_RESULT] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Defendant]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Defendant](
	[CASE_NUM] [nvarchar](max) NULL,
	[DEFENDANT_NAME] [nvarchar](max) NULL,
	[DEFENDANT_PARENT] [nvarchar](max) NULL,
	[DEFENDANT_INSURED_STATUS] [nvarchar](max) NULL,
	[DEFENDANT_STREET_OR_P.O._BOX_ADDRESS1] [nvarchar](max) NULL,
	[DEFENDANT_STREET_OR_P.O._BOX_ADDRESS2] [nvarchar](max) NULL,
	[DEFENDANT_CITY] [nvarchar](max) NULL,
	[DEFENDANT_STATE] [nvarchar](max) NULL,
	[DEFENDANT_ZIP] [nvarchar](max) NULL,
	[DEFENDANT_PHONE] [nvarchar](max) NULL,
	[DEFENDAT_SELF_INSURED_LICENSED_NUMBER] [nvarchar](max) NULL,
	[DEFENDANT_SELF_INSURED_NAME] [nvarchar](max) NULL,
	[DEFENDANT_FEIN] [nvarchar](max) NULL,
	[DATE_INJURY_OR_ILLNESS_REPORTED_TO_EMPLOYER] [nvarchar](max) NULL,
	[DEFENDANT_CLAIM_NUMBER] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[SEQNo] [int] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Defendant_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Defendant_HIS](
	[CASE_NUM] [nvarchar](max) NULL,
	[DEFENDANT_NAME] [nvarchar](max) NULL,
	[DEFENDANT_PARENT] [nvarchar](max) NULL,
	[DEFENDANT_INSURED_STATUS] [nvarchar](max) NULL,
	[DEFENDANT_STREET_OR_P.O._BOX_ADDRESS1] [nvarchar](max) NULL,
	[DEFENDANT_STREET_OR_P.O._BOX_ADDRESS2] [nvarchar](max) NULL,
	[DEFENDANT_CITY] [nvarchar](max) NULL,
	[DEFENDANT_STATE] [nvarchar](max) NULL,
	[DEFENDANT_ZIP] [nvarchar](max) NULL,
	[DEFENDANT_PHONE] [nvarchar](max) NULL,
	[DEFENDAT_SELF_INSURED_LICENSED_NUMBER] [nvarchar](max) NULL,
	[DEFENDANT_SELF_INSURED_NAME] [nvarchar](max) NULL,
	[DEFENDANT_FEIN] [nvarchar](max) NULL,
	[DATE_INJURY_OR_ILLNESS_REPORTED_TO_EMPLOYER] [nvarchar](max) NULL,
	[DEFENDANT_CLAIM_NUMBER] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Determination]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Determination](
	[COURT_CASE_NUMBER] [nvarchar](max) NULL,
	[DETERMINATION_TYPE] [nvarchar](max) NULL,
	[DETERMINATION_TYPE_DETAILS] [nvarchar](max) NULL,
	[DETERMINATION_AMOUNT] [nvarchar](max) NULL,
	[DETERMINATION_PAYOR_NAME] [nvarchar](max) NULL,
	[DETERMINATION_PAYOR_AMOUNT] [nvarchar](max) NULL,
	[DETERMINATION_DATE] [nvarchar](max) NULL,
	[CONFIDENTIAL_FLAG] [nvarchar](max) NULL,
	[COURT_DECISION] [nvarchar](max) NULL,
	[OTHER DECISION_INFORMATION] [nvarchar](max) NULL,
	[ASSOCIATED_FILES] [nvarchar](max) NULL,
	[DETERMINATION_AWARD_COSTS] [nvarchar](max) NULL,
	[DETERMINATION_ATTORNEY_FEES_AWARD] [nvarchar](max) NULL,
	[BENEFITS_SECURED_AMOUNT] [nvarchar](max) NULL,
	[TOTAL_DETERMINATION_AWARD] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[DETERMINATION_AWARD_FEE_DATE] [datetime] NULL,
	[DETERMINATION_UNQ_NO] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Determination_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Determination_HIS](
	[COURT_CASE_NUMBER] [nvarchar](max) NULL,
	[DETERMINATION_TYPE] [nvarchar](max) NULL,
	[DETERMINATION_TYPE_DETAILS] [nvarchar](max) NULL,
	[DETERMINATION_AMOUNT] [nvarchar](max) NULL,
	[DETERMINATION_PAYOR_NAME] [nvarchar](max) NULL,
	[DETERMINATION_PAYOR_AMOUNT] [nvarchar](max) NULL,
	[DETERMINATION_DATE] [nvarchar](max) NULL,
	[CONFIDENTIAL_FLAG] [nvarchar](max) NULL,
	[COURT_DECISION] [nvarchar](max) NULL,
	[OTHER DECISION_INFORMATION] [nvarchar](max) NULL,
	[ASSOCIATED_FILES] [nvarchar](max) NULL,
	[DETERMINATION_AWARD_COSTS] [nvarchar](max) NULL,
	[DETERMINATION_ATTORNEY_FEES_AWARD] [nvarchar](max) NULL,
	[BENEFITS_SECURED_AMOUNT] [nvarchar](max) NULL,
	[TOTAL_DETERMINATION_AWARD] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[FC_Financial]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[FC_Financial](
	[Case_Num] [nvarchar](max) NULL,
	[Determination_Type] [nvarchar](max) NULL,
	[Case_Status] [nvarchar](max) NULL,
	[Determination_Attorney_Fees_Award] [nvarchar](max) NULL,
	[Benefits_Secured_Amount] [nvarchar](max) NULL,
	[Determination_Amount] [nvarchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Future_Damages]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Future_Damages](
	[CASE_NUM] [nvarchar](max) NULL,
	[FUTURE_LIEN_AMOUNT] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_MO] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_IND] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_DISABILITY] [nvarchar](max) NULL,
	[FUTURE_DISABILITY_TYPE] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Future_Damages_HIS]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Future_Damages_HIS](
	[CASE_NUM] [nvarchar](max) NULL,
	[FUTURE_LIEN_AMOUNT] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_MO] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_IND] [nvarchar](max) NULL,
	[FUTURE_BENEFITS_DISABILITY] [nvarchar](max) NULL,
	[FUTURE_DISABILITY_TYPE] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Job_Classification]    Script Date: 12-05-2023 22:47:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Job_Classification](
	[Job Zone] [varchar](max) NULL,
	[DOL_JobClassificationCode] [varchar](max) NULL,
	[DOL_Plaintiff_Occupation] [varchar](max) NULL,
	[Data-level] [varchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Judges]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Judges](
	[OJCC_DISTRICT] [nvarchar](max) NULL,
	[JUDGE_LAST_NAME] [nvarchar](max) NULL,
	[JUDGE_FIRST_NAME] [nvarchar](max) NULL,
	[JUDGE_MI] [nvarchar](max) NULL,
	[INITIALS] [nvarchar](max) NULL,
	[TERM_EXPIRATION] [nvarchar](max) NULL,
	[JUDGE_UNIQUE_ID] [nvarchar](max) NULL,
	[JUDGE_STATE] [nvarchar](max) NULL,
	[JUDGE_CITY] [nvarchar](max) NULL,
	[JUDGE_ZIP4] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Negotiations]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Negotiations](
	[DEMAND_LETTER_DATE] [nvarchar](max) NULL,
	[DEMAND_LETTER_DAMAGES] [nvarchar](max) NULL,
	[DEMAND_LETTER_AMOUNT] [nvarchar](max) NULL,
	[COUNTER_OFFER_DATE] [nvarchar](max) NULL,
	[COUNTER_AMOUNT] [nvarchar](max) NULL,
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Negotiations_HIS]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Negotiations_HIS](
	[DEMAND_LETTER_DATE] [nvarchar](max) NULL,
	[DEMAND_LETTER_DAMAGES] [nvarchar](max) NULL,
	[DEMAND_LETTER_AMOUNT] [nvarchar](max) NULL,
	[COUNTER_OFFER_DATE] [nvarchar](max) NULL,
	[COUNTER_AMOUNT] [nvarchar](max) NULL,
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[OJCC_Offices]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[OJCC_Offices](
	[OJCC_DISTRICT] [nvarchar](max) NULL,
	[STREET_ADDRESS] [nvarchar](max) NULL,
	[CITY] [nvarchar](max) NULL,
	[STATE] [nvarchar](max) NULL,
	[ZIP] [nvarchar](max) NULL,
	[DISTRICT_COUNTIES] [nvarchar](max) NULL,
	[TELEPHONE] [nvarchar](max) NULL,
	[FAX] [nvarchar](max) NULL,
	[IsValidRecord] [bit] NOT NULL,
	[CreatedDate] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Past_Damages]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Past_Damages](
	[CASE_NUM] [nvarchar](max) NULL,
	[PAST_MEDICAL_BENEFITS] [nvarchar](max) NULL,
	[PAST_INDEMNITY_BENEFITS] [nvarchar](max) NULL,
	[LIGHT_DUTY] [nvarchar](max) NULL,
	[RETURN_TO_WORK] [nvarchar](max) NULL,
	[PAST_PRE_DETERMINATION_NUMBER_OF_HOURS_BILLED] [nvarchar](max) NULL,
	[PAST_PRE_DETERMINATION_ATTORNEYS_FEES] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ID_PASTDAMAGE] [bigint] IDENTITY(1,1) NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Past_Damages_HIS]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Past_Damages_HIS](
	[CASE_NUM] [nvarchar](max) NULL,
	[PAST_MEDICAL_BENEFITS] [nvarchar](max) NULL,
	[PAST_INDEMNITY_BENEFITS] [nvarchar](max) NULL,
	[LIGHT_DUTY] [nvarchar](max) NULL,
	[RETURN_TO_WORK] [nvarchar](max) NULL,
	[PAST_PRE_DETERMINATION_NUMBER_OF_HOURS_BILLED] [nvarchar](max) NULL,
	[PAST_PRE_DETERMINATION_ATTORNEYS_FEES] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ID_PASTDAMAGE] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[Plaintiff_HIS]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[Plaintiff_HIS](
	[COURT_CASE_NUM] [nvarchar](max) NULL,
	[PLAINTIFF1_FULL_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_FIRST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_MI] [nvarchar](max) NULL,
	[PLAINTIFF1_LAST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF1_SUFFIX] [nvarchar](max) NULL,
	[PLAINTIFF1_ADDRESS1] [nvarchar](max) NULL,
	[PLAINTIFF1_ADDRESS2] [nvarchar](max) NULL,
	[PLAINTIFF1_CITY] [nvarchar](max) NULL,
	[PLAINTIFF1_STATE] [nvarchar](max) NULL,
	[PLAINTIFF1_ZIP4] [nvarchar](max) NULL,
	[PLAINTIFF1_PHONE] [nvarchar](max) NULL,
	[PLAINTIFF1_BIRTHDATE] [nvarchar](max) NULL,
	[PLAINTIFF1_AGE_RANGE_AT_TIME_OF_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF1_DISABLED] [nvarchar](max) NULL,
	[PLAINTIFF1_GENDER] [nvarchar](max) NULL,
	[PLAINTIFF1_FIRST_PARTY_HEALTHCARE_COVERAGE] [nvarchar](max) NULL,
	[PLAINTIFF1_OCCUPATION] [nvarchar](max) NULL,
	[PLAINTIFF1_MEDICAL_BENEFITS_ONLY] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_13_WEEKS_PRECEDING_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENTLY_WITH_SAME_EMPLOYER] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_WORK_LEVEL] [nvarchar](max) NULL,
	[PLAINTIFF1_HAS_MMI_BEEN_REACHED] [nvarchar](max) NULL,
	[PLAINTIFF1_HAS_MMI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF1_DOL_JOB_CLASSIFICATION_CODE] [nvarchar](max) NULL,
	[PLAINTIFF1_DOL_JOB_CLASSIFICATION_DESCRIPTION] [nvarchar](max) NULL,
	[PLAINTIFF1_DETAIL_DESCRIPTION_OF_JOB] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_APPLIED] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_ACCEPTED] [nvarchar](max) NULL,
	[PLAINTIFF1_SSDI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_PRECEDING_13WEEKS_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF1_AWW_PRECEDING_13WEEKS_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF1_CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF2_FULL_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_FIRST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_MI] [nvarchar](max) NULL,
	[PLAINTIFF2_LAST_NAME] [nvarchar](max) NULL,
	[PLAINTIFF2_SUFFIX] [nvarchar](max) NULL,
	[PLAINTIFF2_ADDRESS1] [nvarchar](max) NULL,
	[PLAINTIFF2_ADDRESS2] [nvarchar](max) NULL,
	[PLAINTIFF2_CITY] [nvarchar](max) NULL,
	[PLAINTIFF2_STATE] [nvarchar](max) NULL,
	[PLAINTIFF2_ZIP4] [nvarchar](max) NULL,
	[PLAINTIFF2_PHONE] [nvarchar](max) NULL,
	[PLAINTIFF2_BIRTHDATE] [nvarchar](max) NULL,
	[PLAINTIFF2_AGE_RANGE_AT_TIME_OF_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF2_DISABLED] [nvarchar](max) NULL,
	[PLAINTIFF2_GENDER] [nvarchar](max) NULL,
	[PLAINTIFF2_FIRST_PARTY_HEALTHCARE_COVERAGE] [nvarchar](max) NULL,
	[PLAINTIFF2_OCCUPATION] [nvarchar](max) NULL,
	[PLAINTIFF2_MEDICAL_BENEFITS_ONLY] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_13_WEEKS_PRECEDING_ACCIDENT] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENTLY_WITH_SAME_EMPLOYER] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_WORK_LEVEL] [nvarchar](max) NULL,
	[PLAINTIFF2_HAS_MMI_BEEN_REACHED] [nvarchar](max) NULL,
	[PLAINTIFF2_HAS_MMI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF2_DOL_JOB_CLASSIFICATION_CODE] [nvarchar](max) NULL,
	[PLAINTIFF2_DOL_JOB_CLASSIFICATION_DESCRIPTION] [nvarchar](max) NULL,
	[PLAINTIFF2_DETAIL_DESCRIPTION_OF_JOB] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_APPLIED] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_ACCEPTED] [nvarchar](max) NULL,
	[PLAINTIFF2_SSDI_DATE] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_PRECEDING_13WEEKS_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF2_AWW_PRECEDING_13WEEKS_DETAIL] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[PLAINTIFF2_CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[ASSOCIATEDFILES] [nvarchar](max) NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL,
	[CURRENT_AWW_HOURLY] [nvarchar](max) NULL,
	[CURRENT_AWW_DETAIL] [nvarchar](max) NULL,
	[AWW_13WEEKS_PRECEDING_ACCIDENT_HOURLY] [nvarchar](max) NULL,
	[AWW_PRECEDING_13_WEEKS_DETAIL] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[TPA]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[TPA](
	[CASE_NUM] [nvarchar](max) NULL,
	[TPA_1_NAME] [nvarchar](max) NULL,
	[TPA_1_PO_BOX_OR_STREET_ADDRESS] [nvarchar](max) NULL,
	[TPA_1_CITY] [nvarchar](max) NULL,
	[TPA_1_STATE] [nvarchar](max) NULL,
	[TPA_1_ZIP] [nvarchar](max) NULL,
	[TPA_1_PHONE] [nvarchar](max) NULL,
	[TPA_1_CASE_NUMBER] [nvarchar](max) NULL,
	[TPA_1_FEIN] [nvarchar](max) NULL,
	[TPA_1_STATE_ID_NUMBER] [nvarchar](max) NULL,
	[TPA_1_ADJUSTER_FIRST_NAME] [nvarchar](max) NULL,
	[TPA_1_ADJUSTER_LAST_NAME] [nvarchar](max) NULL,
	[TPA_1_ADJUSTER_EMAIL] [nvarchar](max) NULL,
	[TPA_1_ADJUSTER_PHONE] [nvarchar](max) NULL,
	[TPA_1_ADJUSTER_FAX] [nvarchar](max) NULL,
	[TPA_2_NAME] [nvarchar](max) NULL,
	[TPA_2_PO_BOX_OR_STREET_ADDRESS] [nvarchar](max) NULL,
	[TPA_2_CITY] [nvarchar](max) NULL,
	[TPA_2_STATE] [nvarchar](max) NULL,
	[TPA_2_ZIP] [nvarchar](max) NULL,
	[TPA_2_PHONE] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[TPA_TYPE] [nvarchar](max) NULL,
	[TPA_PARENT_Name] [nvarchar](max) NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [Stg].[TPA_Master]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Stg].[TPA_Master](
	[TPA_NAME] [nvarchar](max) NULL,
	[TPA_PARENT] [nvarchar](max) NULL,
	[TPA_TYPE] [nvarchar](max) NULL,
	[TPA_STATE_ID] [nvarchar](max) NULL,
	[TPA_INTERNAL_ID] [nvarchar](max) NULL,
	[TPA_ADDRESS_1] [nvarchar](max) NULL,
	[TPA_ADDRESS_2] [nvarchar](max) NULL,
	[TPA_CITY] [nvarchar](max) NULL,
	[TPA_STATE] [nvarchar](max) NULL,
	[TPA_ZIP4] [nvarchar](max) NULL,
	[TPA_PHONE] [nvarchar](max) NULL,
	[ISVALIDRECORD] [bit] NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
	[ERROR_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE [Config].[DataFlowControl] ADD  CONSTRAINT [DF_DataFlowControl_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [Config].[DataFlowControl] ADD  CONSTRAINT [DF_Category_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF_Adjuster_Adjuster_UNQID]  DEFAULT ((0)) FOR [Adjuster_UNQID]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF__Adjuster__Create__607251E5]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF__Adjuster__Create__6166761E]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF__Adjuster__Modifi__625A9A57]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF__Adjuster__Modifi__634EBE90]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF__Adjuster__IsDele__6442E2C9]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF_Adjuster_Company_SeqNo]  DEFAULT ((1)) FOR [Company_SeqNo]
GO
ALTER TABLE [dbo].[Adjuster] ADD  CONSTRAINT [DF_Adjuster_SEQ_CASE]  DEFAULT ((1)) FOR [SEQ_CASE]
GO
ALTER TABLE [dbo].[Attorney] ADD  CONSTRAINT [DF__Attorney__Create__07C12930]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Attorney] ADD  CONSTRAINT [DF__Attorney__Create__08B54D69]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Attorney] ADD  CONSTRAINT [DF__Attorney__Modifi__09A971A2]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Attorney] ADD  CONSTRAINT [DF__Attorney__IsDele__0A9D95DB]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___FK_Ca__55009F39]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___FK_At__55F4C372]  DEFAULT ((0)) FOR [FK_Attorney]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___Order__56E8E7AB]  DEFAULT ((0)) FOR [OrderNo]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___Creat__57DD0BE4]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___Creat__58D1301D]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___Modif__59C55456]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF__Attorney___IsDel__5AB9788F]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Attorney_Case] ADD  CONSTRAINT [DF_Attorney_Case_AttorneyBadgeType]  DEFAULT ((0)) FOR [BadgeType]
GO
ALTER TABLE [dbo].[AttorneyBadgeType] ADD  CONSTRAINT [DF__Attorney___FK_Ba__76177A41]  DEFAULT ((0)) FOR [FK_BadgeType]
GO
ALTER TABLE [dbo].[AttorneyBadgeType] ADD  CONSTRAINT [DF__Attorney_BadgeType__Create__07C12930]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[AttorneyBadgeType] ADD  CONSTRAINT [DF__Attorney_BadgeType__Create__08B54D69]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[AttorneyBadgeType] ADD  CONSTRAINT [DF__Attorney_BadgeType__Modifi__09A971A2]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[AttorneyBadgeType] ADD  CONSTRAINT [DF__Attorney_BadgeType__IsDele__0A9D95DB]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[AttorneyFirm] ADD  DEFAULT ((0)) FOR [FK_Attorney]
GO
ALTER TABLE [dbo].[AttorneyFirm] ADD  CONSTRAINT [DF__Attorney_Firm__Create__07C12930]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[AttorneyFirm] ADD  CONSTRAINT [DF__Attorney_Firm__Create__08B54D69]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[AttorneyFirm] ADD  CONSTRAINT [DF__Attorney_Firm__Modifi__09A971A2]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[AttorneyFirm] ADD  CONSTRAINT [DF__Attorney_Firm__IsDele__0A9D95DB]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[AWW_Case] ADD  CONSTRAINT [DF_AWW_Case_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[AWW_Case] ADD  CONSTRAINT [DF_AWW_Case_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[AWW_Case] ADD  CONSTRAINT [DF_AWW_Case_SEQ_NO]  DEFAULT ((0)) FOR [SEQ_TNO]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [FK_Carrier]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [FK_Adjuster]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [OrderNo]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Carrier_Case] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Carrier_Master] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Carrier_Master] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Carrier_Master] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Carrier_Master] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Carrier_Master] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Carrier_Old] ADD  CONSTRAINT [DF__Carrier__Created__160F4887]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Carrier_Old] ADD  CONSTRAINT [DF__Carrier__Created__17036CC0]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Carrier_Old] ADD  CONSTRAINT [DF__Carrier__Modifie__17F790F9]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Carrier_Old] ADD  CONSTRAINT [DF__Carrier__IsDelet__18EBB532]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF__Cases__Pre_Exist__70DDC3D8]  DEFAULT ((0)) FOR [Pre_Existing_Condition_Flag]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF__Cases__CreatedOn__71D1E811]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF__Cases__CreatedBy__72C60C4A]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF__Cases__ModifiedB__73BA3083]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF__Cases__IsDeleted__74AE54BC]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [DF_Cases_Source]  DEFAULT ('F') FOR [Source]
GO
ALTER TABLE [dbo].[DataLoadStatus] ADD  CONSTRAINT [DF_DataLoadStatus_StatusDate]  DEFAULT (getdate()) FOR [StatusDate]
GO
ALTER TABLE [dbo].[DataLoadStatus] ADD  CONSTRAINT [DF_DataLoadStatus_TotalRecord]  DEFAULT ((0)) FOR [TotalRecord]
GO
ALTER TABLE [dbo].[DataLoadStatus] ADD  CONSTRAINT [DF_DataLoadStatus_ProcessedRecords]  DEFAULT ((0)) FOR [ProcessedRecords]
GO
ALTER TABLE [dbo].[Defendant] ADD  CONSTRAINT [DF__Defendant__Creat__793DFFAF]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Defendant] ADD  CONSTRAINT [DF__Defendant__IsDel__7C1A6C5A]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF__Defendant__FK_De__68487DD7]  DEFAULT ((0)) FOR [FK_Defendent]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF_Defendant_Case_FK_Case]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF__Defendant__Creat__6A30C649]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF__Defendant__Modif__6C190EBB]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF__Defendant__IsDel__6E01572D]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Defendant_Case] ADD  CONSTRAINT [DF_Defendant_Case_SEQNo]  DEFAULT ((1)) FOR [SEQNo]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__FK_Ca__7F2BE32F]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__FK_De__00200768]  DEFAULT ((0)) FOR [FK_DeterminationType]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__IsCon__01142BA1]  DEFAULT ((0)) FOR [IsConfidential]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__Creat__02084FDA]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__Creat__02FC7413]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__Modif__03F0984C]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF__Determina__IsDel__04E4BC85]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF_Determination_Case_SEQNo]  DEFAULT ((1)) FOR [SEQNo]
GO
ALTER TABLE [dbo].[Determination_Case] ADD  CONSTRAINT [DF_Determination_Case_DETERMINATION_UNQ_NO]  DEFAULT ((0)) FOR [DETERMINATION_UNQ_NO]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[FutureDamages_Case] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__ICD_Cod__11158940]  DEFAULT ('') FOR [ICD_Code]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__Created__1209AD79]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__Created__12FDD1B2]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__Modifie__13F1F5EB]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__Modifie__14E61A24]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[ICDCode_Master] ADD  CONSTRAINT [DF__ICDCode__IsDelet__15DA3E5D]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_FK_Case]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_OrderNoBodyPart]  DEFAULT ((0)) FOR [OrderNoBodyPart]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_OrderNoInjury]  DEFAULT ((0)) FOR [OrderNoInjury]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injury_OrderNoColumn]  DEFAULT ((0)) FOR [OrderNoColumn]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_CreatedBy]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_ModifiedBy]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injuries_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Injury] ADD  CONSTRAINT [DF_Injury_SEQNo]  DEFAULT ((1)) FOR [SEQNo]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__FirstName__16CE6296]  DEFAULT ('') FOR [FirstName]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__MiddleNam__17C286CF]  DEFAULT ('') FOR [MiddleName]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__LastName__18B6AB08]  DEFAULT ('') FOR [LastName]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__Initials__19AACF41]  DEFAULT ('') FOR [Initials]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__FK_State__1A9EF37A]  DEFAULT ((0)) FOR [FK_State]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__CreatedOn__1B9317B3]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__CreatedBy__1C873BEC]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__ModifiedO__1D7B6025]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__ModifiedB__1E6F845E]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[Judge] ADD  CONSTRAINT [DF__Judge__IsDeleted__1F63A897]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[OJCCOffices] ADD  CONSTRAINT [DF__OJCCOffic__Creat__671F4F74]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[OJCCOffices] ADD  CONSTRAINT [DF__OJCCOffic__Creat__681373AD]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[OJCCOffices] ADD  CONSTRAINT [DF__OJCCOffic__Modif__690797E6]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[OJCCOffices] ADD  CONSTRAINT [DF__OJCCOffic__Modif__69FBBC1F]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[OJCCOffices] ADD  CONSTRAINT [DF__OJCCOffic__IsDel__6AEFE058]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__FK_Ca__49C3F6B7]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__FK_Pl__4AB81AF0]  DEFAULT ((0)) FOR [FK_Plaintiff]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsMMI__4E88ABD4]  DEFAULT ((0)) FOR [MMIReached]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF_Plaintiff_Case_HasMMIDate]  DEFAULT ((0)) FOR [HasMMIDate]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsCla__4D94879B]  DEFAULT ((0)) FOR [IsClaimantWithSameEmpoyer]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsMed__4CA06362]  DEFAULT ((0)) FOR [IsMedicalBenefit]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsSSD__4F7CD00D]  DEFAULT ((0)) FOR [IsSSDIApplied]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsSSD__5070F446]  DEFAULT ((0)) FOR [IsSSDIAccepted]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__Creat__5165187F]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__Modif__534D60F1]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF__Plaintiff__IsDel__5535A963]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Plaintiff_Case] ADD  CONSTRAINT [DF_Plaintiff_Case_SEQNo]  DEFAULT ((1)) FOR [SEQNo]
GO
ALTER TABLE [dbo].[Plaintiff_Hist] ADD  CONSTRAINT [DF__Plaintiff__IsDis__32767D0B]  DEFAULT ((0)) FOR [IsDisabled]
GO
ALTER TABLE [dbo].[Plaintiff_Hist] ADD  CONSTRAINT [DF__Plaintiff__Creat__336AA144]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Plaintiff_Hist] ADD  CONSTRAINT [DF__Plaintiff__Modif__3552E9B6]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[Plaintiff_Hist] ADD  CONSTRAINT [DF__Plaintiff__IsDel__373B3228]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__FK_Ca__5812160E]  DEFAULT ((0)) FOR [FK_Case]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__FK_Pl__59063A47]  DEFAULT ((0)) FOR [FK_Plaintiff]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__FK_Pl__59FA5E80]  DEFAULT ((0)) FOR [FK_PlaintiffHCCoverage]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__Party__5AEE82B9]  DEFAULT ((0)) FOR [PartyNo]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__Creat__5BE2A6F2]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__Creat__5CD6CB2B]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__Modif__5DCAEF64]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__Modif__5EBF139D]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] ADD  CONSTRAINT [DF__Plaintiff__IsDel__5FB337D6]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefAccident_Type_LoB] ADD  CONSTRAINT [DF_RefAccident_Type_LoB_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefAccident_Type_LoB] ADD  CONSTRAINT [DF_RefAccident_Type_LoB_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT ('') FOR [AccidentNature]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefAccidentNature] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__Accid__52E34C9D]  DEFAULT ('') FOR [AccidentSubType]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__Creat__53D770D6]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__Creat__54CB950F]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__Modif__55BFB948]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__Modif__56B3DD81]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefAccidentSubType] ADD  CONSTRAINT [DF__RefAccide__IsDel__57A801BA]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT ('') FOR [CompanyType]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefAdjusterCompanyType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__AgeRa__589C25F3]  DEFAULT ('') FOR [AgeRange]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF_RefAgeRange_MinAge]  DEFAULT ((0)) FOR [MinAge]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF_RefAgeRange_MaxAge]  DEFAULT ((0)) FOR [MaxAge]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__Creat__59904A2C]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__Creat__5A846E65]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__Modif__5B78929E]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__Modif__5C6CB6D7]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefAgeRange] ADD  CONSTRAINT [DF__RefAgeRan__IsDel__5D60DB10]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefBadgeType] ADD  CONSTRAINT [DF_RefBadgeType_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefBadgeType] ADD  CONSTRAINT [DF_RefBadgeType_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefBadgeType] ADD  CONSTRAINT [DF_RefBadgeType_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__BodyP__640DD89F]  DEFAULT ('') FOR [BodyPart]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__Creat__6501FCD8]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__Creat__65F62111]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__Modif__66EA454A]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__Modif__67DE6983]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefBodyPart] ADD  CONSTRAINT [DF__RefBodyPa__IsDel__68D28DBC]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT ('') FOR [BodyPartLocation]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefBodyPartLocation] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__CaseS__725BF7F6]  DEFAULT ('') FOR [CaseStatus]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__Creat__73501C2F]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__Creat__753864A1]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__Modif__762C88DA]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__Modif__7720AD13]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefCaseStatus] ADD  CONSTRAINT [DF__RefCaseSt__IsDel__7908F585]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT ('') FOR [CourtDispositonType]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefCourtDispositonType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT ('') FOR [CoverageTypeName]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefCoverageType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefDataSource] ADD  CONSTRAINT [DF_RefDataSource_DataSource]  DEFAULT ('') FOR [DataSource]
GO
ALTER TABLE [dbo].[RefDataSource] ADD  CONSTRAINT [DF_RefDataSource_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefDataSource] ADD  CONSTRAINT [DF_RefDataSource_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefDemandLetterDamages] ADD  DEFAULT ('') FOR [DemandLetterDamages]
GO
ALTER TABLE [dbo].[RefDemandLetterDamages] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefDemandLetterDamages] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT ('') FOR [DeterminationType]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefDeterminationType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__Disab__1F2E9E6D]  DEFAULT ('') FOR [DisabilityCodes]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__Creat__2022C2A6]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__Creat__2116E6DF]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__Modif__220B0B18]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__Modif__22FF2F51]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefDisabilityCodes] ADD  CONSTRAINT [DF__RefDisabi__IsDel__23F3538A]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__Disab__24E777C3]  DEFAULT ('') FOR [DisabilityType]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF_RefDisabilityType_Mode]  DEFAULT ('A') FOR [Mode]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__Creat__25DB9BFC]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__Creat__26CFC035]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__Modif__27C3E46E]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__Modif__28B808A7]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefDisabilityType] ADD  CONSTRAINT [DF__RefDisabi__IsDel__29AC2CE0]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT ('') FOR [EntityType]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefEntityType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_GenderName]  DEFAULT ('') FOR [GenderName]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_CreatedBy]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_ModifiedBy]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefGender] ADD  CONSTRAINT [DF_RefGender_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT ('') FOR [InsuredStatus]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefInsuredStatus] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT ('') FOR [InsuredType]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefInsuredType] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__JobCl__4183B671]  DEFAULT ('') FOR [JobClassCode]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__Creat__4277DAAA]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__Creat__436BFEE3]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__Modif__4460231C]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__Modif__45544755]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefJobClassificationCode] ADD  CONSTRAINT [DF__RefJobCla__IsDel__46486B8E]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT ('') FOR [LitigationSubStatus]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefLitigationSubStatus] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT ('') FOR [Occupation]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefPlaintiff_Occupation] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT ('') FOR [PlaintiffHCCoverage]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[RefPlaintiffHCCoverage] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RefTPAType] ADD  CONSTRAINT [DF_RefTPA_Type_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[RefTPAType] ADD  CONSTRAINT [DF_RefTPA_Type_ModifiedOn]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__StateName__2AD55B43]  DEFAULT ('') FOR [StateName]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__CreatedOn__2BC97F7C]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__CreatedBy__2CBDA3B5]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__ModifiedO__2DB1C7EE]  DEFAULT (getdate()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__ModifiedB__2EA5EC27]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[State] ADD  CONSTRAINT [DF__State__IsDeleted__2F9A1060]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[sysLogError] ADD  CONSTRAINT [DF_appErrorLogSQL_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[sysLogError] ADD  CONSTRAINT [DF_appErrorLogSQL_CreatedUser]  DEFAULT (suser_sname()) FOR [CreatedUser]
GO
ALTER TABLE [dbo].[sysLogImport] ADD  CONSTRAINT [DF_sysLogImport_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [dbo].[sysLogImport] ADD  CONSTRAINT [DF_sysLogImport_CreatedUser]  DEFAULT (suser_sname()) FOR [CreatedUser]
GO
ALTER TABLE [dbo].[TPA] ADD  CONSTRAINT [DF__TPA__TPAType__2EDAF651]  DEFAULT ((1)) FOR [FK_CompanyType]
GO
ALTER TABLE [dbo].[TPA] ADD  CONSTRAINT [DF__TPA__CreatedOn__2FCF1A8A]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[TPA] ADD  CONSTRAINT [DF__TPA__CreatedBy__30C33EC3]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[TPA] ADD  CONSTRAINT [DF__TPA__ModifiedBy__31B762FC]  DEFAULT ((0)) FOR [ModifiedBy]
GO
ALTER TABLE [dbo].[TPA] ADD  CONSTRAINT [DF__TPA__IsDeleted__32AB8735]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [Stg].[Adjuster] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Adjuster] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Age_Range] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[Age_Range] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Attorney_List] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Attorney_List] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[AWW] ADD  CONSTRAINT [DF__AWW__IsValidReco__7187CF4E]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[AWW] ADD  CONSTRAINT [DF__AWW__CREATEDDATE__20ECC9AD]  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Body_Part] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[Body_Part] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Carrier] ADD  CONSTRAINT [DF_Carrier_ValidData1]  DEFAULT ((1)) FOR [ISVALIDRECORD1]
GO
ALTER TABLE [Stg].[Carrier] ADD  CONSTRAINT [DF_Carrier_ValidData2]  DEFAULT ((1)) FOR [ISVALIDRECORD2]
GO
ALTER TABLE [Stg].[Carrier] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Carrier_Master] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Carrier_Master] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Case_Attorney] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Case_Attorney] ADD  CONSTRAINT [DF_Case_Attorney_IsValidRecord]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Case_Attorney_Old] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[Case_Attorney_Old] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Case_Data] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Case_Data] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Defendant] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Defendant] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Defendant] ADD  CONSTRAINT [DF_Defendant_SEQNo]  DEFAULT ((1)) FOR [SEQNo]
GO
ALTER TABLE [Stg].[Determination] ADD  CONSTRAINT [DF__Determina__ISVAL__2F3AE904]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Determination] ADD  CONSTRAINT [DF__Determina__CREAT__302F0D3D]  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[FC_Financial] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[FC_Financial] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Injuries] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Injuries] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Job_Classification] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[Job_Classification] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Judges] ADD  CONSTRAINT [DF__JUDGES__ISVALIDR__764C846B]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Judges] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Negotiations] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Negotiations] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[OJCC_Offices] ADD  DEFAULT ((1)) FOR [IsValidRecord]
GO
ALTER TABLE [Stg].[OJCC_Offices] ADD  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [Stg].[Past_Damages] ADD  CONSTRAINT [DF__PAST_DAMA__ISVAL__6ADAD1BF]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[Past_Damages] ADD  CONSTRAINT [DF__Past_Dama__CREAT__1BF30A66]  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Plaintiff] ADD  CONSTRAINT [DF__Plaintiff__Creat__42B7D1CC]  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[Plaintiff] ADD  CONSTRAINT [DF_Plaintiff_IsValidRecord]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[TPA] ADD  CONSTRAINT [DF__TPA__ISVALIDRECO__20B7BF83]  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[TPA] ADD  CONSTRAINT [DF__TPA__CREATEDDATE__21ABE3BC]  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [Stg].[TPA_Master] ADD  DEFAULT ((1)) FOR [ISVALIDRECORD]
GO
ALTER TABLE [Stg].[TPA_Master] ADD  DEFAULT (getdate()) FOR [CREATEDDATE]
GO
ALTER TABLE [dbo].[Attorney]  WITH NOCHECK ADD  CONSTRAINT [FK_Attorney_State] FOREIGN KEY([FK_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[Attorney] NOCHECK CONSTRAINT [FK_Attorney_State]
GO
ALTER TABLE [dbo].[Attorney_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Attorney_Case_Attorney] FOREIGN KEY([FK_Attorney])
REFERENCES [dbo].[Attorney] ([ID_Attorney])
GO
ALTER TABLE [dbo].[Attorney_Case] NOCHECK CONSTRAINT [FK_Attorney_Case_Attorney]
GO
ALTER TABLE [dbo].[Attorney_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Attorney_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[Attorney_Case] NOCHECK CONSTRAINT [FK_Attorney_Case_Cases]
GO
ALTER TABLE [dbo].[Carrier_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Carrier_Case_Adjuster] FOREIGN KEY([FK_Adjuster])
REFERENCES [dbo].[Adjuster] ([ID_Adjuster_Case])
GO
ALTER TABLE [dbo].[Carrier_Case] NOCHECK CONSTRAINT [FK_Carrier_Case_Adjuster]
GO
ALTER TABLE [dbo].[Carrier_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Carrier_Case_Carrier] FOREIGN KEY([FK_Carrier])
REFERENCES [dbo].[Carrier_Old] ([ID_Carrier])
GO
ALTER TABLE [dbo].[Carrier_Case] NOCHECK CONSTRAINT [FK_Carrier_Case_Carrier]
GO
ALTER TABLE [dbo].[Carrier_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Carrier_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[Carrier_Case] NOCHECK CONSTRAINT [FK_Carrier_Case_Cases]
GO
ALTER TABLE [dbo].[Carrier_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Carrier_Case_RefCoverageType] FOREIGN KEY([FK_CoverageType])
REFERENCES [dbo].[RefCoverageType] ([ID_CoverageType])
GO
ALTER TABLE [dbo].[Carrier_Case] NOCHECK CONSTRAINT [FK_Carrier_Case_RefCoverageType]
GO
ALTER TABLE [dbo].[Carrier_Old]  WITH NOCHECK ADD  CONSTRAINT [FK_Carrier_State] FOREIGN KEY([FK_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[Carrier_Old] NOCHECK CONSTRAINT [FK_Carrier_State]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_Judge] FOREIGN KEY([FK_Judge])
REFERENCES [dbo].[Judge] ([ID_Judge])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_Judge]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_RefAccidentNature] FOREIGN KEY([FK_AccidentNature])
REFERENCES [dbo].[RefAccidentNature] ([ID_AccidentNature])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_RefAccidentNature]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_RefAccidentSubType] FOREIGN KEY([FK_Accident_SubType])
REFERENCES [dbo].[RefAccidentSubType] ([ID_AccidentSubType])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_RefAccidentSubType]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_RefAgeRange] FOREIGN KEY([FK_AgeRange])
REFERENCES [dbo].[RefAgeRange] ([ID_AgeRange])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_RefAgeRange]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_RefLitigationSubStatus] FOREIGN KEY([FK_Litigation_Sub_Status])
REFERENCES [dbo].[RefLitigationSubStatus] ([ID_LitigationSubStatus])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_RefLitigationSubStatus]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_State] FOREIGN KEY([FK_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_State]
GO
ALTER TABLE [dbo].[Cases]  WITH NOCHECK ADD  CONSTRAINT [FK_Cases_Venu_State] FOREIGN KEY([FK_Venue_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[Cases] NOCHECK CONSTRAINT [FK_Cases_Venu_State]
GO
ALTER TABLE [dbo].[Defendant]  WITH NOCHECK ADD  CONSTRAINT [FK_Defendant_RefInsuredStatus] FOREIGN KEY([FK_InsuredStatus])
REFERENCES [dbo].[RefInsuredStatus] ([ID_InsuredStatus])
GO
ALTER TABLE [dbo].[Defendant] NOCHECK CONSTRAINT [FK_Defendant_RefInsuredStatus]
GO
ALTER TABLE [dbo].[Defendant_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Defendant_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[Defendant_Case] NOCHECK CONSTRAINT [FK_Defendant_Case_Cases]
GO
ALTER TABLE [dbo].[Defendant_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Defendant_Case_Defendant] FOREIGN KEY([FK_Defendent])
REFERENCES [dbo].[Defendant] ([ID_Defendant])
GO
ALTER TABLE [dbo].[Defendant_Case] NOCHECK CONSTRAINT [FK_Defendant_Case_Defendant]
GO
ALTER TABLE [dbo].[Determination_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Determination_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[Determination_Case] NOCHECK CONSTRAINT [FK_Determination_Case_Cases]
GO
ALTER TABLE [dbo].[Determination_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Determination_Case_RefDeterminationType] FOREIGN KEY([FK_DeterminationType])
REFERENCES [dbo].[RefDeterminationType] ([ID_DeterminationType])
GO
ALTER TABLE [dbo].[Determination_Case] NOCHECK CONSTRAINT [FK_Determination_Case_RefDeterminationType]
GO
ALTER TABLE [dbo].[FutureDamages_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_FutureDamages_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[FutureDamages_Case] NOCHECK CONSTRAINT [FK_FutureDamages_Case_Cases]
GO
ALTER TABLE [dbo].[FutureDamages_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_FutureDamages_Case_RefDisabilityType1] FOREIGN KEY([FK_DisabilityTypeOriginal])
REFERENCES [dbo].[RefDisabilityType] ([ID_DisabilityType])
GO
ALTER TABLE [dbo].[FutureDamages_Case] NOCHECK CONSTRAINT [FK_FutureDamages_Case_RefDisabilityType1]
GO
ALTER TABLE [dbo].[FutureDamages_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_FutureDamages_Case_RefDisabilityType2] FOREIGN KEY([FK_DisabilityTypeSevere])
REFERENCES [dbo].[RefDisabilityType] ([ID_DisabilityType])
GO
ALTER TABLE [dbo].[FutureDamages_Case] NOCHECK CONSTRAINT [FK_FutureDamages_Case_RefDisabilityType2]
GO
ALTER TABLE [dbo].[Judge]  WITH NOCHECK ADD  CONSTRAINT [FK_Judge_State] FOREIGN KEY([FK_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[Judge] NOCHECK CONSTRAINT [FK_Judge_State]
GO
ALTER TABLE [dbo].[OJCCOffices]  WITH NOCHECK ADD  CONSTRAINT [FK_OJCCOffices_State] FOREIGN KEY([FK_State])
REFERENCES [dbo].[State] ([ID_State])
GO
ALTER TABLE [dbo].[OJCCOffices] NOCHECK CONSTRAINT [FK_OJCCOffices_State]
GO
ALTER TABLE [dbo].[Plaintiff_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[Plaintiff_Case] NOCHECK CONSTRAINT [FK_Plaintiff_Case_Cases]
GO
ALTER TABLE [dbo].[Plaintiff_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_Case_Plaintiff] FOREIGN KEY([FK_Plaintiff])
REFERENCES [dbo].[Plaintiff_Hist] ([ID_Plaintiff])
GO
ALTER TABLE [dbo].[Plaintiff_Case] NOCHECK CONSTRAINT [FK_Plaintiff_Case_Plaintiff]
GO
ALTER TABLE [dbo].[Plaintiff_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_Case_RefAgeRange] FOREIGN KEY([FK_AgeRange])
REFERENCES [dbo].[RefAgeRange] ([ID_AgeRange])
GO
ALTER TABLE [dbo].[Plaintiff_Case] NOCHECK CONSTRAINT [FK_Plaintiff_Case_RefAgeRange]
GO
ALTER TABLE [dbo].[Plaintiff_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_Case_RefJobClassificationCode1] FOREIGN KEY([FK_JobClassCode])
REFERENCES [dbo].[RefJobClassificationCode] ([ID_JobClassCode])
GO
ALTER TABLE [dbo].[Plaintiff_Case] NOCHECK CONSTRAINT [FK_Plaintiff_Case_RefJobClassificationCode1]
GO
ALTER TABLE [dbo].[Plaintiff_Hist]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_RefGender] FOREIGN KEY([FK_Gender])
REFERENCES [dbo].[RefGender] ([ID_Gender])
GO
ALTER TABLE [dbo].[Plaintiff_Hist] NOCHECK CONSTRAINT [FK_Plaintiff_RefGender]
GO
ALTER TABLE [dbo].[Plaintiff_Hist]  WITH NOCHECK ADD  CONSTRAINT [FK_Plaintiff_RefOccupation] FOREIGN KEY([FK_Occupation])
REFERENCES [dbo].[RefPlaintiff_Occupation] ([ID_Occupation])
GO
ALTER TABLE [dbo].[Plaintiff_Hist] NOCHECK CONSTRAINT [FK_Plaintiff_RefOccupation]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage]  WITH NOCHECK ADD  CONSTRAINT [FK_PlaintiffPartyHCCoverage_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] NOCHECK CONSTRAINT [FK_PlaintiffPartyHCCoverage_Cases]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage]  WITH NOCHECK ADD  CONSTRAINT [FK_PlaintiffPartyHCCoverage_Plaintiff] FOREIGN KEY([FK_Plaintiff])
REFERENCES [dbo].[Plaintiff_Hist] ([ID_Plaintiff])
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] NOCHECK CONSTRAINT [FK_PlaintiffPartyHCCoverage_Plaintiff]
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage]  WITH NOCHECK ADD  CONSTRAINT [FK_PlaintiffPartyHCCoverage_RefPlaintiffHCCoverage] FOREIGN KEY([FK_PlaintiffHCCoverage])
REFERENCES [dbo].[RefPlaintiffHCCoverage] ([ID_PlaintiffHCCoverage])
GO
ALTER TABLE [dbo].[PlaintiffPartyHCCoverage] NOCHECK CONSTRAINT [FK_PlaintiffPartyHCCoverage_RefPlaintiffHCCoverage]
GO
ALTER TABLE [dbo].[TPA]  WITH NOCHECK ADD  CONSTRAINT [FK_TPA_RefCompanyType] FOREIGN KEY([FK_CompanyType])
REFERENCES [dbo].[RefAdjusterCompanyType] ([ID_CompanyType])
GO
ALTER TABLE [dbo].[TPA] NOCHECK CONSTRAINT [FK_TPA_RefCompanyType]
GO
ALTER TABLE [dbo].[TPA_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_TPA_Case_Adjuster] FOREIGN KEY([FK_Adjuster])
REFERENCES [dbo].[Adjuster] ([ID_Adjuster_Case])
GO
ALTER TABLE [dbo].[TPA_Case] NOCHECK CONSTRAINT [FK_TPA_Case_Adjuster]
GO
ALTER TABLE [dbo].[TPA_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_TPA_Case_Cases] FOREIGN KEY([FK_Case])
REFERENCES [dbo].[Cases] ([ID_Case])
GO
ALTER TABLE [dbo].[TPA_Case] NOCHECK CONSTRAINT [FK_TPA_Case_Cases]
GO
ALTER TABLE [dbo].[TPA_Case]  WITH NOCHECK ADD  CONSTRAINT [FK_TPA_Case_TPA] FOREIGN KEY([FK_TPA])
REFERENCES [dbo].[TPA] ([ID_TPA])
GO
ALTER TABLE [dbo].[TPA_Case] NOCHECK CONSTRAINT [FK_TPA_Case_TPA]
GO
/****** Object:  StoredProcedure [dbo].[Execute_Data_Load]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Execute_Data_Load]
	@TargetTable NVARCHAR(100)
AS
/*===========================================
	Author:Praveen
	Created Date: 03-JAN-2023
	Description:To transform and load All data to main table
	EXECUTION : EXEC [dbo].[Execute_Data_Load] 'OJCC_Offices'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	
	DECLARE @DataLoadProcedure NVARCHAR (100) = (SELECT DataLoadProcedure FROM Config.DataFlowControl WHERE TargetTable = @TargetTable)
	DECLARE @Query NVARCHAR (MAX) = (SELECT 'EXEC '+@DataLoadProcedure)

	EXECUTE(@Query)

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		THROW;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[Execute_Validation]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Execute_Validation]
	@TargetTable NVARCHAR(100)
AS
/*===========================================
	Author:Praveen
	Created Date: 06-JAN-2023
	Description:To Validate data
	EXECUTION : EXEC [dbo].[Execute_Validation] 'OJCC_Offices'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	
	DECLARE @DataValidateProcedure NVARCHAR (100) = (SELECT DataValidateProcedure FROM Config.DataFlowControl WHERE TargetTable = @TargetTable)
	DECLARE @Query NVARCHAR (MAX) = (SELECT 'EXEC '+@DataValidateProcedure)

	EXECUTE(@Query)

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		THROW;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[Select_InValidRecords]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Select_InValidRecords]
	@TargetSchema NVARCHAR(100),
	@TargetTable NVARCHAR(100)
AS
/*===========================================
	Author:Praveen
	Created Date: 06-JAN-2023
	Description:To Validate data
	EXECUTION : EXEC [dbo].[Select_InValidRecords]'STG','Carrier'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @Query NVARCHAR (MAX)

	IF(@TargetTable = 'Carrier')
	BEGIN
		SET @Query = 'SELECT * FROM '+@TargetSchema+'.'+@TargetTable+' WHERE IsValidRecord1 = 0'
	END
	ELSE
	BEGIN
		SET @Query = 'SELECT * FROM '+@TargetSchema+'.'+@TargetTable+' WHERE IsValidRecord = 0'
	END

	EXECUTE(@Query)

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		THROW;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_alterdiagram]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_alterdiagram]
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_creatediagram]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_creatediagram]
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_dropdiagram]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_dropdiagram]
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_helpdiagramdefinition]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_helpdiagramdefinition]
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_helpdiagrams]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_helpdiagrams]
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_renamediagram]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_renamediagram]
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_upgraddiagrams]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[sp_upgraddiagrams]
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
	
GO
/****** Object:  StoredProcedure [dbo].[sp_WhoIsActive]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*********************************************************************************************
Who Is Active? v11.32 (2018-07-03)
(C) 2007-2018, Adam Machanic

Feedback: mailto:adam@dataeducation.com
Updates: http://whoisactive.com
Blog: http://dataeducation.com

License: 
	Who is Active? is free to download and use for personal, educational, and internal 
	corporate purposes, provided that this header is preserved. Redistribution or sale 
	of Who is Active?, in whole or in part, is prohibited without the author's express 
	written consent.
*********************************************************************************************/
CREATE PROC [dbo].[sp_WhoIsActive]
(
--~
	--Filters--Both inclusive and exclusive
	--Set either filter to '' to disable
	--Valid filter types are: session, program, database, login, and host
	--Session is a session ID, and either 0 or '' can be used to indicate "all" sessions
	--All other filter types support % or _ as wildcards
	@filter sysname = '',
	@filter_type VARCHAR(10) = 'session',
	@not_filter sysname = '',
	@not_filter_type VARCHAR(10) = 'session',

	--Retrieve data about the calling session?
	@show_own_spid BIT = 0,

	--Retrieve data about system sessions?
	@show_system_spids BIT = 0,

	--Controls how sleeping SPIDs are handled, based on the idea of levels of interest
	--0 does not pull any sleeping SPIDs
	--1 pulls only those sleeping SPIDs that also have an open transaction
	--2 pulls all sleeping SPIDs
	@show_sleeping_spids TINYINT = 1,

	--If 1, gets the full stored procedure or running batch, when available
	--If 0, gets only the actual statement that is currently running in the batch or procedure
	@get_full_inner_text BIT = 0,

	--Get associated query plans for running tasks, if available
	--If @get_plans = 1, gets the plan based on the request's statement offset
	--If @get_plans = 2, gets the entire plan based on the request's plan_handle
	@get_plans TINYINT = 0,

	--Get the associated outer ad hoc query or stored procedure call, if available
	@get_outer_command BIT = 0,

	--Enables pulling transaction log write info and transaction duration
	@get_transaction_info BIT = 0,

	--Get information on active tasks, based on three interest levels
	--Level 0 does not pull any task-related information
	--Level 1 is a lightweight mode that pulls the top non-CXPACKET wait, giving preference to blockers
	--Level 2 pulls all available task-based metrics, including: 
	--number of active tasks, current wait stats, physical I/O, context switches, and blocker information
	@get_task_info TINYINT = 1,

	--Gets associated locks for each request, aggregated in an XML format
	@get_locks BIT = 0,

	--Get average time for past runs of an active query
	--(based on the combination of plan handle, sql handle, and offset)
	@get_avg_time BIT = 0,

	--Get additional non-performance-related information about the session or request
	--text_size, language, date_format, date_first, quoted_identifier, arithabort, ansi_null_dflt_on, 
	--ansi_defaults, ansi_warnings, ansi_padding, ansi_nulls, concat_null_yields_null, 
	--transaction_isolation_level, lock_timeout, deadlock_priority, row_count, command_type
	--
	--If a SQL Agent job is running, an subnode called agent_info will be populated with some or all of
	--the following: job_id, job_name, step_id, step_name, msdb_query_error (in the event of an error)
	--
	--If @get_task_info is set to 2 and a lock wait is detected, a subnode called block_info will be
	--populated with some or all of the following: lock_type, database_name, object_id, file_id, hobt_id, 
	--applock_hash, metadata_resource, metadata_class_id, object_name, schema_name
	@get_additional_info BIT = 0,

	--Walk the blocking chain and count the number of 
	--total SPIDs blocked all the way down by a given session
	--Also enables task_info Level 1, if @get_task_info is set to 0
	@find_block_leaders BIT = 0,

	--Pull deltas on various metrics
	--Interval in seconds to wait before doing the second data pull
	@delta_interval TINYINT = 0,

	--List of desired output columns, in desired order
	--Note that the final output will be the intersection of all enabled features and all 
	--columns in the list. Therefore, only columns associated with enabled features will 
	--actually appear in the output. Likewise, removing columns from this list may effectively
	--disable features, even if they are turned on
	--
	--Each element in this list must be one of the valid output column names. Names must be
	--delimited by square brackets. White space, formatting, and additional characters are
	--allowed, as long as the list contains exact matches of delimited valid column names.
	@output_column_list VARCHAR(8000) = '[dd%][session_id][sql_text][sql_command][login_name][wait_info][tasks][tran_log%][cpu%][temp%][block%][reads%][writes%][context%][physical%][query_plan][locks][%]',

	--Column(s) by which to sort output, optionally with sort directions. 
		--Valid column choices:
		--session_id, physical_io, reads, physical_reads, writes, tempdb_allocations, 
		--tempdb_current, CPU, context_switches, used_memory, physical_io_delta, reads_delta, 
		--physical_reads_delta, writes_delta, tempdb_allocations_delta, tempdb_current_delta, 
		--CPU_delta, context_switches_delta, used_memory_delta, tasks, tran_start_time, 
		--open_tran_count, blocking_session_id, blocked_session_count, percent_complete, 
		--host_name, login_name, database_name, start_time, login_time, program_name
		--
		--Note that column names in the list must be bracket-delimited. Commas and/or white
		--space are not required. 
	@sort_order VARCHAR(500) = '[start_time] ASC',

	--Formats some of the output columns in a more "human readable" form
	--0 disables outfput format
	--1 formats the output for variable-width fonts
	--2 formats the output for fixed-width fonts
	@format_output TINYINT = 1,

	--If set to a non-blank value, the script will attempt to insert into the specified 
	--destination table. Please note that the script will not verify that the table exists, 
	--or that it has the correct schema, before doing the insert.
	--Table can be specified in one, two, or three-part format
	@destination_table VARCHAR(4000) = '',

	--If set to 1, no data collection will happen and no result set will be returned; instead,
	--a CREATE TABLE statement will be returned via the @schema parameter, which will match 
	--the schema of the result set that would be returned by using the same collection of the
	--rest of the parameters. The CREATE TABLE statement will have a placeholder token of 
	--<table_name> in place of an actual table name.
	@return_schema BIT = 0,
	@schema VARCHAR(MAX) = NULL OUTPUT,

	--Help! What do I do?
	@help BIT = 0
--~
)
/*
OUTPUT COLUMNS
--------------
Formatted/Non:	[session_id] [smallint] NOT NULL
	Session ID (a.k.a. SPID)

Formatted:		[dd hh:mm:ss.mss] [varchar](15) NULL
Non-Formatted:	<not returned>
	For an active request, time the query has been running
	For a sleeping session, time since the last batch completed

Formatted:		[dd hh:mm:ss.mss (avg)] [varchar](15) NULL
Non-Formatted:	[avg_elapsed_time] [int] NULL
	(Requires @get_avg_time option)
	How much time has the active portion of the query taken in the past, on average?

Formatted:		[physical_io] [varchar](30) NULL
Non-Formatted:	[physical_io] [bigint] NULL
	Shows the number of physical I/Os, for active requests

Formatted:		[reads] [varchar](30) NULL
Non-Formatted:	[reads] [bigint] NULL
	For an active request, number of reads done for the current query
	For a sleeping session, total number of reads done over the lifetime of the session

Formatted:		[physical_reads] [varchar](30) NULL
Non-Formatted:	[physical_reads] [bigint] NULL
	For an active request, number of physical reads done for the current query
	For a sleeping session, total number of physical reads done over the lifetime of the session

Formatted:		[writes] [varchar](30) NULL
Non-Formatted:	[writes] [bigint] NULL
	For an active request, number of writes done for the current query
	For a sleeping session, total number of writes done over the lifetime of the session

Formatted:		[tempdb_allocations] [varchar](30) NULL
Non-Formatted:	[tempdb_allocations] [bigint] NULL
	For an active request, number of TempDB writes done for the current query
	For a sleeping session, total number of TempDB writes done over the lifetime of the session

Formatted:		[tempdb_current] [varchar](30) NULL
Non-Formatted:	[tempdb_current] [bigint] NULL
	For an active request, number of TempDB pages currently allocated for the query
	For a sleeping session, number of TempDB pages currently allocated for the session

Formatted:		[CPU] [varchar](30) NULL
Non-Formatted:	[CPU] [int] NULL
	For an active request, total CPU time consumed by the current query
	For a sleeping session, total CPU time consumed over the lifetime of the session

Formatted:		[context_switches] [varchar](30) NULL
Non-Formatted:	[context_switches] [bigint] NULL
	Shows the number of context switches, for active requests

Formatted:		[used_memory] [varchar](30) NOT NULL
Non-Formatted:	[used_memory] [bigint] NOT NULL
	For an active request, total memory consumption for the current query
	For a sleeping session, total current memory consumption

Formatted:		[physical_io_delta] [varchar](30) NULL
Non-Formatted:	[physical_io_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical I/Os reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[reads_delta] [varchar](30) NULL
Non-Formatted:	[reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[physical_reads_delta] [varchar](30) NULL
Non-Formatted:	[physical_reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[writes_delta] [varchar](30) NULL
Non-Formatted:	[writes_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_allocations_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_allocations_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of TempDB writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_current_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_current_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of allocated TempDB pages reported on the first and second 
	collections. If the request started after the first collection, the value will be NULL

Formatted:		[CPU_delta] [varchar](30) NULL
Non-Formatted:	[CPU_delta] [int] NULL
	(Requires @delta_interval option)
	Difference between the CPU time reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[context_switches_delta] [varchar](30) NULL
Non-Formatted:	[context_switches_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the context switches count reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[used_memory_delta] [varchar](30) NULL
Non-Formatted:	[used_memory_delta] [bigint] NULL
	Difference between the memory usage reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[tasks] [varchar](30) NULL
Non-Formatted:	[tasks] [smallint] NULL
	Number of worker tasks currently allocated, for active requests

Formatted/Non:	[status] [varchar](30) NOT NULL
	Activity status for the session (running, sleeping, etc)

Formatted/Non:	[wait_info] [nvarchar](4000) NULL
	Aggregates wait information, in the following format:
		(Ax: Bms/Cms/Dms)E
	A is the number of waiting tasks currently waiting on resource type E. B/C/D are wait
	times, in milliseconds. If only one thread is waiting, its wait time will be shown as B.
	If two tasks are waiting, each of their wait times will be shown (B/C). If three or more 
	tasks are waiting, the minimum, average, and maximum wait times will be shown (B/C/D).
	If wait type E is a page latch wait and the page is of a "special" type (e.g. PFS, GAM, SGAM), 
	the page type will be identified.
	If wait type E is CXPACKET, the nodeId from the query plan will be identified

Formatted/Non:	[locks] [xml] NULL
	(Requires @get_locks option)
	Aggregates lock information, in XML format.
	The lock XML includes the lock mode, locked object, and aggregates the number of requests. 
	Attempts are made to identify locked objects by name

Formatted/Non:	[tran_start_time] [datetime] NULL
	(Requires @get_transaction_info option)
	Date and time that the first transaction opened by a session caused a transaction log 
	write to occur.

Formatted/Non:	[tran_log_writes] [nvarchar](4000) NULL
	(Requires @get_transaction_info option)
	Aggregates transaction log write information, in the following format:
	A:wB (C kB)
	A is a database that has been touched by an active transaction
	B is the number of log writes that have been made in the database as a result of the transaction
	C is the number of log kilobytes consumed by the log records

Formatted:		[open_tran_count] [varchar](30) NULL
Non-Formatted:	[open_tran_count] [smallint] NULL
	Shows the number of open transactions the session has open

Formatted:		[sql_command] [xml] NULL
Non-Formatted:	[sql_command] [nvarchar](max) NULL
	(Requires @get_outer_command option)
	Shows the "outer" SQL command, i.e. the text of the batch or RPC sent to the server, 
	if available

Formatted:		[sql_text] [xml] NULL
Non-Formatted:	[sql_text] [nvarchar](max) NULL
	Shows the SQL text for active requests or the last statement executed
	for sleeping sessions, if available in either case.
	If @get_full_inner_text option is set, shows the full text of the batch.
	Otherwise, shows only the active statement within the batch.
	If the query text is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[query_plan] [xml] NULL
	(Requires @get_plans option)
	Shows the query plan for the request, if available.
	If the plan is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[blocking_session_id] [smallint] NULL
	When applicable, shows the blocking SPID

Formatted:		[blocked_session_count] [varchar](30) NULL
Non-Formatted:	[blocked_session_count] [smallint] NULL
	(Requires @find_block_leaders option)
	The total number of SPIDs blocked by this session,
	all the way down the blocking chain.

Formatted:		[percent_complete] [varchar](30) NULL
Non-Formatted:	[percent_complete] [real] NULL
	When applicable, shows the percent complete (e.g. for backups, restores, and some rollbacks)

Formatted/Non:	[host_name] [sysname] NOT NULL
	Shows the host name for the connection

Formatted/Non:	[login_name] [sysname] NOT NULL
	Shows the login name for the connection

Formatted/Non:	[database_name] [sysname] NULL
	Shows the connected database

Formatted/Non:	[program_name] [sysname] NULL
	Shows the reported program/application name

Formatted/Non:	[additional_info] [xml] NULL
	(Requires @get_additional_info option)
	Returns additional non-performance-related session/request information
	If the script finds a SQL Agent job running, the name of the job and job step will be reported
	If @get_task_info = 2 and the script finds a lock wait, the locked object will be reported

Formatted/Non:	[start_time] [datetime] NOT NULL
	For active requests, shows the time the request started
	For sleeping sessions, shows the time the last batch completed

Formatted/Non:	[login_time] [datetime] NOT NULL
	Shows the time that the session connected

Formatted/Non:	[request_id] [int] NULL
	For active requests, shows the request_id
	Should be 0 unless MARS is being used

Formatted/Non:	[collection_time] [datetime] NOT NULL
	Time that this script's final SELECT ran
*/
AS
BEGIN;
	SET NOCOUNT ON; 
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET QUOTED_IDENTIFIER ON;
	SET ANSI_PADDING ON;
	SET CONCAT_NULL_YIELDS_NULL ON;
	SET ANSI_WARNINGS ON;
	SET NUMERIC_ROUNDABORT OFF;
	SET ARITHABORT ON;

	IF
		@filter IS NULL
		OR @filter_type IS NULL
		OR @not_filter IS NULL
		OR @not_filter_type IS NULL
		OR @show_own_spid IS NULL
		OR @show_system_spids IS NULL
		OR @show_sleeping_spids IS NULL
		OR @get_full_inner_text IS NULL
		OR @get_plans IS NULL
		OR @get_outer_command IS NULL
		OR @get_transaction_info IS NULL
		OR @get_task_info IS NULL
		OR @get_locks IS NULL
		OR @get_avg_time IS NULL
		OR @get_additional_info IS NULL
		OR @find_block_leaders IS NULL
		OR @delta_interval IS NULL
		OR @format_output IS NULL
		OR @output_column_list IS NULL
		OR @sort_order IS NULL
		OR @return_schema IS NULL
		OR @destination_table IS NULL
		OR @help IS NULL
	BEGIN;
		RAISERROR('Input parameters cannot be NULL', 16, 1);
		RETURN;
	END;
	
	IF @filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @filter_type = 'session' AND @filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type = 'session' AND @not_filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @show_sleeping_spids NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @show_sleeping_spids are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @get_plans NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_plans are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @get_task_info NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_task_info are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @format_output NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @format_output are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @help = 1
	BEGIN;
		DECLARE 
			@header VARCHAR(MAX),
			@params VARCHAR(MAX),
			@outputs VARCHAR(MAX);

		SELECT 
			@header =
				REPLACE
				(
					REPLACE
					(
						CONVERT
						(
							VARCHAR(MAX),
							SUBSTRING
							(
								t.text, 
								CHARINDEX('/' + REPLICATE('*', 93), t.text) + 94,
								CHARINDEX(REPLICATE('*', 93) + '/', t.text) - (CHARINDEX('/' + REPLICATE('*', 93), t.text) + 94)
							)
						),
						CHAR(13)+CHAR(10),
						CHAR(13)
					),
					'	',
					''
				),
			@params =
				CHAR(13) +
					REPLACE
					(
						REPLACE
						(
							CONVERT
							(
								VARCHAR(MAX),
								SUBSTRING
								(
									t.text, 
									CHARINDEX('--~', t.text) + 5, 
									CHARINDEX('--~', t.text, CHARINDEX('--~', t.text) + 5) - (CHARINDEX('--~', t.text) + 5)
								)
							),
							CHAR(13)+CHAR(10),
							CHAR(13)
						),
						'	',
						''
					),
				@outputs = 
					CHAR(13) +
						REPLACE
						(
							REPLACE
							(
								REPLACE
								(
									CONVERT
									(
										VARCHAR(MAX),
										SUBSTRING
										(
											t.text, 
											CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32,
											CHARINDEX('*/', t.text, CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32) - (CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32)
										)
									),
									CHAR(9),
									CHAR(255)
								),
								CHAR(13)+CHAR(10),
								CHAR(13)
							),
							'	',
							''
						) +
						CHAR(13)
		FROM sys.dm_exec_requests AS r
		CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t
		WHERE
			r.session_id = @@SPID;

		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@header) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		)
		SELECT
			RTRIM(LTRIM(
				SUBSTRING
				(
					@header,
					number + 1,
					CHARINDEX(CHAR(13), @header, number + 1) - number - 1
				)
			)) AS [------header---------------------------------------------------------------------------------------------------------------]
		FROM numbers
		WHERE
			SUBSTRING(@header, number, 1) = CHAR(13);

		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@params) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@params,
						number + 1,
						CHARINDEX(CHAR(13), @params, number + 1) - number - 1
					)
				)) AS token,
				number,
				CASE
					WHEN SUBSTRING(@params, number + 1, 1) = CHAR(13) THEN number
					ELSE COALESCE(NULLIF(CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number), 0), LEN(@params)) 
				END AS param_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY
						CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number),
						SUBSTRING(@params, number+1, 1)
					ORDER BY 
						number
				) AS group_order
			FROM numbers
			WHERE
				SUBSTRING(@params, number, 1) = CHAR(13)
		),
		parsed_tokens AS
		(
			SELECT
				MIN
				(
					CASE
						WHEN token LIKE '@%' THEN token
						ELSE NULL
					END
				) AS parameter,
				MIN
				(
					CASE
						WHEN token LIKE '--%' THEN RIGHT(token, LEN(token) - 2)
						ELSE NULL
					END
				) AS description,
				param_group,
				group_order
			FROM tokens
			WHERE
				NOT 
				(
					token = '' 
					AND group_order > 1
				)
			GROUP BY
				param_group,
				group_order
		)
		SELECT
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '-------------------------------------------------------------------------'
				WHEN param_group = MAX(param_group) OVER() THEN parameter
				ELSE COALESCE(LEFT(parameter, LEN(parameter) - 1), '')
			END AS [------parameter----------------------------------------------------------],
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE COALESCE(description, '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM parsed_tokens
		ORDER BY
			param_group, 
			group_order;
		
		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@outputs) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@outputs,
						number + 1,
						CASE
							WHEN 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) < 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2, @outputs, number + 1), 0), LEN(@outputs))
								THEN COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) - number - 1
							ELSE
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2, @outputs, number + 1), 0), LEN(@outputs)) - number - 1
						END
					)
				)) AS token,
				number,
				COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) AS output_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY 
						COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs))
					ORDER BY
						number
				) AS output_group_order
			FROM numbers
			WHERE
				SUBSTRING(@outputs, number, 10) = CHAR(13) + 'Formatted'
				OR SUBSTRING(@outputs, number, 2) = CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2
		),
		output_tokens AS
		(
			SELECT 
				*,
				CASE output_group_order
					WHEN 2 THEN MAX(CASE output_group_order WHEN 1 THEN token ELSE NULL END) OVER (PARTITION BY output_group)
					ELSE ''
				END COLLATE Latin1_General_Bin2 AS column_info
			FROM tokens
		)
		SELECT
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)-1)
					END
				ELSE ''
			END AS formatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, LEN(column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
					END
				ELSE ''
			END AS formatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN
									SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX('>', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info)))
								ELSE
									SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info)))
							END
					END
				ELSE ''
			END AS unformatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN ''
								ELSE
									SUBSTRING(column_info, CHARINDEX(']', column_info, CHARINDEX('Non-Formatted:', column_info))+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
							END
					END
				ELSE ''
			END AS unformatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE REPLACE(token, CHAR(255) COLLATE Latin1_General_Bin2, '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM output_tokens
		WHERE
			NOT 
			(
				output_group_order = 1 
				AND output_group = LEN(@outputs)
			)
		ORDER BY
			output_group,
			CASE output_group_order
				WHEN 1 THEN 99
				ELSE output_group_order
			END;

		RETURN;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@output_column_list))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@output_column_list,
					number + 1,
					CHARINDEX(']', @output_column_list, number) - number - 1
				) + '|]' AS token,
			number
		FROM numbers
		WHERE
			SUBSTRING(@output_column_list, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number,
					x.default_order
			) AS r,
			ROW_NUMBER() OVER
			(
				ORDER BY
					tokens.number,
					x.default_order
			) AS s
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name, 1 AS default_order
			UNION ALL
			SELECT '[dd hh:mm:ss.mss]', 2
			WHERE
				@format_output IN (1, 2)
			UNION ALL
			SELECT '[dd hh:mm:ss.mss (avg)]', 3
			WHERE
				@format_output IN (1, 2)
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[avg_elapsed_time]', 4
			WHERE
				@format_output = 0
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[physical_io]', 5
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[reads]', 6
			UNION ALL
			SELECT '[physical_reads]', 7
			UNION ALL
			SELECT '[writes]', 8
			UNION ALL
			SELECT '[tempdb_allocations]', 9
			UNION ALL
			SELECT '[tempdb_current]', 10
			UNION ALL
			SELECT '[CPU]', 11
			UNION ALL
			SELECT '[context_switches]', 12
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[used_memory]', 13
			UNION ALL
			SELECT '[physical_io_delta]', 14
			WHERE
				@delta_interval > 0	
				AND @get_task_info = 2
			UNION ALL
			SELECT '[reads_delta]', 15
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[physical_reads_delta]', 16
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[writes_delta]', 17
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_allocations_delta]', 18
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_current_delta]', 19
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[CPU_delta]', 20
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[context_switches_delta]', 21
			WHERE
				@delta_interval > 0
				AND @get_task_info = 2
			UNION ALL
			SELECT '[used_memory_delta]', 22
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tasks]', 23
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[status]', 24
			UNION ALL
			SELECT '[wait_info]', 25
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[locks]', 26
			WHERE
				@get_locks = 1
			UNION ALL
			SELECT '[tran_start_time]', 27
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[tran_log_writes]', 28
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[open_tran_count]', 29
			UNION ALL
			SELECT '[sql_command]', 30
			WHERE
				@get_outer_command = 1
			UNION ALL
			SELECT '[sql_text]', 31
			UNION ALL
			SELECT '[query_plan]', 32
			WHERE
				@get_plans >= 1
			UNION ALL
			SELECT '[blocking_session_id]', 33
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[blocked_session_count]', 34
			WHERE
				@find_block_leaders = 1
			UNION ALL
			SELECT '[percent_complete]', 35
			UNION ALL
			SELECT '[host_name]', 36
			UNION ALL
			SELECT '[login_name]', 37
			UNION ALL
			SELECT '[database_name]', 38
			UNION ALL
			SELECT '[program_name]', 39
			UNION ALL
			SELECT '[additional_info]', 40
			WHERE
				@get_additional_info = 1
			UNION ALL
			SELECT '[start_time]', 41
			UNION ALL
			SELECT '[login_time]', 42
			UNION ALL
			SELECT '[request_id]', 43
			UNION ALL
			SELECT '[collection_time]', 44
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@output_column_list =
			STUFF
			(
				(
					SELECT
						',' + column_name as [text()]
					FROM ordered_columns
					WHERE
						r = 1
					ORDER BY
						s
					FOR XML
						PATH('')
				),
				1,
				1,
				''
			);
	
	IF COALESCE(RTRIM(@output_column_list), '') = ''
	BEGIN;
		RAISERROR('No valid column matches found in @output_column_list or no columns remain due to selected options.', 16, 1);
		RETURN;
	END;
	
	IF @destination_table <> ''
	BEGIN;
		SET @destination_table = 
			--database
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 3)) + '.', '') +
			--schema
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 2)) + '.', '') +
			--table
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 1)), '');
			
		IF COALESCE(RTRIM(@destination_table), '') = ''
		BEGIN;
			RAISERROR('Destination table not properly formatted.', 16, 1);
			RETURN;
		END;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@sort_order))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@sort_order,
					number + 1,
					CHARINDEX(']', @sort_order, number) - number - 1
				) + '|]' AS token,
			SUBSTRING
			(
				@sort_order,
				CHARINDEX(']', @sort_order, number) + 1,
				COALESCE(NULLIF(CHARINDEX('[', @sort_order, CHARINDEX(']', @sort_order, number)), 0), LEN(@sort_order)) - CHARINDEX(']', @sort_order, number)
			) AS next_chunk,
			number
		FROM numbers
		WHERE
			SUBSTRING(@sort_order, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name +
				CASE
					WHEN tokens.next_chunk LIKE '%asc%' THEN ' ASC'
					WHEN tokens.next_chunk LIKE '%desc%' THEN ' DESC'
					ELSE ''
				END AS column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number
			) AS r,
			tokens.number
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name
			UNION ALL
			SELECT '[physical_io]'
			UNION ALL
			SELECT '[reads]'
			UNION ALL
			SELECT '[physical_reads]'
			UNION ALL
			SELECT '[writes]'
			UNION ALL
			SELECT '[tempdb_allocations]'
			UNION ALL
			SELECT '[tempdb_current]'
			UNION ALL
			SELECT '[CPU]'
			UNION ALL
			SELECT '[context_switches]'
			UNION ALL
			SELECT '[used_memory]'
			UNION ALL
			SELECT '[physical_io_delta]'
			UNION ALL
			SELECT '[reads_delta]'
			UNION ALL
			SELECT '[physical_reads_delta]'
			UNION ALL
			SELECT '[writes_delta]'
			UNION ALL
			SELECT '[tempdb_allocations_delta]'
			UNION ALL
			SELECT '[tempdb_current_delta]'
			UNION ALL
			SELECT '[CPU_delta]'
			UNION ALL
			SELECT '[context_switches_delta]'
			UNION ALL
			SELECT '[used_memory_delta]'
			UNION ALL
			SELECT '[tasks]'
			UNION ALL
			SELECT '[tran_start_time]'
			UNION ALL
			SELECT '[open_tran_count]'
			UNION ALL
			SELECT '[blocking_session_id]'
			UNION ALL
			SELECT '[blocked_session_count]'
			UNION ALL
			SELECT '[percent_complete]'
			UNION ALL
			SELECT '[host_name]'
			UNION ALL
			SELECT '[login_name]'
			UNION ALL
			SELECT '[database_name]'
			UNION ALL
			SELECT '[start_time]'
			UNION ALL
			SELECT '[login_time]'
			UNION ALL
			SELECT '[program_name]'
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@sort_order = COALESCE(z.sort_order, '')
	FROM
	(
		SELECT
			STUFF
			(
				(
					SELECT
						',' + column_name as [text()]
					FROM ordered_columns
					WHERE
						r = 1
					ORDER BY
						number
					FOR XML
						PATH('')
				),
				1,
				1,
				''
			) AS sort_order
	) AS z;

	CREATE TABLE #sessions
	(
		recursion SMALLINT NOT NULL,
		session_id SMALLINT NOT NULL,
		request_id INT NOT NULL,
		session_number INT NOT NULL,
		elapsed_time INT NOT NULL,
		avg_elapsed_time INT NULL,
		physical_io BIGINT NULL,
		reads BIGINT NULL,
		physical_reads BIGINT NULL,
		writes BIGINT NULL,
		tempdb_allocations BIGINT NULL,
		tempdb_current BIGINT NULL,
		CPU INT NULL,
		thread_CPU_snapshot BIGINT NULL,
		context_switches BIGINT NULL,
		used_memory BIGINT NOT NULL, 
		tasks SMALLINT NULL,
		status VARCHAR(30) NOT NULL,
		wait_info NVARCHAR(4000) NULL,
		locks XML NULL,
		transaction_id BIGINT NULL,
		tran_start_time DATETIME NULL,
		tran_log_writes NVARCHAR(4000) NULL,
		open_tran_count SMALLINT NULL,
		sql_command XML NULL,
		sql_handle VARBINARY(64) NULL,
		statement_start_offset INT NULL,
		statement_end_offset INT NULL,
		sql_text XML NULL,
		plan_handle VARBINARY(64) NULL,
		query_plan XML NULL,
		blocking_session_id SMALLINT NULL,
		blocked_session_count SMALLINT NULL,
		percent_complete REAL NULL,
		host_name sysname NULL,
		login_name sysname NOT NULL,
		database_name sysname NULL,
		program_name sysname NULL,
		additional_info XML NULL,
		start_time DATETIME NOT NULL,
		login_time DATETIME NULL,
		last_request_start_time DATETIME NULL,
		PRIMARY KEY CLUSTERED (session_id, request_id, recursion) WITH (IGNORE_DUP_KEY = ON),
		UNIQUE NONCLUSTERED (transaction_id, session_id, request_id, recursion) WITH (IGNORE_DUP_KEY = ON)
	);

	IF @return_schema = 0
	BEGIN;
		--Disable unnecessary autostats on the table
		CREATE STATISTICS s_session_id ON #sessions (session_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_request_id ON #sessions (request_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_transaction_id ON #sessions (transaction_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_session_number ON #sessions (session_number)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_status ON #sessions (status)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_start_time ON #sessions (start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_last_request_start_time ON #sessions (last_request_start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_recursion ON #sessions (recursion)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;

		DECLARE @recursion SMALLINT;
		SET @recursion = 
			CASE @delta_interval
				WHEN 0 THEN 1
				ELSE -1
			END;

		DECLARE @first_collection_ms_ticks BIGINT;
		DECLARE @last_collection_start DATETIME;
		DECLARE @sys_info BIT;
		SET @sys_info = ISNULL(CONVERT(BIT, SIGN(OBJECT_ID('sys.dm_os_sys_info'))), 0);

		--Used for the delta pull
		REDO:;
		
		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			SELECT
				y.resource_type,
				y.database_name,
				y.object_id,
				y.file_id,
				y.page_type,
				y.hobt_id,
				y.allocation_unit_id,
				y.index_id,
				y.schema_id,
				y.principal_id,
				y.request_mode,
				y.request_status,
				y.session_id,
				y.resource_description,
				y.request_count,
				s.request_id,
				s.start_time,
				CONVERT(sysname, NULL) AS object_name,
				CONVERT(sysname, NULL) AS index_name,
				CONVERT(sysname, NULL) AS schema_name,
				CONVERT(sysname, NULL) AS principal_name,
				CONVERT(NVARCHAR(2048), NULL) AS query_error
			INTO #locks
			FROM
			(
				SELECT
					sp.spid AS session_id,
					CASE sp.status
						WHEN 'sleeping' THEN CONVERT(INT, 0)
						ELSE sp.request_id
					END AS request_id,
					CASE sp.status
						WHEN 'sleeping' THEN sp.last_batch
						ELSE COALESCE(req.start_time, sp.last_batch)
					END AS start_time,
					sp.dbid
				FROM sys.sysprocesses AS sp
				OUTER APPLY
				(
					SELECT TOP(1)
						CASE
							WHEN 
							(
								sp.hostprocess > ''
								OR r.total_elapsed_time < 0
							) THEN
								r.start_time
							ELSE
								DATEADD
								(
									ms, 
									1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())), 
									DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
								)
						END AS start_time
					FROM sys.dm_exec_requests AS r
					WHERE
						r.session_id = sp.spid
						AND r.request_id = sp.request_id
				) AS req
				WHERE
					--Process inclusive filter
					1 =
						CASE
							WHEN @filter <> '' THEN
								CASE @filter_type
									WHEN 'session' THEN
										CASE
											WHEN
												CONVERT(SMALLINT, @filter) = 0
												OR sp.spid = CONVERT(SMALLINT, @filter)
													THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 1
						END
					--Process exclusive filter
					AND 0 =
						CASE
							WHEN @not_filter <> '' THEN
								CASE @not_filter_type
									WHEN 'session' THEN
										CASE
											WHEN sp.spid = CONVERT(SMALLINT, @not_filter) THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @not_filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 0
						END
					AND 
					(
						@show_own_spid = 1
						OR sp.spid <> @@SPID
					)
					AND 
					(
						@show_system_spids = 1
						OR sp.hostprocess > ''
					)
					AND sp.ecid = 0
			) AS s
			INNER HASH JOIN
			(
				SELECT
					x.resource_type,
					x.database_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR (x.page_no - 1) % 511232 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR (x.page_no - 6) % 511232 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR (x.page_no - 7) % 511232 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END AS page_type,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END AS resource_description,
					COUNT(*) AS request_count
				FROM
				(
					SELECT
						tl.resource_type +
							CASE
								WHEN tl.resource_subtype = '' THEN ''
								ELSE '.' + tl.resource_subtype
							END AS resource_type,
						COALESCE(DB_NAME(tl.resource_database_id), N'(null)') AS database_name,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type = 'OBJECT' THEN tl.resource_associated_entity_id
								WHEN tl.resource_description LIKE '%object_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('object_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('object_id = ', tl.resource_description) + 12),
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('object_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END
						) AS object_id,
						CONVERT
						(
							INT,
							CASE 
								WHEN tl.resource_type = 'FILE' THEN CONVERT(INT, tl.resource_description)
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN LEFT(tl.resource_description, CHARINDEX(':', tl.resource_description)-1)
								ELSE NULL
							END
						) AS file_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN 
									SUBSTRING
									(
										tl.resource_description, 
										CHARINDEX(':', tl.resource_description) + 1, 
										COALESCE
										(
											NULLIF
											(
												CHARINDEX(':', tl.resource_description, CHARINDEX(':', tl.resource_description) + 1), 
												0
											), 
											DATALENGTH(tl.resource_description)+1
										) - (CHARINDEX(':', tl.resource_description) + 1)
									)
								ELSE NULL
							END
						) AS page_no,
						CASE
							WHEN tl.resource_type IN ('PAGE', 'KEY', 'RID', 'HOBT') THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS hobt_id,
						CASE
							WHEN tl.resource_type = 'ALLOCATION_UNIT' THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS allocation_unit_id,
						CONVERT
						(
							INT,
							CASE
								WHEN
									/*TODO: Deal with server principals*/ 
									tl.resource_subtype <> 'SERVER_PRINCIPAL' 
									AND tl.resource_description LIKE '%index_id or stats_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23)
										)
									)
								ELSE NULL
							END 
						) AS index_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%schema_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('schema_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('schema_id = ', tl.resource_description) + 12), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('schema_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END 
						) AS schema_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%principal_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('principal_id = ', tl.resource_description) + 15), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('principal_id = ', tl.resource_description) + 15), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('principal_id = ', tl.resource_description) + 15)
										)
									)
								ELSE NULL
							END
						) AS principal_id,
						tl.request_mode,
						tl.request_status,
						tl.request_session_id AS session_id,
						tl.request_request_id AS request_id,

						/*TODO: Applocks, other resource_descriptions*/
						RTRIM(tl.resource_description) AS resource_description,
						tl.resource_associated_entity_id
						/*********************************************/
					FROM 
					(
						SELECT 
							request_session_id,
							CONVERT(VARCHAR(120), resource_type) COLLATE Latin1_General_Bin2 AS resource_type,
							CONVERT(VARCHAR(120), resource_subtype) COLLATE Latin1_General_Bin2 AS resource_subtype,
							resource_database_id,
							CONVERT(VARCHAR(512), resource_description) COLLATE Latin1_General_Bin2 AS resource_description,
							resource_associated_entity_id,
							CONVERT(VARCHAR(120), request_mode) COLLATE Latin1_General_Bin2 AS request_mode,
							CONVERT(VARCHAR(120), request_status) COLLATE Latin1_General_Bin2 AS request_status,
							request_request_id
						FROM sys.dm_tran_locks
					) AS tl
				) AS x
				GROUP BY
					x.resource_type,
					x.database_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR (x.page_no - 1) % 511232 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR (x.page_no - 6) % 511232 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR (x.page_no - 7) % 511232 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END
			) AS y ON
				y.session_id = s.session_id
				AND y.request_id = s.request_id
			OPTION (HASH GROUP);

			--Disable unnecessary autostats on the table
			CREATE STATISTICS s_database_name ON #locks (database_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_id ON #locks (object_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_hobt_id ON #locks (hobt_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_allocation_unit_id ON #locks (allocation_unit_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_id ON #locks (index_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_id ON #locks (schema_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_id ON #locks (principal_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_id ON #locks (request_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_start_time ON #locks (start_time)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_type ON #locks (resource_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_name ON #locks (object_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_name ON #locks (schema_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_page_type ON #locks (page_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_mode ON #locks (request_mode)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_status ON #locks (request_status)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_description ON #locks (resource_description)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_name ON #locks (index_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_name ON #locks (principal_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
		END;
		
		DECLARE 
			@sql VARCHAR(MAX), 
			@sql_n NVARCHAR(MAX);

		SET @sql = 
			CONVERT(VARCHAR(MAX), '') +
			'DECLARE @blocker BIT;
			SET @blocker = 0;
			DECLARE @i INT;
			SET @i = 2147483647;

			DECLARE @sessions TABLE
			(
				session_id SMALLINT NOT NULL,
				request_id INT NOT NULL,
				login_time DATETIME,
				last_request_end_time DATETIME,
				status VARCHAR(30),
				statement_start_offset INT,
				statement_end_offset INT,
				sql_handle BINARY(20),
				host_name NVARCHAR(128),
				login_name NVARCHAR(128),
				program_name NVARCHAR(128),
				database_id SMALLINT,
				memory_usage INT,
				open_tran_count SMALLINT, 
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0 
						OR @find_block_leaders = 1 
					) THEN
						'wait_type NVARCHAR(32),
						wait_resource NVARCHAR(256),
						wait_time BIGINT, 
						'
					ELSE 
						''
				END +
				'blocked SMALLINT,
				is_user_process BIT,
				cmd VARCHAR(32),
				PRIMARY KEY CLUSTERED (session_id, request_id) WITH (IGNORE_DUP_KEY = ON)
			);

			DECLARE @blockers TABLE
			(
				session_id INT NOT NULL PRIMARY KEY WITH (IGNORE_DUP_KEY = ON)
			);

			BLOCKERS:;

			INSERT @sessions
			(
				session_id,
				request_id,
				login_time,
				last_request_end_time,
				status,
				statement_start_offset,
				statement_end_offset,
				sql_handle,
				host_name,
				login_name,
				program_name,
				database_id,
				memory_usage,
				open_tran_count, 
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0
						OR @find_block_leaders = 1 
					) THEN
						'wait_type,
						wait_resource,
						wait_time, 
						'
					ELSE
						''
				END +
				'blocked,
				is_user_process,
				cmd 
			)
			SELECT TOP(@i)
				spy.session_id,
				spy.request_id,
				spy.login_time,
				spy.last_request_end_time,
				spy.status,
				spy.statement_start_offset,
				spy.statement_end_offset,
				spy.sql_handle,
				spy.host_name,
				spy.login_name,
				spy.program_name,
				spy.database_id,
				spy.memory_usage,
				spy.open_tran_count,
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0  
						OR @find_block_leaders = 1 
					) THEN
						'spy.wait_type,
						CASE
							WHEN
								spy.wait_type LIKE N''PAGE%LATCH_%''
								OR spy.wait_type = N''CXPACKET''
								OR spy.wait_type LIKE N''LATCH[_]%''
								OR spy.wait_type = N''OLEDB'' THEN
									spy.wait_resource
							ELSE
								NULL
						END AS wait_resource,
						spy.wait_time, 
						'
					ELSE
						''
				END +
				'spy.blocked,
				spy.is_user_process,
				spy.cmd
			FROM
			(
				SELECT TOP(@i)
					spx.*, 
					' +
					CASE
						WHEN 
						(
							@get_task_info <> 0 
							OR @find_block_leaders = 1 
						) THEN
							'ROW_NUMBER() OVER
							(
								PARTITION BY
									spx.session_id,
									spx.request_id
								ORDER BY
									CASE
										WHEN spx.wait_type LIKE N''LCK[_]%'' THEN 
											1
										ELSE
											99
									END,
									spx.wait_time DESC,
									spx.blocked DESC
							) AS r 
							'
						ELSE 
							'1 AS r 
							'
					END +
				'FROM
				(
					SELECT TOP(@i)
						sp0.session_id,
						sp0.request_id,
						sp0.login_time,
						sp0.last_request_end_time,
						LOWER(sp0.status) AS status,
						CASE
							WHEN sp0.cmd = ''CREATE INDEX'' THEN
								0
							ELSE
								sp0.stmt_start
						END AS statement_start_offset,
						CASE
							WHEN sp0.cmd = N''CREATE INDEX'' THEN
								-1
							ELSE
								COALESCE(NULLIF(sp0.stmt_end, 0), -1)
						END AS statement_end_offset,
						sp0.sql_handle,
						sp0.host_name,
						sp0.login_name,
						sp0.program_name,
						sp0.database_id,
						sp0.memory_usage,
						sp0.open_tran_count, 
						' +
						CASE
							WHEN 
							(
								@get_task_info <> 0 
								OR @find_block_leaders = 1 
							) THEN
								'CASE
									WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN
										sp0.wait_type
									ELSE
										NULL
								END AS wait_type,
								CASE
									WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN 
										sp0.wait_resource
									ELSE
										NULL
								END AS wait_resource,
								CASE
									WHEN sp0.wait_type <> N''CXPACKET'' THEN
										sp0.wait_time
									ELSE
										0
								END AS wait_time, 
								'
							ELSE
								''
						END +
						'sp0.blocked,
						sp0.is_user_process,
						sp0.cmd
					FROM
					(
						SELECT TOP(@i)
							sp1.session_id,
							sp1.request_id,
							sp1.login_time,
							sp1.last_request_end_time,
							sp1.status,
							sp1.cmd,
							sp1.stmt_start,
							sp1.stmt_end,
							MAX(NULLIF(sp1.sql_handle, 0x00)) OVER (PARTITION BY sp1.session_id, sp1.request_id) AS sql_handle,
							sp1.host_name,
							MAX(sp1.login_name) OVER (PARTITION BY sp1.session_id, sp1.request_id) AS login_name,
							sp1.program_name,
							sp1.database_id,
							MAX(sp1.memory_usage)  OVER (PARTITION BY sp1.session_id, sp1.request_id) AS memory_usage,
							MAX(sp1.open_tran_count)  OVER (PARTITION BY sp1.session_id, sp1.request_id) AS open_tran_count,
							sp1.wait_type,
							sp1.wait_resource,
							sp1.wait_time,
							sp1.blocked,
							sp1.hostprocess,
							sp1.is_user_process
						FROM
						(
							SELECT TOP(@i)
								sp2.spid AS session_id,
								CASE sp2.status
									WHEN ''sleeping'' THEN
										CONVERT(INT, 0)
									ELSE
										sp2.request_id
								END AS request_id,
								MAX(sp2.login_time) AS login_time,
								MAX(sp2.last_batch) AS last_request_end_time,
								MAX(CONVERT(VARCHAR(30), RTRIM(sp2.status)) COLLATE Latin1_General_Bin2) AS status,
								MAX(CONVERT(VARCHAR(32), RTRIM(sp2.cmd)) COLLATE Latin1_General_Bin2) AS cmd,
								MAX(sp2.stmt_start) AS stmt_start,
								MAX(sp2.stmt_end) AS stmt_end,
								MAX(sp2.sql_handle) AS sql_handle,
								MAX(CONVERT(sysname, RTRIM(sp2.hostname)) COLLATE SQL_Latin1_General_CP1_CI_AS) AS host_name,
								MAX(CONVERT(sysname, RTRIM(sp2.loginame)) COLLATE SQL_Latin1_General_CP1_CI_AS) AS login_name,
								MAX
								(
									CASE
										WHEN blk.queue_id IS NOT NULL THEN
											N''Service Broker
												database_id: '' + CONVERT(NVARCHAR, blk.database_id) +
												N'' queue_id: '' + CONVERT(NVARCHAR, blk.queue_id)
										ELSE
											CONVERT
											(
												sysname,
												RTRIM(sp2.program_name)
											)
									END COLLATE SQL_Latin1_General_CP1_CI_AS
								) AS program_name,
								MAX(sp2.dbid) AS database_id,
								MAX(sp2.memusage) AS memory_usage,
								MAX(sp2.open_tran) AS open_tran_count,
								RTRIM(sp2.lastwaittype) AS wait_type,
								RTRIM(sp2.waitresource) AS wait_resource,
								MAX(sp2.waittime) AS wait_time,
								COALESCE(NULLIF(sp2.blocked, sp2.spid), 0) AS blocked,
								MAX
								(
									CASE
										WHEN blk.session_id = sp2.spid THEN
											''blocker''
										ELSE
											RTRIM(sp2.hostprocess)
									END
								) AS hostprocess,
								CONVERT
								(
									BIT,
									MAX
									(
										CASE
											WHEN sp2.hostprocess > '''' THEN
												1
											ELSE
												0
										END
									)
								) AS is_user_process
							FROM
							(
								SELECT TOP(@i)
									session_id,
									CONVERT(INT, NULL) AS queue_id,
									CONVERT(INT, NULL) AS database_id
								FROM @blockers

								UNION ALL

								SELECT TOP(@i)
									CONVERT(SMALLINT, 0),
									CONVERT(INT, NULL) AS queue_id,
									CONVERT(INT, NULL) AS database_id
								WHERE
									@blocker = 0

								UNION ALL

								SELECT TOP(@i)
									CONVERT(SMALLINT, spid),
									queue_id,
									database_id
								FROM sys.dm_broker_activated_tasks
								WHERE
									@blocker = 0
							) AS blk
							INNER JOIN sys.sysprocesses AS sp2 ON
								sp2.spid = blk.session_id
								OR
								(
									blk.session_id = 0
									AND @blocker = 0
								)
							' +
							CASE 
								WHEN 
								(
									@get_task_info = 0 
									AND @find_block_leaders = 0
								) THEN
									'WHERE
										sp2.ecid = 0 
									' 
								ELSE
									''
							END +
							'GROUP BY
								sp2.spid,
								CASE sp2.status
									WHEN ''sleeping'' THEN
										CONVERT(INT, 0)
									ELSE
										sp2.request_id
								END,
								RTRIM(sp2.lastwaittype),
								RTRIM(sp2.waitresource),
								COALESCE(NULLIF(sp2.blocked, sp2.spid), 0)
						) AS sp1
					) AS sp0
					WHERE
						@blocker = 1
						OR
						(1=1 
						' +
							--inclusive filter
							CASE
								WHEN @filter <> '' THEN
									CASE @filter_type
										WHEN 'session' THEN
											CASE
												WHEN CONVERT(SMALLINT, @filter) <> 0 THEN
													'AND sp0.session_id = CONVERT(SMALLINT, @filter) 
													'
												ELSE
													''
											END
										WHEN 'program' THEN
											'AND sp0.program_name LIKE @filter 
											'
										WHEN 'login' THEN
											'AND sp0.login_name LIKE @filter 
											'
										WHEN 'host' THEN
											'AND sp0.host_name LIKE @filter 
											'
										WHEN 'database' THEN
											'AND DB_NAME(sp0.database_id) LIKE @filter 
											'
										ELSE
											''
									END
								ELSE
									''
							END +
							--exclusive filter
							CASE
								WHEN @not_filter <> '' THEN
									CASE @not_filter_type
										WHEN 'session' THEN
											CASE
												WHEN CONVERT(SMALLINT, @not_filter) <> 0 THEN
													'AND sp0.session_id <> CONVERT(SMALLINT, @not_filter) 
													'
												ELSE
													''
											END
										WHEN 'program' THEN
											'AND sp0.program_name NOT LIKE @not_filter 
											'
										WHEN 'login' THEN
											'AND sp0.login_name NOT LIKE @not_filter 
											'
										WHEN 'host' THEN
											'AND sp0.host_name NOT LIKE @not_filter 
											'
										WHEN 'database' THEN
											'AND DB_NAME(sp0.database_id) NOT LIKE @not_filter 
											'
										ELSE
											''
									END
								ELSE
									''
							END +
							CASE @show_own_spid
								WHEN 1 THEN
									''
								ELSE
									'AND sp0.session_id <> @@spid 
									'
							END +
							CASE 
								WHEN @show_system_spids = 0 THEN
									'AND sp0.hostprocess > '''' 
									' 
								ELSE
									''
							END +
							CASE @show_sleeping_spids
								WHEN 0 THEN
									'AND sp0.status <> ''sleeping'' 
									'
								WHEN 1 THEN
									'AND
									(
										sp0.status <> ''sleeping''
										OR sp0.open_tran_count > 0
									)
									'
								ELSE
									''
							END +
						')
				) AS spx
			) AS spy
			WHERE
				spy.r = 1; 
			' + 
			CASE @recursion
				WHEN 1 THEN 
					'IF @@ROWCOUNT > 0
					BEGIN;
						INSERT @blockers
						(
							session_id
						)
						SELECT TOP(@i)
							blocked
						FROM @sessions
						WHERE
							NULLIF(blocked, 0) IS NOT NULL

						EXCEPT

						SELECT TOP(@i)
							session_id
						FROM @sessions; 
						' +

						CASE
							WHEN
							(
								@get_task_info > 0
								OR @find_block_leaders = 1
							) THEN
								'IF @@ROWCOUNT > 0
								BEGIN;
									SET @blocker = 1;
									GOTO BLOCKERS;
								END; 
								'
							ELSE 
								''
						END +
					'END; 
					'
				ELSE 
					''
			END +
			'SELECT TOP(@i)
				@recursion AS recursion,
				x.session_id,
				x.request_id,
				DENSE_RANK() OVER
				(
					ORDER BY
						x.session_id
				) AS session_number,
				' +
				CASE
					WHEN @output_column_list LIKE '%|[dd hh:mm:ss.mss|]%' ESCAPE '|' THEN 
						'x.elapsed_time '
					ELSE 
						'0 '
				END + 
					'AS elapsed_time, 
					' +
				CASE
					WHEN
						(
							@output_column_list LIKE '%|[dd hh:mm:ss.mss (avg)|]%' ESCAPE '|' OR 
							@output_column_list LIKE '%|[avg_elapsed_time|]%' ESCAPE '|'
						)
						AND @recursion = 1
							THEN 
								'x.avg_elapsed_time / 1000 '
					ELSE 
						'NULL '
				END + 
					'AS avg_elapsed_time, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[physical_io|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[physical_io_delta|]%' ESCAPE '|'
							THEN 
								'x.physical_io '
					ELSE 
						'NULL '
				END + 
					'AS physical_io, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[reads|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[reads_delta|]%' ESCAPE '|'
							THEN 
								'x.reads '
					ELSE 
						'0 '
				END + 
					'AS reads, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[physical_reads|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[physical_reads_delta|]%' ESCAPE '|'
							THEN 
								'x.physical_reads '
					ELSE 
						'0 '
				END + 
					'AS physical_reads, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[writes|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[writes_delta|]%' ESCAPE '|'
							THEN 
								'x.writes '
					ELSE 
						'0 '
				END + 
					'AS writes, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tempdb_allocations|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[tempdb_allocations_delta|]%' ESCAPE '|'
							THEN 
								'x.tempdb_allocations '
					ELSE 
						'0 '
				END + 
					'AS tempdb_allocations, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tempdb_current|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[tempdb_current_delta|]%' ESCAPE '|'
							THEN 
								'x.tempdb_current '
					ELSE 
						'0 '
				END + 
					'AS tempdb_current, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[CPU|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
							THEN
								'x.CPU '
					ELSE
						'0 '
				END + 
					'AS CPU, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
						AND @get_task_info = 2
						AND @sys_info = 1
							THEN 
								'x.thread_CPU_snapshot '
					ELSE 
						'0 '
				END + 
					'AS thread_CPU_snapshot, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[context_switches|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[context_switches_delta|]%' ESCAPE '|'
							THEN 
								'x.context_switches '
					ELSE 
						'NULL '
				END + 
					'AS context_switches, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[used_memory|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[used_memory_delta|]%' ESCAPE '|'
							THEN 
								'x.used_memory '
					ELSE 
						'0 '
				END + 
					'AS used_memory, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tasks|]%' ESCAPE '|'
						AND @recursion = 1
							THEN 
								'x.tasks '
					ELSE 
						'NULL '
				END + 
					'AS tasks, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[status|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
						)
						AND @recursion = 1
							THEN 
								'x.status '
					ELSE 
						''''' '
				END + 
					'AS status, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[wait_info|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								CASE @get_task_info
									WHEN 2 THEN
										'COALESCE(x.task_wait_info, x.sys_wait_info) '
									ELSE
										'x.sys_wait_info '
								END
					ELSE 
						'NULL '
				END + 
					'AS wait_info, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[tran_start_time|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[tran_log_writes|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.transaction_id '
					ELSE 
						'NULL '
				END + 
					'AS transaction_id, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[open_tran_count|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.open_tran_count '
					ELSE 
						'NULL '
				END + 
					'AS open_tran_count, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.sql_handle '
					ELSE 
						'NULL '
				END + 
					'AS sql_handle, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.statement_start_offset '
					ELSE 
						'NULL '
				END + 
					'AS statement_start_offset, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.statement_end_offset '
					ELSE 
						'NULL '
				END + 
					'AS statement_end_offset, 
					' +
				'NULL AS sql_text, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.plan_handle '
					ELSE 
						'NULL '
				END + 
					'AS plan_handle, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[blocking_session_id|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'NULLIF(x.blocking_session_id, 0) '
					ELSE 
						'NULL '
				END + 
					'AS blocking_session_id, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[percent_complete|]%' ESCAPE '|'
						AND @recursion = 1
							THEN 
								'x.percent_complete '
					ELSE 
						'NULL '
				END + 
					'AS percent_complete, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[host_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.host_name '
					ELSE 
						''''' '
				END + 
					'AS host_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[login_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.login_name '
					ELSE 
						''''' '
				END + 
					'AS login_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[database_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'DB_NAME(x.database_id) '
					ELSE 
						'NULL '
				END + 
					'AS database_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[program_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.program_name '
					ELSE 
						''''' '
				END + 
					'AS program_name, 
					' +
				CASE
					WHEN
						@output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
						AND @recursion = 1
							THEN
								'(
									SELECT TOP(@i)
										x.text_size,
										x.language,
										x.date_format,
										x.date_first,
										CASE x.quoted_identifier
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS quoted_identifier,
										CASE x.arithabort
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS arithabort,
										CASE x.ansi_null_dflt_on
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_null_dflt_on,
										CASE x.ansi_defaults
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_defaults,
										CASE x.ansi_warnings
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_warnings,
										CASE x.ansi_padding
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_padding,
										CASE ansi_nulls
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_nulls,
										CASE x.concat_null_yields_null
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS concat_null_yields_null,
										CASE x.transaction_isolation_level
											WHEN 0 THEN ''Unspecified''
											WHEN 1 THEN ''ReadUncomitted''
											WHEN 2 THEN ''ReadCommitted''
											WHEN 3 THEN ''Repeatable''
											WHEN 4 THEN ''Serializable''
											WHEN 5 THEN ''Snapshot''
										END AS transaction_isolation_level,
										x.lock_timeout,
										x.deadlock_priority,
										x.row_count,
										x.command_type, 
										' +
										CASE
											WHEN OBJECT_ID('master.dbo.fn_varbintohexstr') IS NOT NULL THEN
												'master.dbo.fn_varbintohexstr(x.sql_handle) AS sql_handle,
												master.dbo.fn_varbintohexstr(x.plan_handle) AS plan_handle,'
											ELSE
												'CONVERT(VARCHAR(256), x.sql_handle, 1) AS sql_handle,
												CONVERT(VARCHAR(256), x.plan_handle, 1) AS plan_handle,'
										END +
										'
										x.statement_start_offset,
										x.statement_end_offset,
										' +
										CASE
											WHEN @output_column_list LIKE '%|[program_name|]%' ESCAPE '|' THEN
												'(
													SELECT TOP(1)
														CONVERT(uniqueidentifier, CONVERT(XML, '''').value(''xs:hexBinary( substring(sql:column("agent_info.job_id_string"), 0) )'', ''binary(16)'')) AS job_id,
														agent_info.step_id,
														(
															SELECT TOP(1)
																NULL
															FOR XML
																PATH(''job_name''),
																TYPE
														),
														(
															SELECT TOP(1)
																NULL
															FOR XML
																PATH(''step_name''),
																TYPE
														)
													FROM
													(
														SELECT TOP(1)
															SUBSTRING(x.program_name, CHARINDEX(''0x'', x.program_name) + 2, 32) AS job_id_string,
															SUBSTRING(x.program_name, CHARINDEX('': Step '', x.program_name) + 7, CHARINDEX('')'', x.program_name, CHARINDEX('': Step '', x.program_name)) - (CHARINDEX('': Step '', x.program_name) + 7)) AS step_id
														WHERE
															x.program_name LIKE N''SQLAgent - TSQL JobStep (Job 0x%''
													) AS agent_info
													FOR XML
														PATH(''agent_job_info''),
														TYPE
												),
												'
											ELSE ''
										END +
										CASE
											WHEN @get_task_info = 2 THEN
												'CONVERT(XML, x.block_info) AS block_info, 
												'
											ELSE
												''
										END + '
										x.host_process_id,
										x.group_id
									FOR XML
										PATH(''additional_info''),
										TYPE
								) '
					ELSE
						'NULL '
				END + 
					'AS additional_info, 
				x.start_time, 
					' +
				CASE
					WHEN
						@output_column_list LIKE '%|[login_time|]%' ESCAPE '|'
						AND @recursion = 1
							THEN
								'x.login_time '
					ELSE 
						'NULL '
				END + 
					'AS login_time, 
				x.last_request_start_time
			FROM
			(
				SELECT TOP(@i)
					y.*,
					CASE
						WHEN DATEDIFF(hour, y.start_time, GETDATE()) > 576 THEN
							DATEDIFF(second, GETDATE(), y.start_time)
						ELSE DATEDIFF(ms, y.start_time, GETDATE())
					END AS elapsed_time,
					COALESCE(tempdb_info.tempdb_allocations, 0) AS tempdb_allocations,
					COALESCE
					(
						CASE
							WHEN tempdb_info.tempdb_current < 0 THEN 0
							ELSE tempdb_info.tempdb_current
						END,
						0
					) AS tempdb_current, 
					' +
					CASE
						WHEN 
							(
								@get_task_info <> 0
								OR @find_block_leaders = 1
							) THEN
								'N''('' + CONVERT(NVARCHAR, y.wait_duration_ms) + N''ms)'' +
									y.wait_type +
										CASE
											WHEN y.wait_type LIKE N''PAGE%LATCH_%'' THEN
												N'':'' +
												COALESCE(DB_NAME(CONVERT(INT, LEFT(y.resource_description, CHARINDEX(N'':'', y.resource_description) - 1))), N''(null)'') +
												N'':'' +
												SUBSTRING(y.resource_description, CHARINDEX(N'':'', y.resource_description) + 1, LEN(y.resource_description) - CHARINDEX(N'':'', REVERSE(y.resource_description)) - CHARINDEX(N'':'', y.resource_description)) +
												N''('' +
													CASE
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 1 OR
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) % 8088 = 0
																THEN 
																	N''PFS''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 2 OR
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) % 511232 = 0
																THEN 
																	N''GAM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 3 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 1) % 511232 = 0
																THEN
																	N''SGAM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 6 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 6) % 511232 = 0 
																THEN 
																	N''DCM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 7 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 7) % 511232 = 0 
																THEN 
																	N''BCM''
														ELSE 
															N''*''
													END +
												N'')''
											WHEN y.wait_type = N''CXPACKET'' THEN
												N'':'' + SUBSTRING(y.resource_description, CHARINDEX(N''nodeId'', y.resource_description) + 7, 4)
											WHEN y.wait_type LIKE N''LATCH[_]%'' THEN
												N'' ['' + LEFT(y.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', y.resource_description), 0), LEN(y.resource_description) + 1) - 1) + N'']''
											WHEN
												y.wait_type = N''OLEDB''
												AND y.resource_description LIKE N''%(SPID=%)'' THEN
													N''['' + LEFT(y.resource_description, CHARINDEX(N''(SPID='', y.resource_description) - 2) +
														N'':'' + SUBSTRING(y.resource_description, CHARINDEX(N''(SPID='', y.resource_description) + 6, CHARINDEX(N'')'', y.resource_description, (CHARINDEX(N''(SPID='', y.resource_description) + 6)) - (CHARINDEX(N''(SPID='', y.resource_description) + 6)) + '']''
											ELSE
												N''''
										END COLLATE Latin1_General_Bin2 AS sys_wait_info, 
										'
							ELSE
								''
						END +
						CASE
							WHEN @get_task_info = 2 THEN
								'tasks.physical_io,
								tasks.context_switches,
								tasks.tasks,
								tasks.block_info,
								tasks.wait_info AS task_wait_info,
								tasks.thread_CPU_snapshot,
								'
							ELSE
								'' 
					END +
					CASE 
						WHEN NOT (@get_avg_time = 1 AND @recursion = 1) THEN
							'CONVERT(INT, NULL) '
						ELSE 
							'qs.total_elapsed_time / qs.execution_count '
					END + 
						'AS avg_elapsed_time 
				FROM
				(
					SELECT TOP(@i)
						sp.session_id,
						sp.request_id,
						COALESCE(r.logical_reads, s.logical_reads) AS reads,
						COALESCE(r.reads, s.reads) AS physical_reads,
						COALESCE(r.writes, s.writes) AS writes,
						COALESCE(r.CPU_time, s.CPU_time) AS CPU,
						sp.memory_usage + COALESCE(r.granted_query_memory, 0) AS used_memory,
						LOWER(sp.status) AS status,
						COALESCE(r.sql_handle, sp.sql_handle) AS sql_handle,
						COALESCE(r.statement_start_offset, sp.statement_start_offset) AS statement_start_offset,
						COALESCE(r.statement_end_offset, sp.statement_end_offset) AS statement_end_offset,
						' +
						CASE
							WHEN 
							(
								@get_task_info <> 0
								OR @find_block_leaders = 1 
							) THEN
								'sp.wait_type COLLATE Latin1_General_Bin2 AS wait_type,
								sp.wait_resource COLLATE Latin1_General_Bin2 AS resource_description,
								sp.wait_time AS wait_duration_ms, 
								'
							ELSE
								''
						END +
						'NULLIF(sp.blocked, 0) AS blocking_session_id,
						r.plan_handle,
						NULLIF(r.percent_complete, 0) AS percent_complete,
						sp.host_name,
						sp.login_name,
						sp.program_name,
						s.host_process_id,
						COALESCE(r.text_size, s.text_size) AS text_size,
						COALESCE(r.language, s.language) AS language,
						COALESCE(r.date_format, s.date_format) AS date_format,
						COALESCE(r.date_first, s.date_first) AS date_first,
						COALESCE(r.quoted_identifier, s.quoted_identifier) AS quoted_identifier,
						COALESCE(r.arithabort, s.arithabort) AS arithabort,
						COALESCE(r.ansi_null_dflt_on, s.ansi_null_dflt_on) AS ansi_null_dflt_on,
						COALESCE(r.ansi_defaults, s.ansi_defaults) AS ansi_defaults,
						COALESCE(r.ansi_warnings, s.ansi_warnings) AS ansi_warnings,
						COALESCE(r.ansi_padding, s.ansi_padding) AS ansi_padding,
						COALESCE(r.ansi_nulls, s.ansi_nulls) AS ansi_nulls,
						COALESCE(r.concat_null_yields_null, s.concat_null_yields_null) AS concat_null_yields_null,
						COALESCE(r.transaction_isolation_level, s.transaction_isolation_level) AS transaction_isolation_level,
						COALESCE(r.lock_timeout, s.lock_timeout) AS lock_timeout,
						COALESCE(r.deadlock_priority, s.deadlock_priority) AS deadlock_priority,
						COALESCE(r.row_count, s.row_count) AS row_count,
						COALESCE(r.command, sp.cmd) AS command_type,
						COALESCE
						(
							CASE
								WHEN
								(
									s.is_user_process = 0
									AND r.total_elapsed_time >= 0
								) THEN
									DATEADD
									(
										ms,
										1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())),
										DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
									)
							END,
							NULLIF(COALESCE(r.start_time, sp.last_request_end_time), CONVERT(DATETIME, ''19000101'', 112)),
							sp.login_time
						) AS start_time,
						sp.login_time,
						CASE
							WHEN s.is_user_process = 1 THEN
								s.last_request_start_time
							ELSE
								COALESCE
								(
									DATEADD
									(
										ms,
										1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())),
										DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
									),
									s.last_request_start_time
								)
						END AS last_request_start_time,
						r.transaction_id,
						sp.database_id,
						sp.open_tran_count,
						' +
							CASE
								WHEN EXISTS
								(
									SELECT
										*
									FROM sys.all_columns AS ac
									WHERE
										ac.object_id = OBJECT_ID('sys.dm_exec_sessions')
										AND ac.name = 'group_id'
								)
									THEN 's.group_id'
								ELSE 'CONVERT(INT, NULL) AS group_id'
							END + '
					FROM @sessions AS sp
					LEFT OUTER LOOP JOIN sys.dm_exec_sessions AS s ON
						s.session_id = sp.session_id
						AND s.login_time = sp.login_time
					LEFT OUTER LOOP JOIN sys.dm_exec_requests AS r ON
						sp.status <> ''sleeping''
						AND r.session_id = sp.session_id
						AND r.request_id = sp.request_id
						AND
						(
							(
								s.is_user_process = 0
								AND sp.is_user_process = 0
							)
							OR
							(
								r.start_time = s.last_request_start_time
								AND s.last_request_end_time <= sp.last_request_end_time
							)
						)
				) AS y
				' + 
				CASE 
					WHEN @get_task_info = 2 THEN
						CONVERT(VARCHAR(MAX), '') +
						'LEFT OUTER HASH JOIN
						(
							SELECT TOP(@i)
								task_nodes.task_node.value(''(session_id/text())[1]'', ''SMALLINT'') AS session_id,
								task_nodes.task_node.value(''(request_id/text())[1]'', ''INT'') AS request_id,
								task_nodes.task_node.value(''(physical_io/text())[1]'', ''BIGINT'') AS physical_io,
								task_nodes.task_node.value(''(context_switches/text())[1]'', ''BIGINT'') AS context_switches,
								task_nodes.task_node.value(''(tasks/text())[1]'', ''INT'') AS tasks,
								task_nodes.task_node.value(''(block_info/text())[1]'', ''NVARCHAR(4000)'') AS block_info,
								task_nodes.task_node.value(''(waits/text())[1]'', ''NVARCHAR(4000)'') AS wait_info,
								task_nodes.task_node.value(''(thread_CPU_snapshot/text())[1]'', ''BIGINT'') AS thread_CPU_snapshot
							FROM
							(
								SELECT TOP(@i)
									CONVERT
									(
										XML,
										REPLACE
										(
											CONVERT(NVARCHAR(MAX), tasks_raw.task_xml_raw) COLLATE Latin1_General_Bin2,
											N''</waits></tasks><tasks><waits>'',
											N'', ''
										)
									) AS task_xml
								FROM
								(
									SELECT TOP(@i)
										CASE waits.r
											WHEN 1 THEN
												waits.session_id
											ELSE
												NULL
										END AS [session_id],
										CASE waits.r
											WHEN 1 THEN
												waits.request_id
											ELSE
												NULL
										END AS [request_id],											
										CASE waits.r
											WHEN 1 THEN
												waits.physical_io
											ELSE
												NULL
										END AS [physical_io],
										CASE waits.r
											WHEN 1 THEN
												waits.context_switches
											ELSE
												NULL
										END AS [context_switches],
										CASE waits.r
											WHEN 1 THEN
												waits.thread_CPU_snapshot
											ELSE
												NULL
										END AS [thread_CPU_snapshot],
										CASE waits.r
											WHEN 1 THEN
												waits.tasks
											ELSE
												NULL
										END AS [tasks],
										CASE waits.r
											WHEN 1 THEN
												waits.block_info
											ELSE
												NULL
										END AS [block_info],
										REPLACE
										(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												CONVERT
												(
													NVARCHAR(MAX),
													N''('' +
														CONVERT(NVARCHAR, num_waits) + N''x: '' +
														CASE num_waits
															WHEN 1 THEN
																CONVERT(NVARCHAR, min_wait_time) + N''ms''
															WHEN 2 THEN
																CASE
																	WHEN min_wait_time <> max_wait_time THEN
																		CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms''
																	ELSE
																		CONVERT(NVARCHAR, max_wait_time) + N''ms''
																END
															ELSE
																CASE
																	WHEN min_wait_time <> max_wait_time THEN
																		CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, avg_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms''
																	ELSE 
																		CONVERT(NVARCHAR, max_wait_time) + N''ms''
																END
														END +
													N'')'' + wait_type COLLATE Latin1_General_Bin2
												),
												NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
												NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
												NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
											NCHAR(0),
											N''''
										) AS [waits]
									FROM
									(
										SELECT TOP(@i)
											w1.*,
											ROW_NUMBER() OVER
											(
												PARTITION BY
													w1.session_id,
													w1.request_id
												ORDER BY
													w1.block_info DESC,
													w1.num_waits DESC,
													w1.wait_type
											) AS r
										FROM
										(
											SELECT TOP(@i)
												task_info.session_id,
												task_info.request_id,
												task_info.physical_io,
												task_info.context_switches,
												task_info.thread_CPU_snapshot,
												task_info.num_tasks AS tasks,
												CASE
													WHEN task_info.runnable_time IS NOT NULL THEN
														''RUNNABLE''
													ELSE
														wt2.wait_type
												END AS wait_type,
												NULLIF(COUNT(COALESCE(task_info.runnable_time, wt2.waiting_task_address)), 0) AS num_waits,
												MIN(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS min_wait_time,
												AVG(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS avg_wait_time,
												MAX(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS max_wait_time,
												MAX(wt2.block_info) AS block_info
											FROM
											(
												SELECT TOP(@i)
													t.session_id,
													t.request_id,
													SUM(CONVERT(BIGINT, t.pending_io_count)) OVER (PARTITION BY t.session_id, t.request_id) AS physical_io,
													SUM(CONVERT(BIGINT, t.context_switches_count)) OVER (PARTITION BY t.session_id, t.request_id) AS context_switches, 
													' +
													CASE
														WHEN 
															@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
															AND @sys_info = 1
															THEN
																'SUM(tr.usermode_time + tr.kernel_time) OVER (PARTITION BY t.session_id, t.request_id) '
														ELSE
															'CONVERT(BIGINT, NULL) '
													END + 
														' AS thread_CPU_snapshot, 
													COUNT(*) OVER (PARTITION BY t.session_id, t.request_id) AS num_tasks,
													t.task_address,
													t.task_state,
													CASE
														WHEN
															t.task_state = ''RUNNABLE''
															AND w.runnable_time > 0 THEN
																w.runnable_time
														ELSE
															NULL
													END AS runnable_time
												FROM sys.dm_os_tasks AS t
												CROSS APPLY
												(
													SELECT TOP(1)
														sp2.session_id
													FROM @sessions AS sp2
													WHERE
														sp2.session_id = t.session_id
														AND sp2.request_id = t.request_id
														AND sp2.status <> ''sleeping''
												) AS sp20
												LEFT OUTER HASH JOIN
												( 
												' +
													CASE
														WHEN @sys_info = 1 THEN
															'SELECT TOP(@i)
																(
																	SELECT TOP(@i)
																		ms_ticks
																	FROM sys.dm_os_sys_info
																) -
																	w0.wait_resumed_ms_ticks AS runnable_time,
																w0.worker_address,
																w0.thread_address,
																w0.task_bound_ms_ticks
															FROM sys.dm_os_workers AS w0
															WHERE
																w0.state = ''RUNNABLE''
																OR @first_collection_ms_ticks >= w0.task_bound_ms_ticks'
														ELSE
															'SELECT
																CONVERT(BIGINT, NULL) AS runnable_time,
																CONVERT(VARBINARY(8), NULL) AS worker_address,
																CONVERT(VARBINARY(8), NULL) AS thread_address,
																CONVERT(BIGINT, NULL) AS task_bound_ms_ticks
															WHERE
																1 = 0'
														END +
												'
												) AS w ON
													w.worker_address = t.worker_address 
												' +
												CASE
													WHEN
														@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
														AND @sys_info = 1
														THEN
															'LEFT OUTER HASH JOIN sys.dm_os_threads AS tr ON
																tr.thread_address = w.thread_address
																AND @first_collection_ms_ticks >= w.task_bound_ms_ticks
															'
													ELSE
														''
												END +
											') AS task_info
											LEFT OUTER HASH JOIN
											(
												SELECT TOP(@i)
													wt1.wait_type,
													wt1.waiting_task_address,
													MAX(wt1.wait_duration_ms) AS wait_duration_ms,
													MAX(wt1.block_info) AS block_info
												FROM
												(
													SELECT DISTINCT TOP(@i)
														wt.wait_type +
															CASE
																WHEN wt.wait_type LIKE N''PAGE%LATCH_%'' THEN
																	'':'' +
																	COALESCE(DB_NAME(CONVERT(INT, LEFT(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) - 1))), N''(null)'') +
																	N'':'' +
																	SUBSTRING(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) + 1, LEN(wt.resource_description) - CHARINDEX(N'':'', REVERSE(wt.resource_description)) - CHARINDEX(N'':'', wt.resource_description)) +
																	N''('' +
																		CASE
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 1 OR
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 8088 = 0
																					THEN 
																						N''PFS''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 2 OR
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511232 = 0 
																					THEN 
																						N''GAM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 3 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 1) % 511232 = 0 
																					THEN 
																						N''SGAM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 6 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 6) % 511232 = 0 
																					THEN 
																						N''DCM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 7 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 7) % 511232 = 0
																					THEN 
																						N''BCM''
																			ELSE
																				N''*''
																		END +
																	N'')''
																WHEN wt.wait_type = N''CXPACKET'' THEN
																	N'':'' + SUBSTRING(wt.resource_description, CHARINDEX(N''nodeId'', wt.resource_description) + 7, 4)
																WHEN wt.wait_type LIKE N''LATCH[_]%'' THEN
																	N'' ['' + LEFT(wt.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description), 0), LEN(wt.resource_description) + 1) - 1) + N'']''
																ELSE 
																	N''''
															END COLLATE Latin1_General_Bin2 AS wait_type,
														CASE
															WHEN
															(
																wt.blocking_session_id IS NOT NULL
																AND wt.wait_type LIKE N''LCK[_]%''
															) THEN
																(
																	SELECT TOP(@i)
																		x.lock_type,
																		REPLACE
																		(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																				DB_NAME
																				(
																					CONVERT
																					(
																						INT,
																						SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''dbid='', wt.resource_description), 0) + 5, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''dbid='', wt.resource_description) + 5), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''dbid='', wt.resource_description) - 5)
																					)
																				),
																				NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
																				NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
																				NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
																			NCHAR(0),
																			N''''
																		) AS database_name,
																		CASE x.lock_type
																			WHEN N''objectlock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''objid='', wt.resource_description), 0) + 6, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''objid='', wt.resource_description) + 6), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''objid='', wt.resource_description) - 6)
																			ELSE
																				NULL
																		END AS object_id,
																		CASE x.lock_type
																			WHEN N''filelock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''fileid='', wt.resource_description), 0) + 7, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''fileid='', wt.resource_description) + 7), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''fileid='', wt.resource_description) - 7)
																			ELSE
																				NULL
																		END AS file_id,
																		CASE
																			WHEN x.lock_type in (N''pagelock'', N''extentlock'', N''ridlock'') THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''associatedObjectId='', wt.resource_description), 0) + 19, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''associatedObjectId='', wt.resource_description) + 19), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''associatedObjectId='', wt.resource_description) - 19)
																			WHEN x.lock_type in (N''keylock'', N''hobtlock'', N''allocunitlock'') THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''hobtid='', wt.resource_description), 0) + 7, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''hobtid='', wt.resource_description) + 7), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''hobtid='', wt.resource_description) - 7)
																			ELSE
																				NULL
																		END AS hobt_id,
																		CASE x.lock_type
																			WHEN N''applicationlock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''hash='', wt.resource_description), 0) + 5, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''hash='', wt.resource_description) + 5), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''hash='', wt.resource_description) - 5)
																			ELSE
																				NULL
																		END AS applock_hash,
																		CASE x.lock_type
																			WHEN N''metadatalock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''subresource='', wt.resource_description), 0) + 12, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''subresource='', wt.resource_description) + 12), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''subresource='', wt.resource_description) - 12)
																			ELSE
																				NULL
																		END AS metadata_resource,
																		CASE x.lock_type
																			WHEN N''metadatalock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''classid='', wt.resource_description), 0) + 8, COALESCE(NULLIF(CHARINDEX(N'' dbid='', wt.resource_description) - CHARINDEX(N''classid='', wt.resource_description), 0), LEN(wt.resource_description) + 1) - 8)
																			ELSE
																				NULL
																		END AS metadata_class_id
																	FROM
																	(
																		SELECT TOP(1)
																			LEFT(wt.resource_description, CHARINDEX(N'' '', wt.resource_description) - 1) COLLATE Latin1_General_Bin2 AS lock_type
																	) AS x
																	FOR XML
																		PATH('''')
																)
															ELSE NULL
														END AS block_info,
														wt.wait_duration_ms,
														wt.waiting_task_address
													FROM
													(
														SELECT TOP(@i)
															wt0.wait_type COLLATE Latin1_General_Bin2 AS wait_type,
															wt0.resource_description COLLATE Latin1_General_Bin2 AS resource_description,
															wt0.wait_duration_ms,
															wt0.waiting_task_address,
															CASE
																WHEN wt0.blocking_session_id = p.blocked THEN
																	wt0.blocking_session_id
																ELSE
																	NULL
															END AS blocking_session_id
														FROM sys.dm_os_waiting_tasks AS wt0
														CROSS APPLY
														(
															SELECT TOP(1)
																s0.blocked
															FROM @sessions AS s0
															WHERE
																s0.session_id = wt0.session_id
																AND COALESCE(s0.wait_type, N'''') <> N''OLEDB''
																AND wt0.wait_type <> N''OLEDB''
														) AS p
													) AS wt
												) AS wt1
												GROUP BY
													wt1.wait_type,
													wt1.waiting_task_address
											) AS wt2 ON
												wt2.waiting_task_address = task_info.task_address
												AND wt2.wait_duration_ms > 0
												AND task_info.runnable_time IS NULL
											GROUP BY
												task_info.session_id,
												task_info.request_id,
												task_info.physical_io,
												task_info.context_switches,
												task_info.thread_CPU_snapshot,
												task_info.num_tasks,
												CASE
													WHEN task_info.runnable_time IS NOT NULL THEN
														''RUNNABLE''
													ELSE
														wt2.wait_type
												END
										) AS w1
									) AS waits
									ORDER BY
										waits.session_id,
										waits.request_id,
										waits.r
									FOR XML
										PATH(N''tasks''),
										TYPE
								) AS tasks_raw (task_xml_raw)
							) AS tasks_final
							CROSS APPLY tasks_final.task_xml.nodes(N''/tasks'') AS task_nodes (task_node)
							WHERE
								task_nodes.task_node.exist(N''session_id'') = 1
						) AS tasks ON
							tasks.session_id = y.session_id
							AND tasks.request_id = y.request_id 
						'
					ELSE
						''
				END +
				'LEFT OUTER HASH JOIN
				(
					SELECT TOP(@i)
						t_info.session_id,
						COALESCE(t_info.request_id, -1) AS request_id,
						SUM(t_info.tempdb_allocations) AS tempdb_allocations,
						SUM(t_info.tempdb_current) AS tempdb_current
					FROM
					(
						SELECT TOP(@i)
							tsu.session_id,
							tsu.request_id,
							tsu.user_objects_alloc_page_count +
								tsu.internal_objects_alloc_page_count AS tempdb_allocations,
							tsu.user_objects_alloc_page_count +
								tsu.internal_objects_alloc_page_count -
								tsu.user_objects_dealloc_page_count -
								tsu.internal_objects_dealloc_page_count AS tempdb_current
						FROM sys.dm_db_task_space_usage AS tsu
						CROSS APPLY
						(
							SELECT TOP(1)
								s0.session_id
							FROM @sessions AS s0
							WHERE
								s0.session_id = tsu.session_id
						) AS p

						UNION ALL

						SELECT TOP(@i)
							ssu.session_id,
							NULL AS request_id,
							ssu.user_objects_alloc_page_count +
								ssu.internal_objects_alloc_page_count AS tempdb_allocations,
							ssu.user_objects_alloc_page_count +
								ssu.internal_objects_alloc_page_count -
								ssu.user_objects_dealloc_page_count -
								ssu.internal_objects_dealloc_page_count AS tempdb_current
						FROM sys.dm_db_session_space_usage AS ssu
						CROSS APPLY
						(
							SELECT TOP(1)
								s0.session_id
							FROM @sessions AS s0
							WHERE
								s0.session_id = ssu.session_id
						) AS p
					) AS t_info
					GROUP BY
						t_info.session_id,
						COALESCE(t_info.request_id, -1)
				) AS tempdb_info ON
					tempdb_info.session_id = y.session_id
					AND tempdb_info.request_id =
						CASE
							WHEN y.status = N''sleeping'' THEN
								-1
							ELSE
								y.request_id
						END
				' +
				CASE 
					WHEN 
						NOT 
						(
							@get_avg_time = 1 
							AND @recursion = 1
						) THEN 
							''
					ELSE
						'LEFT OUTER HASH JOIN
						(
							SELECT TOP(@i)
								*
							FROM sys.dm_exec_query_stats
						) AS qs ON
							qs.sql_handle = y.sql_handle
							AND qs.plan_handle = y.plan_handle
							AND qs.statement_start_offset = y.statement_start_offset
							AND qs.statement_end_offset = y.statement_end_offset
						'
				END + 
			') AS x
			OPTION (KEEPFIXED PLAN, OPTIMIZE FOR (@i = 1)); ';

		SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

		SET @last_collection_start = GETDATE();

		IF 
			@recursion = -1
			AND @sys_info = 1
		BEGIN;
			SELECT
				@first_collection_ms_ticks = ms_ticks
			FROM sys.dm_os_sys_info;
		END;

		INSERT #sessions
		(
			recursion,
			session_id,
			request_id,
			session_number,
			elapsed_time,
			avg_elapsed_time,
			physical_io,
			reads,
			physical_reads,
			writes,
			tempdb_allocations,
			tempdb_current,
			CPU,
			thread_CPU_snapshot,
			context_switches,
			used_memory,
			tasks,
			status,
			wait_info,
			transaction_id,
			open_tran_count,
			sql_handle,
			statement_start_offset,
			statement_end_offset,		
			sql_text,
			plan_handle,
			blocking_session_id,
			percent_complete,
			host_name,
			login_name,
			database_name,
			program_name,
			additional_info,
			start_time,
			login_time,
			last_request_start_time
		)
		EXEC sp_executesql 
			@sql_n,
			N'@recursion SMALLINT, @filter sysname, @not_filter sysname, @first_collection_ms_ticks BIGINT',
			@recursion, @filter, @not_filter, @first_collection_ms_ticks;

		--Collect transaction information?
		IF
			@recursion = 1
			AND
			(
				@output_column_list LIKE '%|[tran_start_time|]%' ESCAPE '|'
				OR @output_column_list LIKE '%|[tran_log_writes|]%' ESCAPE '|' 
			)
		BEGIN;	
			DECLARE @i INT;
			SET @i = 2147483647;

			UPDATE s
			SET
				tran_start_time =
					CONVERT
					(
						DATETIME,
						LEFT
						(
							x.trans_info,
							NULLIF(CHARINDEX(NCHAR(254) COLLATE Latin1_General_Bin2, x.trans_info) - 1, -1)
						),
						121
					),
				tran_log_writes =
					RIGHT
					(
						x.trans_info,
						LEN(x.trans_info) - CHARINDEX(NCHAR(254) COLLATE Latin1_General_Bin2, x.trans_info)
					)
			FROM
			(
				SELECT TOP(@i)
					trans_nodes.trans_node.value('(session_id/text())[1]', 'SMALLINT') AS session_id,
					COALESCE(trans_nodes.trans_node.value('(request_id/text())[1]', 'INT'), 0) AS request_id,
					trans_nodes.trans_node.value('(trans_info/text())[1]', 'NVARCHAR(4000)') AS trans_info				
				FROM
				(
					SELECT TOP(@i)
						CONVERT
						(
							XML,
							REPLACE
							(
								CONVERT(NVARCHAR(MAX), trans_raw.trans_xml_raw) COLLATE Latin1_General_Bin2, 
								N'</trans_info></trans><trans><trans_info>', N''
							)
						)
					FROM
					(
						SELECT TOP(@i)
							CASE u_trans.r
								WHEN 1 THEN u_trans.session_id
								ELSE NULL
							END AS [session_id],
							CASE u_trans.r
								WHEN 1 THEN u_trans.request_id
								ELSE NULL
							END AS [request_id],
							CONVERT
							(
								NVARCHAR(MAX),
								CASE
									WHEN u_trans.database_id IS NOT NULL THEN
										CASE u_trans.r
											WHEN 1 THEN COALESCE(CONVERT(NVARCHAR, u_trans.transaction_start_time, 121) + NCHAR(254), N'')
											ELSE N''
										END + 
											REPLACE
											(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
													CONVERT(VARCHAR(128), COALESCE(DB_NAME(u_trans.database_id), N'(null)')),
													NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
													NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
													NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
												NCHAR(0),
												N'?'
											) +
											N': ' +
										CONVERT(NVARCHAR, u_trans.log_record_count) + N' (' + CONVERT(NVARCHAR, u_trans.log_kb_used) + N' kB)' +
										N','
									ELSE
										N'N/A,'
								END COLLATE Latin1_General_Bin2
							) AS [trans_info]
						FROM
						(
							SELECT TOP(@i)
								trans.*,
								ROW_NUMBER() OVER
								(
									PARTITION BY
										trans.session_id,
										trans.request_id
									ORDER BY
										trans.transaction_start_time DESC
								) AS r
							FROM
							(
								SELECT TOP(@i)
									session_tran_map.session_id,
									session_tran_map.request_id,
									s_tran.database_id,
									COALESCE(SUM(s_tran.database_transaction_log_record_count), 0) AS log_record_count,
									COALESCE(SUM(s_tran.database_transaction_log_bytes_used), 0) / 1024 AS log_kb_used,
									MIN(s_tran.database_transaction_begin_time) AS transaction_start_time
								FROM
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_active_transactions
									WHERE
										transaction_begin_time <= @last_collection_start
								) AS a_tran
								INNER HASH JOIN
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_database_transactions
									WHERE
										database_id < 32767
								) AS s_tran ON
									s_tran.transaction_id = a_tran.transaction_id
								LEFT OUTER HASH JOIN
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_session_transactions
								) AS tst ON
									s_tran.transaction_id = tst.transaction_id
								CROSS APPLY
								(
									SELECT TOP(1)
										s3.session_id,
										s3.request_id
									FROM
									(
										SELECT TOP(1)
											s1.session_id,
											s1.request_id
										FROM #sessions AS s1
										WHERE
											s1.transaction_id = s_tran.transaction_id
											AND s1.recursion = 1
											
										UNION ALL
									
										SELECT TOP(1)
											s2.session_id,
											s2.request_id
										FROM #sessions AS s2
										WHERE
											s2.session_id = tst.session_id
											AND s2.recursion = 1
									) AS s3
									ORDER BY
										s3.request_id
								) AS session_tran_map
								GROUP BY
									session_tran_map.session_id,
									session_tran_map.request_id,
									s_tran.database_id
							) AS trans
						) AS u_trans
						FOR XML
							PATH('trans'),
							TYPE
					) AS trans_raw (trans_xml_raw)
				) AS trans_final (trans_xml)
				CROSS APPLY trans_final.trans_xml.nodes('/trans') AS trans_nodes (trans_node)
			) AS x
			INNER HASH JOIN #sessions AS s ON
				s.session_id = x.session_id
				AND s.request_id = x.request_id
			OPTION (OPTIMIZE FOR (@i = 1));
		END;

		--Variables for text and plan collection
		DECLARE	
			@session_id SMALLINT,
			@request_id INT,
			@sql_handle VARBINARY(64),
			@plan_handle VARBINARY(64),
			@statement_start_offset INT,
			@statement_end_offset INT,
			@start_time DATETIME,
			@database_name sysname;

		IF 
			@recursion = 1
			AND @output_column_list LIKE '%|[sql_text|]%' ESCAPE '|'
		BEGIN;
			DECLARE sql_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					request_id,
					sql_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
					AND sql_handle IS NOT NULL
			OPTION (KEEPFIXED PLAN);

			OPEN sql_cursor;

			FETCH NEXT FROM sql_cursor
			INTO 
				@session_id,
				@request_id,
				@sql_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for the SQL text, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					UPDATE s
					SET
						s.sql_text =
						(
							SELECT
								REPLACE
								(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										N'--' + NCHAR(13) + NCHAR(10) +
										CASE 
											WHEN @get_full_inner_text = 1 THEN est.text
											WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN est.text
											WHEN SUBSTRING(est.text, (@statement_start_offset/2), 2) LIKE N'[a-zA-Z0-9][a-zA-Z0-9]' THEN est.text
											ELSE
												CASE
													WHEN @statement_start_offset > 0 THEN
														SUBSTRING
														(
															est.text,
															((@statement_start_offset/2) + 1),
															(
																CASE
																	WHEN @statement_end_offset = -1 THEN 2147483647
																	ELSE ((@statement_end_offset - @statement_start_offset)/2) + 1
																END
															)
														)
													ELSE RTRIM(LTRIM(est.text))
												END
										END +
										NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2,
										NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
										NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
										NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
									NCHAR(0),
									N''
								) AS [processing-instruction(query)]
							FOR XML
								PATH(''),
								TYPE
						),
						s.statement_start_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN 0
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN 0
								ELSE @statement_start_offset
							END,
						s.statement_end_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN -1
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN -1
								ELSE @statement_end_offset
							END
					FROM 
						#sessions AS s,
						(
							SELECT TOP(1)
								text
							FROM
							(
								SELECT 
									text, 
									0 AS row_num
								FROM sys.dm_exec_sql_text(@sql_handle)
								
								UNION ALL
								
								SELECT 
									NULL,
									1 AS row_num
							) AS est0
							ORDER BY
								row_num
						) AS est
					WHERE 
						s.session_id = @session_id
						AND s.request_id = @request_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END TRY
				BEGIN CATCH;
					UPDATE s
					SET
						s.sql_text = 
							CASE ERROR_NUMBER() 
								WHEN 1222 THEN '<timeout_exceeded />'
								ELSE '<error message="' + ERROR_MESSAGE() + '" />'
							END
					FROM #sessions AS s
					WHERE 
						s.session_id = @session_id
						AND s.request_id = @request_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM sql_cursor
				INTO
					@session_id,
					@request_id,
					@sql_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE sql_cursor;
			DEALLOCATE sql_cursor;
		END;

		IF 
			@get_outer_command = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
		BEGIN;
			DECLARE @buffer_results TABLE
			(
				EventType VARCHAR(30),
				Parameters INT,
				EventInfo NVARCHAR(4000),
				start_time DATETIME,
				session_number INT IDENTITY(1,1) NOT NULL PRIMARY KEY
			);

			DECLARE buffer_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					MAX(start_time) AS start_time
				FROM #sessions
				WHERE
					recursion = 1
				GROUP BY
					session_id
				ORDER BY
					session_id
				OPTION (KEEPFIXED PLAN);

			OPEN buffer_cursor;

			FETCH NEXT FROM buffer_cursor
			INTO 
				@session_id,
				@start_time;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					--In SQL Server 2008, DBCC INPUTBUFFER will throw 
					--an exception if the session no longer exists
					INSERT @buffer_results
					(
						EventType,
						Parameters,
						EventInfo
					)
					EXEC sp_executesql
						N'DBCC INPUTBUFFER(@session_id) WITH NO_INFOMSGS;',
						N'@session_id SMALLINT',
						@session_id;

					UPDATE br
					SET
						br.start_time = @start_time
					FROM @buffer_results AS br
					WHERE
						br.session_number = 
						(
							SELECT MAX(br2.session_number)
							FROM @buffer_results br2
						);
				END TRY
				BEGIN CATCH
				END CATCH;

				FETCH NEXT FROM buffer_cursor
				INTO 
					@session_id,
					@start_time;
			END;

			UPDATE s
			SET
				sql_command = 
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX),
									N'--' + NCHAR(13) + NCHAR(10) + br.EventInfo + NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [processing-instruction(query)]
					FROM @buffer_results AS br
					WHERE 
						br.session_number = s.session_number
						AND br.start_time = s.start_time
						AND 
						(
							(
								s.start_time = s.last_request_start_time
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_requests r2
									WHERE
										r2.session_id = s.session_id
										AND r2.request_id = s.request_id
										AND r2.start_time = s.start_time
								)
							)
							OR 
							(
								s.request_id = 0
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_sessions s2
									WHERE
										s2.session_id = s.session_id
										AND s2.last_request_start_time = s.last_request_start_time
								)
							)
						)
					FOR XML
						PATH(''),
						TYPE
				)
			FROM #sessions AS s
			WHERE
				recursion = 1
			OPTION (KEEPFIXED PLAN);

			CLOSE buffer_cursor;
			DEALLOCATE buffer_cursor;
		END;

		IF 
			@get_plans >= 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|'
		BEGIN;
			DECLARE @live_plan BIT;
			SET @live_plan = ISNULL(CONVERT(BIT, SIGN(OBJECT_ID('sys.dm_exec_query_statistics_xml'))), 0)

			DECLARE plan_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT
					session_id,
					request_id,
					plan_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
					AND plan_handle IS NOT NULL
			OPTION (KEEPFIXED PLAN);

			OPEN plan_cursor;

			FETCH NEXT FROM plan_cursor
			INTO 
				@session_id,
				@request_id,
				@plan_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for a query plan, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				DECLARE @query_plan XML;
				SET @query_plan = NULL;

				IF @live_plan = 1
				BEGIN;
					BEGIN TRY;
						SELECT
							@query_plan = x.query_plan
						FROM sys.dm_exec_query_statistics_xml(@session_id) AS x;

						IF 
							@query_plan IS NOT NULL
							AND EXISTS
							(
								SELECT
									*
								FROM sys.dm_exec_requests AS r
								WHERE
									r.session_id = @session_id
									AND r.request_id = @request_id
									AND r.plan_handle = @plan_handle
									AND r.statement_start_offset = @statement_start_offset
									AND r.statement_end_offset = @statement_end_offset
							)
						BEGIN;
							UPDATE s
							SET
								s.query_plan = @query_plan
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
					END TRY
					BEGIN CATCH;
						SET @query_plan = NULL;
					END CATCH;
				END;

				IF @query_plan IS NULL
				BEGIN;
					BEGIN TRY;
						UPDATE s
						SET
							s.query_plan =
							(
								SELECT
									CONVERT(xml, query_plan)
								FROM sys.dm_exec_text_query_plan
								(
									@plan_handle, 
									CASE @get_plans
										WHEN 1 THEN
											@statement_start_offset
										ELSE
											0
									END, 
									CASE @get_plans
										WHEN 1 THEN
											@statement_end_offset
										ELSE
											-1
									END
								)
							)
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.request_id = @request_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
					END TRY
					BEGIN CATCH;
						IF ERROR_NUMBER() = 6335
						BEGIN;
							UPDATE s
							SET
								s.query_plan =
								(
									SELECT
										N'--' + NCHAR(13) + NCHAR(10) + 
										N'-- Could not render showplan due to XML data type limitations. ' + NCHAR(13) + NCHAR(10) + 
										N'-- To see the graphical plan save the XML below as a .SQLPLAN file and re-open in SSMS.' + NCHAR(13) + NCHAR(10) +
										N'--' + NCHAR(13) + NCHAR(10) +
											REPLACE(qp.query_plan, N'<RelOp', NCHAR(13)+NCHAR(10)+N'<RelOp') + 
											NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2 AS [processing-instruction(query_plan)]
									FROM sys.dm_exec_text_query_plan
									(
										@plan_handle, 
										CASE @get_plans
											WHEN 1 THEN
												@statement_start_offset
											ELSE
												0
										END, 
										CASE @get_plans
											WHEN 1 THEN
												@statement_end_offset
											ELSE
												-1
										END
									) AS qp
									FOR XML
										PATH(''),
										TYPE
								)
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
						ELSE
						BEGIN;
							UPDATE s
							SET
								s.query_plan = 
									CASE ERROR_NUMBER() 
										WHEN 1222 THEN '<timeout_exceeded />'
										ELSE '<error message="' + ERROR_MESSAGE() + '" />'
									END
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
					END CATCH;
				END;

				FETCH NEXT FROM plan_cursor
				INTO
					@session_id,
					@request_id,
					@plan_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE plan_cursor;
			DEALLOCATE plan_cursor;
		END;

		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			DECLARE locks_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT DISTINCT
					database_name
				FROM #locks
				WHERE
					EXISTS
					(
						SELECT *
						FROM #sessions AS s
						WHERE
							s.session_id = #locks.session_id
							AND recursion = 1
					)
					AND database_name <> '(null)'
				OPTION (KEEPFIXED PLAN);

			OPEN locks_cursor;

			FETCH NEXT FROM locks_cursor
			INTO 
				@database_name;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					SET @sql_n = CONVERT(NVARCHAR(MAX), '') +
						'UPDATE l ' +
						'SET ' +
							'object_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'o.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'index_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'i.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'schema_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										's.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'principal_name = ' + 
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'dp.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								') ' +
						'FROM #locks AS l ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.allocation_units AS au ON ' +
							'au.allocation_unit_id = l.allocation_unit_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p ON ' +
							'p.hobt_id = ' +
								'COALESCE ' +
								'( ' +
									'l.hobt_id, ' +
									'CASE ' +
										'WHEN au.type IN (1, 3) THEN au.container_id ' +
										'ELSE NULL ' +
									'END ' +
								') ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p1 ON ' +
							'l.hobt_id IS NULL ' +
							'AND au.type = 2 ' +
							'AND p1.partition_id = au.container_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.objects AS o ON ' +
							'o.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.indexes AS i ON ' +
							'i.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
							'AND i.index_id = COALESCE(l.index_id, p.index_id, p1.index_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.schemas AS s ON ' +
							's.schema_id = COALESCE(l.schema_id, o.schema_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.database_principals AS dp ON ' +
							'dp.principal_id = l.principal_id ' +
						'WHERE ' +
							'l.database_name = @database_name ' +
						'OPTION (KEEPFIXED PLAN); ';
					
					EXEC sp_executesql
						@sql_n,
						N'@database_name sysname',
						@database_name;
				END TRY
				BEGIN CATCH;
					UPDATE #locks
					SET
						query_error = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									CONVERT
									(
										NVARCHAR(MAX), 
										ERROR_MESSAGE() COLLATE Latin1_General_Bin2
									),
									NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
									NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
									NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
								NCHAR(0),
								N''
							)
					WHERE 
						database_name = @database_name
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM locks_cursor
				INTO
					@database_name;
			END;

			CLOSE locks_cursor;
			DEALLOCATE locks_cursor;

			CREATE CLUSTERED INDEX IX_SRD ON #locks (session_id, request_id, database_name);

			UPDATE s
			SET 
				s.locks =
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX), 
									l1.database_name COLLATE Latin1_General_Bin2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [Database/@name],
						MIN(l1.query_error) AS [Database/@query_error],
						(
							SELECT 
								l2.request_mode AS [Lock/@request_mode],
								l2.request_status AS [Lock/@request_status],
								COUNT(*) AS [Lock/@request_count]
							FROM #locks AS l2
							WHERE 
								l1.session_id = l2.session_id
								AND l1.request_id = l2.request_id
								AND l2.database_name = l1.database_name
								AND l2.resource_type = 'DATABASE'
							GROUP BY
								l2.request_mode,
								l2.request_status
							FOR XML
								PATH(''),
								TYPE
						) AS [Database/Locks],
						(
							SELECT
								COALESCE(l3.object_name, '(null)') AS [Object/@name],
								l3.schema_name AS [Object/@schema_name],
								(
									SELECT
										l4.resource_type AS [Lock/@resource_type],
										l4.page_type AS [Lock/@page_type],
										l4.index_name AS [Lock/@index_name],
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END AS [Lock/@schema_name],
										l4.principal_name AS [Lock/@principal_name],
										l4.resource_description AS [Lock/@resource_description],
										l4.request_mode AS [Lock/@request_mode],
										l4.request_status AS [Lock/@request_status],
										SUM(l4.request_count) AS [Lock/@request_count]
									FROM #locks AS l4
									WHERE 
										l4.session_id = l3.session_id
										AND l4.request_id = l3.request_id
										AND l3.database_name = l4.database_name
										AND COALESCE(l3.object_name, '(null)') = COALESCE(l4.object_name, '(null)')
										AND COALESCE(l3.schema_name, '') = COALESCE(l4.schema_name, '')
										AND l4.resource_type <> 'DATABASE'
									GROUP BY
										l4.resource_type,
										l4.page_type,
										l4.index_name,
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END,
										l4.principal_name,
										l4.resource_description,
										l4.request_mode,
										l4.request_status
									FOR XML
										PATH(''),
										TYPE
								) AS [Object/Locks]
							FROM #locks AS l3
							WHERE 
								l3.session_id = l1.session_id
								AND l3.request_id = l1.request_id
								AND l3.database_name = l1.database_name
								AND l3.resource_type <> 'DATABASE'
							GROUP BY 
								l3.session_id,
								l3.request_id,
								l3.database_name,
								COALESCE(l3.object_name, '(null)'),
								l3.schema_name
							FOR XML
								PATH(''),
								TYPE
						) AS [Database/Objects]
					FROM #locks AS l1
					WHERE
						l1.session_id = s.session_id
						AND l1.request_id = s.request_id
						AND l1.start_time IN (s.start_time, s.last_request_start_time)
						AND s.recursion = 1
					GROUP BY 
						l1.session_id,
						l1.request_id,
						l1.database_name
					FOR XML
						PATH(''),
						TYPE
				)
			FROM #sessions s
			OPTION (KEEPFIXED PLAN);
		END;

		IF 
			@find_block_leaders = 1
			AND @recursion = 1
			AND @output_column_list LIKE '%|[blocked_session_count|]%' ESCAPE '|'
		BEGIN;
			WITH
			blockers AS
			(
				SELECT
					session_id,
					session_id AS top_level_session_id,
					CONVERT(VARCHAR(8000), '.' + CONVERT(VARCHAR(8000), session_id) + '.') AS the_path
				FROM #sessions
				WHERE
					recursion = 1

				UNION ALL

				SELECT
					s.session_id,
					b.top_level_session_id,
					CONVERT(VARCHAR(8000), b.the_path + CONVERT(VARCHAR(8000), s.session_id) + '.') AS the_path
				FROM blockers AS b
				JOIN #sessions AS s ON
					s.blocking_session_id = b.session_id
					AND s.recursion = 1
					AND b.the_path NOT LIKE '%.' + CONVERT(VARCHAR(8000), s.session_id) + '.%' COLLATE Latin1_General_Bin2
			)
			UPDATE s
			SET
				s.blocked_session_count = x.blocked_session_count
			FROM #sessions AS s
			JOIN
			(
				SELECT
					b.top_level_session_id AS session_id,
					COUNT(*) - 1 AS blocked_session_count
				FROM blockers AS b
				GROUP BY
					b.top_level_session_id
			) x ON
				s.session_id = x.session_id
			WHERE
				s.recursion = 1;
		END;

		IF
			@get_task_info = 2
			AND @output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
			AND @recursion = 1
		BEGIN;
			CREATE TABLE #blocked_requests
			(
				session_id SMALLINT NOT NULL,
				request_id INT NOT NULL,
				database_name sysname NOT NULL,
				object_id INT,
				hobt_id BIGINT,
				schema_id INT,
				schema_name sysname NULL,
				object_name sysname NULL,
				query_error NVARCHAR(2048),
				PRIMARY KEY (database_name, session_id, request_id)
			);

			CREATE STATISTICS s_database_name ON #blocked_requests (database_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_name ON #blocked_requests (schema_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_name ON #blocked_requests (object_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_query_error ON #blocked_requests (query_error)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
		
			INSERT #blocked_requests
			(
				session_id,
				request_id,
				database_name,
				object_id,
				hobt_id,
				schema_id
			)
			SELECT
				session_id,
				request_id,
				database_name,
				object_id,
				hobt_id,
				CONVERT(INT, SUBSTRING(schema_node, CHARINDEX(' = ', schema_node) + 3, LEN(schema_node))) AS schema_id
			FROM
			(
				SELECT
					session_id,
					request_id,
					agent_nodes.agent_node.value('(database_name/text())[1]', 'sysname') AS database_name,
					agent_nodes.agent_node.value('(object_id/text())[1]', 'int') AS object_id,
					agent_nodes.agent_node.value('(hobt_id/text())[1]', 'bigint') AS hobt_id,
					agent_nodes.agent_node.value('(metadata_resource/text()[.="SCHEMA"]/../../metadata_class_id/text())[1]', 'varchar(100)') AS schema_node
				FROM #sessions AS s
				CROSS APPLY s.additional_info.nodes('//block_info') AS agent_nodes (agent_node)
				WHERE
					s.recursion = 1
			) AS t
			WHERE
				t.database_name IS NOT NULL
				AND
				(
					t.object_id IS NOT NULL
					OR t.hobt_id IS NOT NULL
					OR t.schema_node IS NOT NULL
				);
			
			DECLARE blocks_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT DISTINCT
					database_name
				FROM #blocked_requests;
				
			OPEN blocks_cursor;
			
			FETCH NEXT FROM blocks_cursor
			INTO 
				@database_name;
			
			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					SET @sql_n = 
						CONVERT(NVARCHAR(MAX), '') +
						'UPDATE b ' +
						'SET ' +
							'b.schema_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										's.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'b.object_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'o.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								') ' +
						'FROM #blocked_requests AS b ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p ON ' +
							'p.hobt_id = b.hobt_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.objects AS o ON ' +
							'o.object_id = COALESCE(p.object_id, b.object_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.schemas AS s ON ' +
							's.schema_id = COALESCE(o.schema_id, b.schema_id) ' +
						'WHERE ' +
							'b.database_name = @database_name; ';
					
					EXEC sp_executesql
						@sql_n,
						N'@database_name sysname',
						@database_name;
				END TRY
				BEGIN CATCH;
					UPDATE #blocked_requests
					SET
						query_error = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									CONVERT
									(
										NVARCHAR(MAX), 
										ERROR_MESSAGE() COLLATE Latin1_General_Bin2
									),
									NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
									NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
									NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
								NCHAR(0),
								N''
							)
					WHERE
						database_name = @database_name;
				END CATCH;

				FETCH NEXT FROM blocks_cursor
				INTO
					@database_name;
			END;
			
			CLOSE blocks_cursor;
			DEALLOCATE blocks_cursor;
			
			UPDATE s
			SET
				additional_info.modify
				('
					insert <schema_name>{sql:column("b.schema_name")}</schema_name>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.schema_name IS NOT NULL;

			UPDATE s
			SET
				additional_info.modify
				('
					insert <object_name>{sql:column("b.object_name")}</object_name>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.object_name IS NOT NULL;

			UPDATE s
			SET
				additional_info.modify
				('
					insert <query_error>{sql:column("b.query_error")}</query_error>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.query_error IS NOT NULL;
		END;

		IF
			@output_column_list LIKE '%|[program_name|]%' ESCAPE '|'
			AND @output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
			AND @recursion = 1
			AND DB_ID('msdb') IS NOT NULL
		BEGIN;
			SET @sql_n =
				N'BEGIN TRY;
					DECLARE @job_name sysname;
					SET @job_name = NULL;
					DECLARE @step_name sysname;
					SET @step_name = NULL;

					SELECT
						@job_name = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									j.name,
									NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
									NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
									NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
								NCHAR(0),
								N''?''
							),
						@step_name = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									s.step_name,
									NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
									NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
									NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
								NCHAR(0),
								N''?''
							)
					FROM msdb.dbo.sysjobs AS j
					INNER JOIN msdb.dbo.sysjobsteps AS s ON
						j.job_id = s.job_id
					WHERE
						j.job_id = @job_id
						AND s.step_id = @step_id;

					IF @job_name IS NOT NULL
					BEGIN;
						UPDATE s
						SET
							additional_info.modify
							(''
								insert text{sql:variable("@job_name")}
								into (/additional_info/agent_job_info/job_name)[1]
							'')
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
						
						UPDATE s
						SET
							additional_info.modify
							(''
								insert text{sql:variable("@step_name")}
								into (/additional_info/agent_job_info/step_name)[1]
							'')
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
					END;
				END TRY
				BEGIN CATCH;
					DECLARE @msdb_error_message NVARCHAR(256);
					SET @msdb_error_message = ERROR_MESSAGE();
				
					UPDATE s
					SET
						additional_info.modify
						(''
							insert <msdb_query_error>{sql:variable("@msdb_error_message")}</msdb_query_error>
							as last
							into (/additional_info/agent_job_info)[1]
						'')
					FROM #sessions AS s
					WHERE 
						s.session_id = @session_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END CATCH;'

			DECLARE @job_id UNIQUEIDENTIFIER;
			DECLARE @step_id INT;

			DECLARE agent_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT
					s.session_id,
					agent_nodes.agent_node.value('(job_id/text())[1]', 'uniqueidentifier') AS job_id,
					agent_nodes.agent_node.value('(step_id/text())[1]', 'int') AS step_id
				FROM #sessions AS s
				CROSS APPLY s.additional_info.nodes('//agent_job_info') AS agent_nodes (agent_node)
				WHERE
					s.recursion = 1
			OPTION (KEEPFIXED PLAN);
			
			OPEN agent_cursor;

			FETCH NEXT FROM agent_cursor
			INTO 
				@session_id,
				@job_id,
				@step_id;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				EXEC sp_executesql
					@sql_n,
					N'@job_id UNIQUEIDENTIFIER, @step_id INT, @session_id SMALLINT',
					@job_id, @step_id, @session_id

				FETCH NEXT FROM agent_cursor
				INTO 
					@session_id,
					@job_id,
					@step_id;
			END;

			CLOSE agent_cursor;
			DEALLOCATE agent_cursor;
		END; 
		
		IF 
			@delta_interval > 0 
			AND @recursion <> 1
		BEGIN;
			SET @recursion = 1;

			DECLARE @delay_time CHAR(12);
			SET @delay_time = CONVERT(VARCHAR, DATEADD(second, @delta_interval, 0), 114);
			WAITFOR DELAY @delay_time;

			GOTO REDO;
		END;
	END;

	SET @sql = 
		--Outer column list
		CONVERT
		(
			VARCHAR(MAX),
			CASE
				WHEN 
					@destination_table <> '' 
					AND @return_schema = 0 
						THEN 'INSERT ' + @destination_table + ' '
				ELSE ''
			END +
			'SELECT ' +
				@output_column_list + ' ' +
			CASE @return_schema
				WHEN 1 THEN 'INTO #session_schema '
				ELSE ''
			END
		--End outer column list
		) + 
		--Inner column list
		CONVERT
		(
			VARCHAR(MAX),
			'FROM ' +
			'( ' +
				'SELECT ' +
					'session_id, ' +
					--[dd hh:mm:ss.mss]
					CASE
						WHEN @format_output IN (1, 2) THEN
							'CASE ' +
								'WHEN elapsed_time < 0 THEN ' +
									'RIGHT ' +
									'( ' +
										'REPLICATE(''0'', max_elapsed_length) + CONVERT(VARCHAR, (-1 * elapsed_time) / 86400), ' +
										'max_elapsed_length ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, (-1 * elapsed_time), 0), 120), ' +
											'9 ' +
										') + ' +
										'''.000'' ' +
								'ELSE ' +
									'RIGHT ' +
									'( ' +
										'REPLICATE(''0'', max_elapsed_length) + CONVERT(VARCHAR, elapsed_time / 86400000), ' +
										'max_elapsed_length ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, elapsed_time / 1000, 0), 120), ' +
											'9 ' +
										') + ' +
										'''.'' + ' + 
										'RIGHT(''000'' + CONVERT(VARCHAR, elapsed_time % 1000), 3) ' +
							'END AS [dd hh:mm:ss.mss], '
						ELSE
							''
					END +
					--[dd hh:mm:ss.mss (avg)] / avg_elapsed_time
					CASE 
						WHEN  @format_output IN (1, 2) THEN 
							'RIGHT ' +
							'( ' +
								'''00'' + CONVERT(VARCHAR, avg_elapsed_time / 86400000), ' +
								'2 ' +
							') + ' +
								'RIGHT ' +
								'( ' +
									'CONVERT(VARCHAR, DATEADD(second, avg_elapsed_time / 1000, 0), 120), ' +
									'9 ' +
								') + ' +
								'''.'' + ' +
								'RIGHT(''000'' + CONVERT(VARCHAR, avg_elapsed_time % 1000), 3) AS [dd hh:mm:ss.mss (avg)], '
						ELSE
							'avg_elapsed_time, '
					END +
					--physical_io
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io))) OVER() - LEN(CONVERT(VARCHAR, physical_io))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						ELSE ''
					END + 'physical_io, ' +
					--reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads))) OVER() - LEN(CONVERT(VARCHAR, reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						ELSE ''
					END + 'reads, ' +
					--physical_reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads))) OVER() - LEN(CONVERT(VARCHAR, physical_reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						ELSE ''
					END + 'physical_reads, ' +
					--writes
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes))) OVER() - LEN(CONVERT(VARCHAR, writes))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						ELSE ''
					END + 'writes, ' +
					--tempdb_allocations
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_allocations, ' +
					--tempdb_current
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_current, ' +
					--CPU
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CPU))) OVER() - LEN(CONVERT(VARCHAR, CPU))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						ELSE ''
					END + 'CPU, ' +
					--context_switches
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches))) OVER() - LEN(CONVERT(VARCHAR, context_switches))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						ELSE ''
					END + 'context_switches, ' +
					--used_memory
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory))) OVER() - LEN(CONVERT(VARCHAR, used_memory))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						ELSE ''
					END + 'used_memory, ' +
					CASE
						WHEN @output_column_list LIKE '%|_delta|]%' ESCAPE '|' THEN
							--physical_io_delta			
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND physical_io_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_io_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) ' 
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) '
											ELSE 'physical_io_delta '
										END +
								'ELSE NULL ' +
							'END AS physical_io_delta, ' +
							--reads_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND reads_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads_delta))) OVER() - LEN(CONVERT(VARCHAR, reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
											ELSE 'reads_delta '
										END +
								'ELSE NULL ' +
							'END AS reads_delta, ' +
							--physical_reads_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND physical_reads_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
											ELSE 'physical_reads_delta '
										END + 
								'ELSE NULL ' +
							'END AS physical_reads_delta, ' +
							--writes_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND writes_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes_delta))) OVER() - LEN(CONVERT(VARCHAR, writes_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
											ELSE 'writes_delta '
										END + 
								'ELSE NULL ' +
							'END AS writes_delta, ' +
							--tempdb_allocations_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND tempdb_allocations_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
											ELSE 'tempdb_allocations_delta '
										END + 
								'ELSE NULL ' +
							'END AS tempdb_allocations_delta, ' +
							--tempdb_current_delta
							--this is the only one that can (legitimately) go negative 
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
											ELSE 'tempdb_current_delta '
										END + 
								'ELSE NULL ' +
							'END AS tempdb_current_delta, ' +
							--CPU_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
										'THEN ' +
											'CASE ' +
												'WHEN ' +
													'thread_CPU_delta > CPU_delta ' +
													'AND thread_CPU_delta > 0 ' +
														'THEN ' +
															CASE @format_output
																WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, thread_CPU_delta + CPU_delta))) OVER() - LEN(CONVERT(VARCHAR, thread_CPU_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, thread_CPU_delta), 1), 19)) '
																WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, thread_CPU_delta), 1), 19)) '
																ELSE 'thread_CPU_delta '
															END + 
												'WHEN CPU_delta >= 0 THEN ' +
													CASE @format_output
														WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, thread_CPU_delta + CPU_delta))) OVER() - LEN(CONVERT(VARCHAR, CPU_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
														WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
														ELSE 'CPU_delta '
													END + 
												'ELSE NULL ' +
											'END ' +
								'ELSE ' +
									'NULL ' +
							'END AS CPU_delta, ' +
							--context_switches_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND context_switches_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches_delta))) OVER() - LEN(CONVERT(VARCHAR, context_switches_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
											ELSE 'context_switches_delta '
										END + 
								'ELSE NULL ' +
							'END AS context_switches_delta, ' +
							--used_memory_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND used_memory_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory_delta))) OVER() - LEN(CONVERT(VARCHAR, used_memory_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
											ELSE 'used_memory_delta '
										END + 
								'ELSE NULL ' +
							'END AS used_memory_delta, '
						ELSE ''
					END +
					--tasks
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tasks))) OVER() - LEN(CONVERT(VARCHAR, tasks))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) '
						ELSE ''
					END + 'tasks, ' +
					'status, ' +
					'wait_info, ' +
					'locks, ' +
					'tran_start_time, ' +
					'LEFT(tran_log_writes, LEN(tran_log_writes) - 1) AS tran_log_writes, ' +
					--open_tran_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, open_tran_count))) OVER() - LEN(CONVERT(VARCHAR, open_tran_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						ELSE ''
					END + 'open_tran_count, ' +
					--sql_command
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_command), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_command, ' +
					--sql_text
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_text), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_text, ' +
					'query_plan, ' +
					'blocking_session_id, ' +
					--blocked_session_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, blocked_session_count))) OVER() - LEN(CONVERT(VARCHAR, blocked_session_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						ELSE ''
					END + 'blocked_session_count, ' +
					--percent_complete
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) OVER() - LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) + CONVERT(CHAR(22), CONVERT(MONEY, percent_complete), 2)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1)) AS '
						ELSE ''
					END + 'percent_complete, ' +
					'host_name, ' +
					'login_name, ' +
					'database_name, ' +
					'program_name, ' +
					'additional_info, ' +
					'start_time, ' +
					'login_time, ' +
					'CASE ' +
						'WHEN status = N''sleeping'' THEN NULL ' +
						'ELSE request_id ' +
					'END AS request_id, ' +
					'GETDATE() AS collection_time '
		--End inner column list
		) +
		--Derived table and INSERT specification
		CONVERT
		(
			VARCHAR(MAX),
				'FROM ' +
				'( ' +
					'SELECT TOP(2147483647) ' +
						'*, ' +
						'CASE ' +
							'MAX ' +
							'( ' +
								'LEN ' +
								'( ' +
									'CONVERT ' +
									'( ' +
										'VARCHAR, ' +
										'CASE ' +
											'WHEN elapsed_time < 0 THEN ' +
												'(-1 * elapsed_time) / 86400 ' +
											'ELSE ' +
												'elapsed_time / 86400000 ' +
										'END ' +
									') ' +
								') ' +
							') OVER () ' +
								'WHEN 1 THEN 2 ' +
								'ELSE ' +
									'MAX ' +
									'( ' +
										'LEN ' +
										'( ' +
											'CONVERT ' +
											'( ' +
												'VARCHAR, ' +
												'CASE ' +
													'WHEN elapsed_time < 0 THEN ' +
														'(-1 * elapsed_time) / 86400 ' +
													'ELSE ' +
														'elapsed_time / 86400000 ' +
												'END ' +
											') ' +
										') ' +
									') OVER () ' +
						'END AS max_elapsed_length, ' +
						CASE
							WHEN @output_column_list LIKE '%|_delta|]%' ESCAPE '|' THEN
								'MAX(physical_io * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(physical_io * recursion) OVER (PARTITION BY session_id, request_id) AS physical_io_delta, ' +
								'MAX(reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(reads * recursion) OVER (PARTITION BY session_id, request_id) AS reads_delta, ' +
								'MAX(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) AS physical_reads_delta, ' +
								'MAX(writes * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(writes * recursion) OVER (PARTITION BY session_id, request_id) AS writes_delta, ' +
								'MAX(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_allocations_delta, ' +
								'MAX(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_current_delta, ' +
								'MAX(CPU * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(CPU * recursion) OVER (PARTITION BY session_id, request_id) AS CPU_delta, ' +
								'MAX(thread_CPU_snapshot * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(thread_CPU_snapshot * recursion) OVER (PARTITION BY session_id, request_id) AS thread_CPU_delta, ' +
								'MAX(context_switches * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(context_switches * recursion) OVER (PARTITION BY session_id, request_id) AS context_switches_delta, ' +
								'MAX(used_memory * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(used_memory * recursion) OVER (PARTITION BY session_id, request_id) AS used_memory_delta, ' +
								'MIN(last_request_start_time) OVER (PARTITION BY session_id, request_id) AS first_request_start_time, '
							ELSE ''
						END +
						'COUNT(*) OVER (PARTITION BY session_id, request_id) AS num_events ' +
					'FROM #sessions AS s1 ' +
					CASE 
						WHEN @sort_order = '' THEN ''
						ELSE
							'ORDER BY ' +
								@sort_order
					END +
				') AS s ' +
				'WHERE ' +
					's.recursion = 1 ' +
			') x ' +
			'OPTION (KEEPFIXED PLAN); ' +
			'' +
			CASE @return_schema
				WHEN 1 THEN
					'SET @schema = ' +
						'''CREATE TABLE <table_name> ( '' + ' +
							'STUFF ' +
							'( ' +
								'( ' +
									'SELECT ' +
										''','' + ' +
										'QUOTENAME(COLUMN_NAME) + '' '' + ' +
										'DATA_TYPE + ' + 
										'CASE ' +
											'WHEN DATA_TYPE LIKE ''%char'' THEN ''('' + COALESCE(NULLIF(CONVERT(VARCHAR, CHARACTER_MAXIMUM_LENGTH), ''-1''), ''max'') + '') '' ' +
											'ELSE '' '' ' +
										'END + ' +
										'CASE IS_NULLABLE ' +
											'WHEN ''NO'' THEN ''NOT '' ' +
											'ELSE '''' ' +
										'END + ''NULL'' AS [text()] ' +
									'FROM tempdb.INFORMATION_SCHEMA.COLUMNS ' +
									'WHERE ' +
										'TABLE_NAME = (SELECT name FROM tempdb.sys.objects WHERE object_id = OBJECT_ID(''tempdb..#session_schema'')) ' +
										'ORDER BY ' +
											'ORDINAL_POSITION ' +
									'FOR XML ' +
										'PATH('''') ' +
								'), + ' +
								'1, ' +
								'1, ' +
								''''' ' +
							') + ' +
						''')''; ' 
				ELSE ''
			END
		--End derived table and INSERT specification
		);

	SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

	EXEC sp_executesql
		@sql_n,
		N'@schema VARCHAR(MAX) OUTPUT',
		@schema OUTPUT;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Clean_Reseed_Table]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Clean_Reseed_Table]
	@TableName NVARCHAR(100)
AS
--- EXEC [usp_Clean_Reseed_TableE] 'Adjuster_Case'
--DECLARE @TableName varchar(100)
EXEC ('DELETE FROM ' + @TableName)
DBCC CHECKIDENT (@TableName, RESEED, 0);
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Adjuster]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Adjuster]
AS
/*===========================================
	Author:Praveen
	Created Date: 12-JAN-2023
	Description:To transform and load Adjuster data to main table
	EXECUTION : EXEC [usp_Data_Load_Adjuster]
[dbo].[usp_Clean_Reseed_Table] '[dbo].Adjuster'
[dbo].[usp_Clean_Reseed_Table] '[dbo].Adjuster_Case'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

--Merge for Adjuster Table 
		MERGE [dbo].Adjuster AS Target
	using (SELECT  
			  AD.ADJUSTER_Salutation,
			  AD.Adjuster_FirstName,
			  LEFT(AD.Adjuster_MI,2) AS ADJUSTER_MI,
			  AD.Adjuster_LastName,
			  AD.Adjuster_Suffix,
			  AD.Adjuster_Address1,
			  AD.Adjuster_Address2,
			  AD.Adjuster_City,
			  AD.Adjuster_State,
			  AD.Adjuster_Zip4,
			  AD.Adjuster_Email,
			  LEFT(AD.Adjuster_Phone_Number,12) AS Adjuster_Phone_Number,
			  AD.Adjuster_Fax,
			  S.ID_State,
			  ADJUSTER_COMPANYNAME,
			  ADJUSTERS_PARENT_COMPANYNAME,
			  ADJUSTER_COMPANY_TYPE,
			  COMPANY_STATE_ID_NUMBER,
			  ID_Case,
			  Court_Case_Number,
			  ADJUSTER_GENDER
		    FROM 
				[Stg].Adjuster AD
				LEFT JOIN [dbo].[Cases] CS ON CS.CaseNumber = AD.Court_Case_Number
				LEFT JOIN dbo.State S ON S.States = AD.Adjuster_State
			WHERE IsValidRecord = 1
			)AS SOURCE
	ON TARGET.FirstName = SOURCE.Adjuster_FirstName
			AND TARGET.LastName = SOURCE.Adjuster_LastName
			AND TARGET.Email = SOURCE.Adjuster_Email
			AND LEFT(TARGET.Phone_Number,10) = LEFT(SOURCE.Adjuster_Phone_Number,10)

	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT (   
				 Salutation
				,FirstName
				,MiddleName
				,LastName
				,FullName
				,Suffix
				,Gender
				,Address1
				,Address2
				,City
				,FK_State
				,Zip4
				,Email
				,Phone_Number
				,Fax
				,FK_Case
				,Case_Number
				,CompanyName
			    ,Parent_CompanyName
			    ,Company_Type
			    ,Company_State_ID
				,CreatedOn

			  )
	  VALUES (
			  SOURCE.ADJUSTER_Salutation,
			  SOURCE.Adjuster_FirstName,
			  SOURCE.ADJUSTER_MI,
			  SOURCE.Adjuster_LastName,
			  NULL,
			  SOURCE.Adjuster_Suffix,
			  SOURCE.ADJUSTER_GENDER,
			  SOURCE.Adjuster_Address1,
			  SOURCE.Adjuster_Address2,
			  SOURCE.Adjuster_City,
			  SOURCE.ID_State,
			  SOURCE.Adjuster_Zip4,
			  SOURCE.Adjuster_Email,
			  SOURCE.Adjuster_Phone_Number,
			  SOURCE.Adjuster_Fax,
			  SOURCE.ID_Case,
			  SOURCE.Court_Case_Number,
			  SOURCE.ADJUSTER_COMPANYNAME,
			  SOURCE.ADJUSTERS_PARENT_COMPANYNAME,
			  SOURCE.ADJUSTER_COMPANY_TYPE,
			  SOURCE.COMPANY_STATE_ID_NUMBER,
			  @CurrentDate
			  )
	-- For Updates
	WHEN matched THEN
	  UPDATE SET 
			TARGET.Salutation			= SOURCE.ADJUSTER_Salutation,
			TARGET.FirstName			= SOURCE.Adjuster_FirstName,
			TARGET.MiddleName			= SOURCE.ADJUSTER_MI,
			TARGET.LastName				= SOURCE.Adjuster_LastName,
			TARGET.FullName				= NULL,
			TARGET.Suffix				= SOURCE.Adjuster_Suffix,
			TARGET.Address1				= SOURCE.Adjuster_Address1,
			TARGET.Address2				= SOURCE.Adjuster_Address2,
			TARGET.City					= SOURCE.Adjuster_City,
			TARGET.FK_State				= SOURCE.ID_State,
			TARGET.Zip4					= SOURCE.Adjuster_Zip4,
			TARGET.Email				= SOURCE.Adjuster_Email,
			TARGET.Phone_Number			= SOURCE.Adjuster_Phone_Number,
			TARGET.Fax                  = SOURCE.Adjuster_Fax,
			TARGET.ModifiedOn			= @CurrentDate,
			TARGET.CompanyName			=SOURCE.ADJUSTER_COMPANYNAME,
			TARGET.Parent_CompanyName	=SOURCE.ADJUSTERS_PARENT_COMPANYNAME,
			TARGET.Company_Type			=SOURCE.ADJUSTER_COMPANY_TYPE,
			TARGET.Company_State_ID		=SOURCE.COMPANY_STATE_ID_NUMBER,
			TARGET.FK_Case		=SOURCE.ID_Case,
			TARGET.Gender		=SOURCE.ADJUSTER_GENDER,
			TARGET.Case_Number		=SOURCE.Court_Case_Number;

------------------------------------------------------------------------------

 ----Merge for Adjuster Company Table 
	--MERGE [dbo].AdjusterCompany AS Target
	--using (SELECT DISTINCT
	--		  A.ID_Adjuster,
	--		  AD.Adjuster_CompanyName,
	--		  AD.Adjusters_Parent_CompanyName,
	--		  AD.Adjuster_Company_Type,
	--		  AD.Company_State_ID_Number,
	--		  AD.Court_Case_Number
	--	    FROM 
	--			[Stg].Adjuster AD
	--			INNER JOIN [dbo].[Adjuster] A ON 
	--				A.FirstName = AD.Adjuster_FirstName
	--				AND A.LastName = AD.Adjuster_LastName
	--				--AND A.Case_Number= AD.Court_Case_Number
	--				AND A.Email = AD.Adjuster_Email		
	--				AND LEFT(A.Phone_Number,10) = LEFT(AD.Adjuster_Phone_Number,10)
	--		WHERE IsValidRecord = 1
	--		)AS SOURCE
	--ON TARGET.FK_Adjuster = SOURCE.ID_Adjuster
	---- For Inserts
	--WHEN NOT matched BY target THEN
	--  INSERT (   
	--			 FK_Adjuster
	--			,CompanyName
	--			,Parent_CompanyName
	--			,Company_Type
	--			,Company_OrderNo
	--			,Company_State_IDNumber
	--			,CreatedOn
	--		  )
	--  VALUES (
	--		  SOURCE.ID_Adjuster,
	--		  SOURCE.Adjuster_CompanyName,
	--		  SOURCE.Adjusters_Parent_CompanyName,
	--		  SOURCE.Adjuster_Company_Type,
	--		  NULL,
	--		  SOURCE.Company_State_ID_Number,
	--		  @CurrentDate
	--		  )
	---- For Updates
	--WHEN matched THEN
	--  UPDATE SET 
	--		TARGET.FK_Adjuster				= SOURCE.ID_Adjuster,
	--		TARGET.CompanyName				= SOURCE.Adjuster_CompanyName,
	--		TARGET.Parent_CompanyName		= SOURCE.Adjusters_Parent_CompanyName,
	--		TARGET.Company_Type				= SOURCE.Adjuster_Company_Type,
	--		TARGET.Company_OrderNo			= NULL,
	--		TARGET.Company_State_IDNumber	= SOURCE.Company_State_ID_Number,
	--		TARGET.ModifiedOn				= @CurrentDate;

------------------------------------------------------------------------------
--Merge for Adjuster_Case Table 
	--MERGE [dbo].Adjuster_Case AS Target
	--using (SELECT DISTINCT 
	--		  CS.ID_Case,
	--		  A.ID_Adjuster,
	--		  AC.ID_AdjusterCompany
	--	    FROM 
	--			[Stg].Adjuster AD
	--			INNER JOIN [dbo].[Adjuster] A ON 
	--				A.FirstName = AD.Adjuster_FirstName
	--				AND A.LastName = AD.Adjuster_LastName
	--				AND A.Email = AD.Adjuster_Email
	--				AND LEFT(A.Phone_Number,10) = LEFT(AD.Adjuster_Phone_Number,10)
	--			LEFT JOIN [dbo].[Cases] CS ON CS.CaseNumber = AD.Court_Case_Number
	--			LEFT JOIN [dbo].[AdjusterCompany] AC ON AC.CompanyName = AD.Adjuster_CompanyName
	--				AND  AC.Parent_CompanyName = AD.Adjusters_Parent_CompanyName
	--				AND AC.Company_Type = AD.Adjuster_Company_Type
	--		WHERE IsValidRecord = 1
	--		)AS SOURCE
	--ON TARGET.FK_Case = SOURCE.ID_Case
	--		AND TARGET.FK_Adjuster = SOURCE.ID_Adjuster
	--		AND TARGET.FK_AdjusterCompany = SOURCE.ID_AdjusterCompany

	---- For Inserts
	--WHEN NOT matched BY target THEN
	--  INSERT (   
	--			FK_Case
	--			,FK_Adjuster
	--			,FK_AdjusterCompany
	--			,CreatedOn
	--		  )
	--  VALUES (
	--		  SOURCE.ID_Case,
	--		  SOURCE.ID_Adjuster,
	--		  SOURCE.ID_AdjusterCompany,
	--		  @CurrentDate
	--		  )
	---- For Updates
	--WHEN matched THEN
	--  UPDATE SET 
	--		TARGET.FK_Case				= SOURCE.ID_Case,
	--		TARGET.FK_Adjuster			= SOURCE.ID_Adjuster,
	--		TARGET.FK_AdjusterCompany	= SOURCE.ID_AdjusterCompany,
	--		TARGET.ModifiedOn			= @CurrentDate;

	COMMIT TRANSACTION
	EXEC [dbo].[usp_Update_AdjusterSEQNo]
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Attorney]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================================================
--Created Date : 06/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_Data_Load_Attorney]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
 BEGIN TRANSACTION;

	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_Attorney'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()
	
	---------------------- Inserts missing BadgeType in the table RefBadgeType ---------------------
	INSERT INTO RefBadgeType(BadgeType)
	SELECT DISTINCT [BADGE_TYPE_NAME] 
	FROM STG.Attorney_List STG
	LEFT JOIN RefBadgeType RBT ON LTRIM(RTRIM(RBT.BadgeType)) = LTRIM(RTRIM(STG.[BADGE_TYPE_NAME])) AND RBT.IsDeleted = 0
	WHERE RBT.ID_BadgeType IS NULL AND [BADGE_TYPE_NAME] is not null

 -------------------------- Merge for Attorney Table ----------------------------------
   MERGE [dbo].[Attorney] AS TARGET
   USING (SELECT DISTINCT  
				 [Salutation], 
				 [First_Name], 
				 [Middle_Name], 
				 [Last_Name], 
				 [Suffix], 				  
				 [Mailing_Street], 
				 [Mailing_City], 
				 S.[ID_State], 
				 [Phone], 
				 [Fax], 
				 [Email], 
				 [County_of_Official_Address], 
				 [Circuit_Number_of_Official_Address], 
				 [Attorney_Full_Name],
				 Board_Certification,
				 Attorney_Address_1,
				 Attorney_Address_2,
				 Florida_BAR_Number,
				 Attorney_Zip4
		   FROM [Stg].[Attorney_List] STG		   
		   LEFT JOIN [dbo].[State] S ON S.States = STG.[Mailing_State/Province] AND S.[IsDeleted] = 0   
		   WHERE STG.IsValidRecord = 1
   ) AS SOURCE
   ON ISNULL(TARGET.[FirstName],'') = ISNULL(SOURCE.[First_Name],'')
   AND ISNULL(TARGET.[BARNumber],'') = ISNULL(SOURCE.[Florida_BAR_Number],'')
   AND ISNULL(TARGET.[MI],'') = ISNULL(SOURCE.[Middle_Name],'')
   AND ISNULL(TARGET.[LastName],'') = ISNULL(SOURCE.[Last_Name],'')
   WHEN NOT MATCHED BY TARGET THEN
   INSERT ([BoardCertification], 
           [FullName], 
		   [FirstName], 
		   [MI], 
		   [LastName], 
		   [Suffix], 
		   [Salutation],		
		   [Address1], 
		   [Address2], 
		   [City], 
		   [FK_State], 
		   [Zip4], 
		   [Email], 
		   [OfficePhone], 
		   [CellPhone], 
		   [Fax], 
		   [BARNumber], 
		   [County_OfficialAddress], 
		   [Circuit_OfficialAddress], 
		   [CreatedOn], 
		   [CreatedBy], 
		   [ModifiedOn], 
		   [ModifiedBy], 
		   [IsDeleted])
   VALUES(SOURCE.Board_Certification,
		  SOURCE.[Attorney_Full_Name],
		  SOURCE.[First_Name], 
		  SOURCE.[Middle_Name], 
		  SOURCE.[Last_Name],
		  SOURCE.[Suffix],
		  SOURCE.[Salutation], 		  
		  SOURCE.Attorney_Address_1,
		  SOURCE.Attorney_Address_2,
		  SOURCE.[Mailing_City],
		  SOURCE.[ID_State],
		  SOURCE.Attorney_Zip4,
		  SOURCE.[Email],
		  SOURCE.[Phone], 
		  NULL,
		  SOURCE.[Fax],
		  SOURCE.Florida_BAR_Number, 
          SOURCE.[County_of_Official_Address], 
		  SOURCE.[Circuit_Number_of_Official_Address],
		  @CurrentDate,
		  0,
		  @CurrentDate,
		  0,
		  0
		  )
   WHEN MATCHED AND ( ISNULL(TARGET.[FullName],'') <>  ISNULL(SOURCE.[Attorney_Full_Name],'') OR
					ISNULL(TARGET.[Suffix],'') <> ISNULL(SOURCE.[Suffix],'') OR
					ISNULL(TARGET.[Salutation],'') <> ISNULL(SOURCE.[Salutation],'') OR					
					ISNULL(TARGET.[Address1],'') <> ISNULL(SOURCE.Attorney_Address_1,'') OR
					ISNULL(TARGET.[Address2],'') <> ISNULL(SOURCE.Attorney_Address_2,'') OR
					ISNULL(TARGET.[City],'') <> ISNULL(SOURCE.[Mailing_City],'') OR
					ISNULL(TARGET.[FK_State],'') <> ISNULL(SOURCE.[ID_State],'') OR
					ISNULL(TARGET.[Email],'') <>  ISNULL(SOURCE.[Email],'') OR
					ISNULL(TARGET.[OfficePhone],'') <> ISNULL(SOURCE.[Phone],'') OR
					ISNULL(TARGET.[Fax],'') <> ISNULL(SOURCE.[Fax],'') OR
					ISNULL(TARGET.[County_OfficialAddress],'')  <> ISNULL(SOURCE.[County_of_Official_Address],'') OR
					ISNULL(TARGET.[Circuit_OfficialAddress],'') <> ISNULL(SOURCE.[Circuit_Number_of_Official_Address],'')) THEN
   UPDATE SET
   	TARGET.[FullName] =  SOURCE.[Attorney_Full_Name],
	TARGET.[Suffix] = SOURCE.[Suffix],
	TARGET.[Salutation] = SOURCE.[Salutation], 	
	TARGET.[Address1] = SOURCE.Attorney_Address_1,
	TARGET.[Address2] = SOURCE.Attorney_Address_2,
	TARGET.[City] = SOURCE.[Mailing_City],
	TARGET.[FK_State] = SOURCE.[ID_State],
	TARGET.[Email] =  SOURCE.[Email],
	TARGET.[OfficePhone] = SOURCE.[Phone], 
	TARGET.[Fax] = SOURCE.[Fax],
	TARGET.[County_OfficialAddress]  = SOURCE.[County_of_Official_Address], 
	TARGET.[Circuit_OfficialAddress] = SOURCE.[Circuit_Number_of_Official_Address],
	TARGET.[ModifiedOn] = @CurrentDate,
	TARGET.[ModifiedBy] = 0,
	TARGET.[BoardCertification] = SOURCE.Board_Certification,
	TARGET.Zip4 = SOURCE.Attorney_Zip4;

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added/Updated attorney details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP

	-------------------------------- Insert multiple Badgetype assigned to Attorney --------------------------------------
	INSERT INTO [dbo].[AttorneyBadgeType]([FK_BadgeType],[FK_Attorney])
	SELECT DISTINCT RBT.ID_BadgeType,A.ID_Attorney 
	FROM Stg.Attorney_List STG
	JOIN [dbo].[Attorney] A ON ISNULL(A.BARNumber,'') = ISNULL(STG.[Florida_BAR_Number],'') AND ISNULL(A.FirstName,'') = ISNULL([First_Name],'') AND 
	                           ISNULL(A.[MI],'') = ISNULL(STG.[Middle_Name],'') AND ISNULL(A.[LastName],'') = ISNULL(STG.[Last_Name],'')
	JOIN [dbo].[RefBadgeType] RBT ON LTRIM(RTRIM(RBT.[BadgeType])) = LTRIM(RTRIM(STG.[BADGE_TYPE_NAME])) AND RBT.[IsDeleted] = 0
	LEFT JOIN [dbo].[AttorneyBadgeType] ABT ON ABT.[FK_Attorney] = A.ID_Attorney AND ABT.[FK_BadgeType] = RBT.ID_BadgeType
	WHERE ABT.[ID_AttorneyBadgeType] IS NULL
	ORDER BY A.ID_Attorney

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added attorney Badge details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note

	-------------------------------- Insert multiple Firms assigned to Attorney --------------------------------------
	INSERT INTO [dbo].[AttorneyFirm]([FK_Attorney],[FirmName])
	SELECT DISTINCT A.ID_Attorney,STG.[Firm_Name] 
	FROM Stg.Attorney_List STG
	JOIN [dbo].[Attorney] A ON ISNULL(A.BARNumber,'') = ISNULL(STG.[Florida_BAR_Number],'') AND ISNULL(A.FirstName,'') = ISNULL([First_Name],'') AND 
	                           ISNULL(A.[MI],'') = ISNULL(STG.[Middle_Name],'') AND ISNULL(A.[LastName],'') = ISNULL(STG.[Last_Name],'')
	LEFT JOIN [dbo].[AttorneyFirm] AF ON AF.[FK_Attorney] = A.ID_Attorney AND ISNULL(AF.[FirmName],'') = ISNULL(STG.[FIRM_NAME],'')
	WHERE AF.ID_AttorneyFirm IS NULL
	ORDER BY A.ID_Attorney

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added attorney firm details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Attorney_Case]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_Data_Load_Attorney_Case]
AS
BEGIN
 
 SET NOCOUNT ON; 
 BEGIN TRY
 BEGIN TRANSACTION;

	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_Attorney_Case'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()

     			-------------------------------- Insert multiple Firms assigned to Attorney --------------------------------------
				INSERT INTO [dbo].[AttorneyFirm]([FK_Attorney],[FirmName])
				SELECT DISTINCT A.ID_Attorney,STG.[FIRM_NAME] 
				FROM [Stg].[Case_Attorney] STG
				JOIN [dbo].[Attorney] A ON ISNULL(A.BARNumber,'') = ISNULL(STG.[Attorney_Bar_Number],'') 
				                        AND ISNULL(A.FirstName,'') = ISNULL([Attorney_FirstName],'') 
										AND ISNULL(A.[MI],'') = ISNULL(STG.[Attorney_MI],'') 
										AND ISNULL(A.[LastName],'') = ISNULL(STG.[Attorney_LastName],'')
				LEFT JOIN [dbo].[AttorneyFirm] AF ON ISNULL(AF.[FK_Attorney],0) = ISNULL(A.ID_Attorney,0)
				                                  AND ISNULL(AF.[FirmName],'') = ISNULL(STG.[FIRM_NAME],'')
				WHERE STG.ISVALIDRECORD = 1 AND AF.ID_AttorneyFirm IS NULL
				ORDER BY A.ID_Attorney

			    SET @RowCnt = @@ROWCOUNT
				SET @ImportEnd = CURRENT_TIMESTAMP;
				SET @Note = 'Added attorney firm details'	
				EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note

				UPDATE AC SET AC.[FK_AttorneyFirm] = AF.ID_AttorneyFirm,
				              AC.[FullName] =  STG.[Attorney_FULLName],
				              AC.[Suffix] =  STG.[Attorney_Suffix],
							  AC.[Address1] = STG.[Attorney_Address 1],
							  AC.[Address2] = STG.[Attorney_Address 2],
							  AC.[City] = STG.[Attorney_City],
							  AC.[FK_State] = ID_State,
							  AC.[Zip4] = STG.[Attorney_Zip4],
							  AC.[Email] = STG.[Attorney_Email],
							  AC.[OfficePhone] = STG.[Attorney_Office_Phone],
							  AC.[CellPhone] = STG.[Attorney_Cell_Phone],
							  AC.[Fax] = STG.[Attorney_Fax],
							  AC.[BARNumber] = STG.[Attorney_Bar_Number]
				        FROM [Stg].[Case_Attorney] STG
						JOIN [dbo].[Attorney] A ON ISNULL(A.[FirstName],'') = ISNULL(STG.[Attorney_FirstName],'')
													AND ISNULL(A.MI,'') = ISNULL(STG.[Attorney_MI],'')
													AND ISNULL(A.[LastName],'') = ISNULL(STG.[Attorney_LastName],'') 
													AND ISNULL(A.BARNumber,'') = ISNULL(STG.[Attorney_Bar_Number],'')
						JOIN [dbo].[Cases] C ON C.CaseNumber = ISNULL(STG.[Court_Case_Num],'')
						JOIN [dbo].[Attorney_Case] AC ON AC.[FK_Attorney] = A.[ID_Attorney] 
                                                         AND AC.[FK_Case] = C.[ID_Case]
						LEFT JOIN [dbo].[AttorneyFirm] AF ON AF.[FK_Attorney] = A.ID_Attorney 
                                                             AND ISNULL(AF.[FirmName],'') = ISNULL(STG.[FIRM_NAME],'')
						LEFT JOIN [dbo].[State] S ON S.States = ISNULL(STG.[ATTORNEY_STATE],'') 
                                                     AND S.[IsDeleted] = 0
					   WHERE STG.ISVALIDRECORD = 1 AND  (ISNULL(AC.[FK_AttorneyFirm],0) <> ISNULL(AF.ID_AttorneyFirm,0) OR
				              ISNULL(AC.[FullName],'') <>  ISNULL(STG.[Attorney_FULLName],'') OR
				              ISNULL(AC.[Suffix],'') <>  ISNULL(STG.[Attorney_Suffix],'') OR
							  ISNULL(AC.[Address1],'') <> ISNULL(STG.[Attorney_Address 1],'') OR
							  ISNULL(AC.[Address2],'') <> ISNULL(STG.[Attorney_Address 2],'') OR
							  ISNULL(AC.[City],'') <> ISNULL(STG.[Attorney_City],'') OR
							  ISNULL(AC.[FK_State],0) <> ISNULL(ID_State,0) OR
							  ISNULL(AC.[Zip4],'') <> ISNULL(STG.[Attorney_Zip4],'') OR
							  ISNULL(AC.[Email],'') <> ISNULL(STG.[Attorney_Email],'') OR
							  ISNULL(AC.[OfficePhone],'') <> ISNULL(STG.[Attorney_Office_Phone],'') OR
							  ISNULL(AC.[CellPhone],'') <> ISNULL(STG.[Attorney_Cell_Phone],'') OR
							  ISNULL(AC.[Fax],'') <> ISNULL(STG.[Attorney_Fax],'') OR
							  ISNULL(AC.[BARNumber],'') <> ISNULL(STG.[Attorney_Bar_Number],''))
					   
					     SET @ImportEnd = CURRENT_TIMESTAMP;
						 SET @Note = 'Update existing attorney case details'	
						 EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
						 SET @ImportStart = CURRENT_TIMESTAMP

						---------- Attorney case data inserts into the table Attorney_Case -----------------------------------------
						INSERT INTO [dbo].[Attorney_Case]([FK_Case], 
														  [FK_Attorney], 
														  [FK_AttorneyFirm],
														  [OrderNo], 
														  [RepresentationType], 
														  [FullName], 
														  [Suffix],							    
														  [Address1], 
														  [Address2], 
														  [City], 
														  [FK_State], 
														  [Zip4], 
														  [Email], 
														  [OfficePhone], 
														  [CellPhone], 
														  [Fax], 
														  [LawFirmId], 
														  [BARNumber], 															
														  [CreatedOn], 
														  [CreatedBy], 
														  [ModifiedOn], 
														  [ModifiedBy], 
														  [IsDeleted],
														  [FirstName],
														  [MI],
														  [LastName])
							SELECT DISTINCT C.[ID_Case],
										ISNULL(A.[ID_Attorney],0),
										AF.ID_AttorneyFirm,
										(ISNULL((SELECT COUNT(1) FROM [dbo].[Attorney_Case] WHERE FK_Case = C.ID_Case),0) + RANK() OVER(PARTITION BY [Court_Case_Num] ORDER BY ISNULL(A.[ID_Attorney],0))) OrderNo,
										STG.[ATTORNEY_REPRESENTATION_FLAG],
										STG.[Attorney_FULLName],
										STG.[Attorney_Suffix],
										STG.[Attorney_Address 1],
										STG.[Attorney_Address 2],
										STG.[Attorney_City],
										ID_State,
										STG.[Attorney_Zip4],
										STG.[Attorney_Email],
										STG.[Attorney_Office_Phone],
										STG.[Attorney_Cell_Phone],
										STG.[Attorney_Fax],
										NULL,
										STG.[Attorney_Bar_Number],
										@CurrentDate,
										0,
										@CurrentDate,
										0,
										0,
										STG.ATTORNEY_FIRSTNAME,
										STG.ATTORNEY_MI,
										STG.ATTORNEY_LASTNAME
										FROM [Stg].[Case_Attorney] STG
										JOIN [dbo].[Cases] C ON C.CaseNumber = STG.[Court_Case_Num]
										LEFT JOIN [dbo].[Attorney] A ON ISNULL(A.[FirstName],'') = ISNULL(STG.[Attorney_FirstName],'')
																	AND ISNULL(A.MI,'') = ISNULL(STG.[Attorney_MI],'')
																	AND ISNULL(A.[LastName],'') = ISNULL(STG.[Attorney_LastName],'') 
																	AND ISNULL(A.BARNumber,'') = ISNULL(STG.[Attorney_Bar_Number],'')							
										LEFT JOIN [dbo].[Attorney_Case] AC ON ISNULL(AC.[FirstName],'') = ISNULL(STG.[Attorney_FirstName],'')
																	          AND ISNULL(AC.MI,'') = ISNULL(STG.[Attorney_MI],'')
																	          AND ISNULL(AC.[LastName],'') = ISNULL(STG.[Attorney_LastName],'') 
																	          AND ISNULL(AC.BARNumber,'') = ISNULL(STG.[Attorney_Bar_Number],'')	
																	          AND ISNULL(AC.[FK_Case],0) = ISNULL(C.[ID_Case],0)
										LEFT JOIN [dbo].[AttorneyFirm] AF ON ISNULL(AF.[FK_Attorney],0) = ISNULL(A.ID_Attorney,0)
																			  AND ISNULL(AF.[FirmName],'') = ISNULL(STG.[FIRM_NAME],'')
										LEFT JOIN [dbo].[State] S ON S.States = STG.[Attorney_State] 
																			  AND S.[IsDeleted] = 0
										WHERE STG.ISVALIDRECORD = 1 AND AC.[ID_Attorney_Case] IS NULL
	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added attorney case details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_AWW]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Data_Load_AWW]
AS
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load Judge data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_AWW]
usp_Clean_Reseed_Table  '[dbo].[AWW_Case]'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()

		MERGE [dbo].[AWW_Case] AS Target
				using (SELECT ID_Case
						  ,[COURT_CASE_NUM]
						  ,[SO_AWW_AMOUNT]
						  ,[SO_MMI_DATE]
						  ,[PFB_MMI_DATE]
						  ,[PFB_AWW_AMOUNT]
						  ,[AWW_STATUS]
						  ,[SO_AWW_HOUR_WAGE]
						  ,[ISVALIDRECORD]
						  ,SEQ_NO
					  FROM [Stg].[AWW] AWW
					INNER JOIN [dbo].[Cases] CAS ON AWW.COURT_CASE_NUM= CAS.CaseNumber
						WHERE IsValidRecord=1
				)AS Source
				ON isnull(TRIM(TARGET.[Case_Num]),'') = isnull(TRIM(source.[COURT_CASE_NUM]),'')
				AND isnull(TARGET.[AWW_STATUS],'') = isnull(TRIM(source.[AWW_STATUS]),'')
				AND isnull(TARGET.[SO_MMI_DATE],'1900-01-01') = isnull(SOURCE.[SO_MMI_DATE],'1900-01-01')
				AND isnull(TARGET.[PFB_MMI_DATE],'1900-01-01') = isnull(SOURCE.[PFB_MMI_DATE],'1900-01-01')
				AND source.SEQ_NO=TARGET.SEQ_TNO
		-- For Inserts
		WHEN NOT matched BY target THEN
					INSERT 
						( [FK_Case]
						  ,[Case_Num]
						  ,[SO_AWW_Amount]
						  ,[SO_MMI_Date]
						  ,[PFB_MMI_Date]
						  ,[PFB_AWW_Amount]
						  ,[AWW_STATUS]
						  ,[SO_AWW_HOUR_WAGE]
						  ,[CreatedOn]
						  ,[SEQ_TNO])
					VALUES
					( 
							source.ID_Case
						  ,source.[COURT_CASE_NUM]
						  ,source.[SO_AWW_Amount]
						  ,source.[SO_MMI_Date]
						  ,source.[PFB_MMI_Date]
						  ,source.[PFB_AWW_Amount]
						  ,source.[AWW_STATUS]
						  ,source.[SO_AWW_HOUR_WAGE]
						  ,@CurrentDate
						  ,SEQ_NO)
           
						-- For Updates
		WHEN matched THEN
					UPDATE SET 
					TARGET.[SO_AWW_Amount] = SOURCE.[SO_AWW_Amount],
					TARGET.[SO_MMI_Date] = SOURCE.[SO_MMI_Date],
					TARGET.[PFB_MMI_Date] = source.[PFB_MMI_Date],
					TARGET.[PFB_AWW_Amount] = source.[PFB_AWW_Amount],
					TARGET.[AWW_STATUS] = SOURCE.[AWW_STATUS],
					TARGET.[SO_AWW_HOUR_WAGE] = SOURCE.[SO_AWW_HOUR_WAGE],
					TARGET.[ModifiedOn] = @CurrentDate,
					TARGET.[SEQ_TNO]=SOURCE.SEQ_NO;
	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Carrier]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*==========================================================================
	Author:Praveen
	Created Date: 02-JAN-2023
	Description:To transform and load master OJCC data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Carrier]
===========================================================================*/
CREATE PROCEDURE [dbo].[usp_Data_Load_Carrier]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

--Merge for Carrier Case Table 
	MERGE [dbo].Carrier_Case AS Target
	using (SELECT DISTINCT
			  C.ID_Group_Num,
			  C.ID_Co_Num,
			  C.Parent_Name,
			  C.[Name] AS FullName,
			  C.PO_Box_or_Street_Address1,
			  C.PO_Box_or_Street_Address2,
			  C.Carrier_City,
			  C.State,
			  C.Zip,
			  C.Phone,
			  C.InjuryReportedDate,
			  C.InjurySystemCreatedDate,
			  C.PolicyNumber,
			  C.ClaimNumber,
			  C.Coverage,
			  C.FederalEmployerID,
			  C.CoverageAmountLimit,
			  C.LossDate,
			  CT.ID_Carrier_Master,CS.ID_Case, RCT.ID_CoverageType--,AD.ID_Adjuster
		    FROM 
				[Stg].VwCarrier C 
				LEFT JOIN [dbo].Carrier_Master CT ON 
					   CT.Carrier_Parent = C.Parent_Name
					   AND CT.ALT_CO_Name = C.[Name]
					   AND CT.Insured_City = C.Carrier_City
					   AND CT.Insured_Zip4 = C.Zip
					   AND CT.INS_CA_Phone = C.[Phone]
					   AND CT.Group_Number = C.[ID_Group_Num]
				LEFT JOIN [dbo].[Cases] CS ON CS.CaseNumber = C.Case_Num
				--LEFT JOIN [dbo].[Adjuster] AD ON AD.Salutation = 'Which column'
				LEFT JOIN [dbo].[RefCoverageType] RCT ON RCT.CoverageTypeName = C.[Coverage]
			)AS Source
	ON ISNULL(TARGET.FK_Carrier,'') = ISNULL(source.ID_Carrier_Master,'')
	AND ISNULL(TARGET.FK_Case,'') = ISNULL(Source.ID_Case,'')
	AND TARGET.Parent_Name=source.Parent_Name
	AND TARGET.[Name] =source.FullName
	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT ( FK_Case
			  ,FK_Carrier
			  ,FK_Adjuster
			  ,ID_Group_Num
			  ,ID_Co_Num
			  ,Parent_Name
			  ,[Name]
			  ,PO_Box_or_Street_Address1
			  ,PO_Box_or_Street_Address2
			  ,Carrier_City
			  ,State
			  ,Zip
			  ,Phone
			  ,InjuryReportedDate
			  ,InjurySystemCreatedDate
			  ,PolicyNumber
			  ,ClaimNumber
			  ,FK_CoverageType
			  ,FederalEmployerID
			  ,CoverageAmountLimit
			  ,LossDate
			  ,OrderNo
			  ,CreatedOn
			  )
	  VALUES (SOURCE.ID_Case,
			  SOURCE.ID_Carrier_Master,
			  NULL,--SOURCE.ID_Adjuster, Adjuster table has no value
			  SOURCE.ID_Group_Num,
			  SOURCE.ID_Co_Num,
			  SOURCE.Parent_Name,
			  SOURCE.[FullName],
			  SOURCE.PO_Box_or_Street_Address1,
			  SOURCE.PO_Box_or_Street_Address2,
			  SOURCE.Carrier_City,
			  SOURCE.State,
			  SOURCE.Zip,
			  SOURCE.Phone,
			  SOURCE.InjuryReportedDate,
			  SOURCE.InjurySystemCreatedDate,
			  SOURCE.PolicyNumber,
			  SOURCE.ClaimNumber,
			  SOURCE.ID_CoverageType,
			  SOURCE.FederalEmployerID,
			  SOURCE.CoverageAmountLimit,
			  SOURCE.LossDate,
			  NULL,--SOURCE.[Carrier_1_Claim_Number], - Mapping need to be established
			  @CurrentDate)
	-- For Updates
	WHEN matched THEN
	  UPDATE SET 
		 TARGET.FK_Case						=SOURCE.ID_Case,
		 TARGET.FK_Carrier	 				=SOURCE.ID_Carrier_Master,
		 TARGET.FK_Adjuster	 				=NULL,--SOURCE.ID_Adjuster,
		 TARGET.ID_Group_Num				=SOURCE.ID_Group_Num,
		 TARGET.ID_Co_Num					=SOURCE.ID_Co_Num,
		 TARGET.Parent_Name					=SOURCE.Parent_Name,
		 TARGET.[Name]						=SOURCE.[FullName],
		 TARGET.PO_Box_or_Street_Address1	=SOURCE.PO_Box_or_Street_Address1,
		 TARGET.PO_Box_or_Street_Address2	=SOURCE.PO_Box_or_Street_Address2,
		 TARGET.Carrier_City				=SOURCE.Carrier_City,
		 TARGET.State						=SOURCE.State,
		 TARGET.Zip							=SOURCE.Zip,
		 TARGET.Phone						=SOURCE.Phone,
		 TARGET.InjuryReportedDate	 		=SOURCE.InjuryReportedDate,
		 TARGET.InjurySystemCreatedDate	 	=SOURCE.InjurySystemCreatedDate,
		 TARGET.PolicyNumber	 			=SOURCE.PolicyNumber,
		 TARGET.ClaimNumber	 				=SOURCE.ClaimNumber,
		 TARGET.FK_CoverageType	 			=SOURCE.ID_CoverageType,
		 TARGET.FederalEmployerID	 		=SOURCE.FederalEmployerID,
		 TARGET.CoverageAmountLimit	 		=SOURCE.CoverageAmountLimit,
		 TARGET.LossDate	 				=SOURCE.LossDate,
		 TARGET.OrderNo	 					=NULL,--SOURCE.[Carrier_1_Claim_Number],			  
		 TARGET.ModifiedOn					= @CurrentDate;


	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Carrier_Master]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*==========================================================================
	Author:Praveen
	Created Date: 16-JAN-2023
	Description:To transform and load master Carrier maste data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Carrier_Master]
===========================================================================*/
CREATE PROCEDURE [dbo].[usp_Data_Load_Carrier_Master]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

 --Merge for Carrier Table 
	MERGE [dbo].Carrier_Master AS Target
	using (SELECT DISTINCT
			    C.INS_CA_ID
			   ,C.Group_Number
			   ,C.Entity_Type
			   ,C.CARRIER_PARENT
			   ,C.INS_CA_Name
			   ,C.ALT_CO_Name
			   ,C.Insured_Address1
			   ,C.Insured_Address2
			   ,C.Insured_City
			   ,C.Insured_State
			   ,C.Insured_Zip4
			   ,C.INS_CA_Phone
			   ,C.Carrier_FEIN
			   ,C.Data_SOURCE
		    FROM 
				[Stg].[Carrier_Master] C 
			WHERE 
				IsValidRecord = 1
				
			)AS SOURCE
	ON ISNULL(TARGET.INS_CA_ID,'') = ISNULL(SOURCE.INS_CA_ID,'')
	   AND ISNULL(TARGET.INS_CA_Name,'') = ISNULL(SOURCE.INS_CA_Name,'')
	   AND ISNULL(TARGET.CARRIER_PARENT,'') = ISNULL(SOURCE.CARRIER_PARENT,'')
	  
	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT (  INS_CA_ID
			   ,Group_Number
			   ,Entity_Type
			   ,CARRIER_PARENT
			   ,INS_CA_Name
			   ,ALT_CO_Name
			   ,Insured_Address1
			   ,Insured_Address2
			   ,Insured_City
			   ,Insured_State
			   ,Insured_Zip4
			   ,INS_CA_Phone
			   ,Carrier_FEIN
			   ,Data_SOURCE
			   ,CreatedOn
			  )
	  VALUES (  SOURCE.INS_CA_ID
			   ,SOURCE.Group_Number
			   ,SOURCE.Entity_Type
			   ,SOURCE.CARRIER_PARENT
			   ,SOURCE.INS_CA_Name
			   ,SOURCE.ALT_CO_Name
			   ,SOURCE.Insured_Address1
			   ,SOURCE.Insured_Address2
			   ,SOURCE.Insured_City
			   ,SOURCE.Insured_State
			   ,SOURCE.Insured_Zip4
			   ,SOURCE.INS_CA_Phone
			   ,SOURCE.Carrier_FEIN
			   ,SOURCE.Data_SOURCE
			   ,@CurrentDate)
	-- For Updates
	WHEN matched THEN
	  UPDATE SET  
		  TARGET.INS_CA_ID				= TARGET.INS_CA_ID,	
		  TARGET.Group_Number			= TARGET.Group_Number,		
		  TARGET.Entity_Type			= TARGET.Entity_Type,	
		  TARGET.CARRIER_PARENT			= TARGET.CARRIER_PARENT,		
		  TARGET.INS_CA_Name			= TARGET.INS_CA_Name,	
		  TARGET.ALT_CO_Name			= TARGET.ALT_CO_Name,		
		  TARGET.Insured_Address1		= TARGET.Insured_Address1,	
		  TARGET.Insured_Address2		= TARGET.Insured_Address2,	
		  TARGET.Insured_City			= TARGET.Insured_City,	
		  TARGET.Insured_State			= TARGET.Insured_State,		
		  TARGET.Insured_Zip4			= TARGET.Insured_Zip4,	
		  TARGET.INS_CA_Phone			= TARGET.INS_CA_Phone,		
		  TARGET.Carrier_FEIN			= TARGET.Carrier_FEIN,		
		  TARGET.Data_SOURCE			= TARGET.Data_SOURCE,	
		  TARGET.ModifiedOn				= @CurrentDate;




	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Case]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Case]
AS
/*===========================================
	Author:Praveen
	Created Date: 05-JAN-2023
	Description:To transform and load Cases data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Case]
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

 --Merge for Case Table 
	MERGE [dbo].Cases AS Target
	using (SELECT CD.*,AST.ID_AccidentSubType,J.ID_Judge,ST.ID_CaseStatus,
				SV.ID_State AS SV_ID_State,AR.ID_AgeRange,S.ID_State,AN.ID_AccidentNature,
				LS.ID_LitigationSubStatus,C.ID_County,RCS.ID_CaseStatus AS Government_Record_Status_ID
				,CASE WHEN CD.[Confidential_Flag] = 'YES' OR CD.[Confidential_Flag] = '0' THEN 0
					  WHEN CD.[Confidential_Flag] = 'NO' OR CD.[Confidential_Flag] = '1' THEN 1 END AS ConfidentialFlag
		    FROM 
				[Stg].Case_Data CD
				LEFT JOIN [dbo].[RefCaseStatus] ST ON ST.CaseStatus = CD.[Case_Status]
				LEFT JOIN [dbo].[RefAccidentSubType] AST ON AST.AccidentSubType = CD.[Accident_Sub_Type]
				LEFT JOIN [dbo].[Judge] j ON J.LastName =CD.[Judge_1_Last_Name_Assigned_to_Case] 
				AND J.Initials = CD.[Judge_Assigned_to_case_INITIALS] AND j.[IsDeleted]=0
				LEFT JOIN [dbo].[State] SV ON SV.States = CD.[Venue_State]
				LEFT JOIN [dbo].[RefAgeRange] AR ON AR.AgeRange = CD.[Plaintiff_Rated_Age]
				LEFT JOIN [dbo].[State] S ON S.States = CD.[Accident_State]
				LEFT JOIN [dbo].[RefAccidentNature] AN ON AN.AccidentNature = CD.[Nature_of_Accident]
				LEFT JOIN [dbo].[RefLitigationSubStatus] LS ON LS.LitigationSubStatus = CD.[Litigation_Sub_Status]
				LEFT JOIN [dbo].[County] C ON C.[County] = CD.[Accident_County]
				LEFT JOIN [dbo].[RefCaseStatus] RCS ON RCS.CaseStatus = CD.Government_Record_Status
			WHERE IsValidRecord = 1
			)AS SOURCE
	ON TARGET.CaseNumber = SOURCE.Court_Case_Number
	   
	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT (   CaseNumber
				,CaseName
				,Status
				,StatusOn
				,DateofAccidentIllness
				,Accident_Type_LoB
				,FK_Accident_SubType
				,FK_Judge
				,Mediator
				,Court_District_City
				,FK_Venue_State
				,Accident_LocationName
				,InjuryOccuredLocation
				,FK_AgeRange
				,Accident_Address
				,Accident_City
				,FK_State
				,Accident_ZIP
				,Accident_Country
				,Specific_Work
				,Accident_Description
				,FK_AccidentNature
				,DisabilityCharacter
				,Pre_Existing_Condition_Flag
				,Pre_Existing_Condition_Description
				,Litigation_Status
				,FK_Litigation_Sub_Status
				,AssignedOn
				,Government_Record_Status
				,Confidential_Flag
			    ,CreatedOn
			  )
	  VALUES (
			  SOURCE.[Court_Case_Number],
			  SOURCE.[Case_Name],
			  SOURCE.ID_CaseStatus,
			  SOURCE.[Case_Status_Date],
			  SOURCE.[Date_of_Accident_or_Illlness],
			  SOURCE.[Accident_Type],
			  SOURCE.ID_AccidentSubType,
			  SOURCE.ID_Judge,
			  SOURCE.[Mediator_Assigned_to_Case],
			  SOURCE.[Court_District_Venue],
			  SOURCE.SV_ID_State,
			  SOURCE.[Accident_Location_Name],
			  SOURCE.Accident_Injured_Person_Other_Location_Where_Injury_Occurred,
			  SOURCE.ID_AgeRange,
			  SOURCE.[Accident_Street_Address],
			  SOURCE.[Accident_City],
			  SOURCE.ID_State,
			  SOURCE.[Accident_Zip],
			  SOURCE.ID_County,
			  SOURCE.[Specific_work],
			  SOURCE.[Detailed_Description-of_Accident],
			  SOURCE.ID_AccidentNature,
			  SOURCE.[Character_of_Disability],
			  SOURCE.[Pre_Existing_Condition_Flag],
			  SOURCE.[Pre_Existing_Condition_Description],
			  SOURCE.[Litigation_Status],
			  SOURCE.ID_LitigationSubStatus,
			  SOURCE.[Assigned_Date],
			  SOURCE.Government_Record_Status_ID,
			  SOURCE.[ConfidentialFlag],
			  @CurrentDate
			  )
	-- For Updates
	WHEN matched  THEN
	  UPDATE SET 
			TARGET.CaseNumber									=SOURCE.[Court_Case_Number],
			TARGET.CaseName										=SOURCE.[Case_Name],
			TARGET.Status										=SOURCE.ID_CaseStatus,
			TARGET.StatusOn										=SOURCE.[Case_Status_Date],
			TARGET.DateofAccidentIllness						=SOURCE.[Date_of_Accident_or_Illlness],
			TARGET.Accident_Type_LoB							=SOURCE.[Accident_Type],
			TARGET.FK_Accident_SubType							=SOURCE.ID_AccidentSubType,
			TARGET.FK_Judge										=SOURCE.ID_Judge,
			TARGET.Mediator									=SOURCE.[Mediator_Assigned_to_Case],
			TARGET.Court_District_City							=SOURCE.[Court_District_Venue],
			TARGET.FK_Venue_State								=SOURCE.SV_ID_State,
			TARGET.Accident_LocationName						=SOURCE.[Accident_Location_Name],
			TARGET.InjuryOccuredLocation						=SOURCE.Accident_Injured_Person_Other_Location_Where_Injury_Occurred,
			TARGET.FK_AgeRange									=SOURCE.ID_AgeRange,
			TARGET.Accident_Address								=SOURCE.[Accident_Street_Address],
			TARGET.Accident_City								=SOURCE.[Accident_City],
			TARGET.FK_State										=SOURCE.ID_State,
			TARGET.Accident_ZIP									=SOURCE.[Accident_Zip],
			TARGET.Accident_Country								=SOURCE.ID_County,
			TARGET.Specific_Work								=SOURCE.[Specific_work],
			TARGET.Accident_Description							=SOURCE.[Detailed_Description-of_Accident],
			TARGET.FK_AccidentNature							=SOURCE.ID_AccidentNature,
			TARGET.DisabilityCharacter							=SOURCE.[Character_of_Disability],
			TARGET.Pre_Existing_Condition_Flag					=SOURCE.[Pre_Existing_Condition_Flag],
			TARGET.Pre_Existing_Condition_Description			=SOURCE.[Pre_Existing_Condition_Description],
			TARGET.Litigation_Status							=SOURCE.[Litigation_Status],
			TARGET.FK_Litigation_Sub_Status						=SOURCE.ID_LitigationSubStatus,
			TARGET.AssignedOn									=SOURCE.[Assigned_Date],
			TARGET.Government_Record_Status						=SOURCE.Government_Record_Status_ID,
			TARGET.Confidential_Flag							=SOURCE.[ConfidentialFlag],
			TARGET.ModifiedOn									= @CurrentDate

 WHEN NOT MATCHED BY SOURCE 
 THEN UPDATE SET TARGET.IsDeleted = 1;
	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Defendant]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Defendant]
AS
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Defendant]
----[dbo].[usp_Clean_Reseed_Table] '[dbo].[Defendant]'

----[dbo].[usp_Clean_Reseed_Table] '[dbo].[Defendant_Case]'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	MERGE [dbo].[Defendant] AS Target
	using (SELECT DISTINCT
				 [Defendant_Name],
				 DF.[Case_Num]
				,ISNULL([Defendant_Parent],'')[Defendant_Parent]
				,ISNULL([Defendant_Phone],'') [Defendant_Phone]
				,ISNULL([Defendant_Street_or_P.O._Box_Address1],'')[Defendant_Street_or_P.O._Box_Address1]
				,ISNULL([Defendant_Street_or_P.O._Box_Address2],'')[Defendant_Street_or_P.O._Box_Address2]
				,[Defendant_City]
				,[Defendant_State]
				,[Defendant_Zip]
				,ISNULL([Defendat_Self_Insured_Licensed_Number],'') [Defendat_Self_Insured_Licensed_Number]
				,[Defendant_Insured_Status]
				,ISNULL([Defendant_Self_Insured_Name],'') [Defendant_Self_Insured_Name]
				,TRIM(ISNULL([Defendant_FEIN],'')) [Defendant_FEIN],ID_State,ID_InsuredStatus
		    FROM [Stg].[Defendant] DF 
				LEFT JOIN dbo.State St ON DF.Defendant_State = St.States
				LEFT JOIN dbo.RefInsuredStatus INS ON INS.InsuredStatus = DF.Defendant_Insured_Status
				WHERE DF.IsValidRecord=1
				--order by [Defendant_Name],[Defendant_Parent],[Defendant_Phone]
			)AS Source
	ON TRIM(TARGET.Defendant_Name) = TRIM(source.[Defendant_Name])
	   AND TRIM(ISNULL(TARGET.[Defendant_Parent],'')) = TRIM(ISNULL(source.[Defendant_Parent],''))
	   AND TRIM(ISNULL(TARGET.[Case_Num],'')) = TRIM(ISNULL(source.[Case_Num],''))
	   AND TRIM(ISNULL(TARGET.[Defendant_FEIN],'')) = TRIM(ISNULL(source.[Defendant_FEIN],''))
	   AND TRIM(ISNULL(TARGET.[Defendant_Self_Insured_Name],'')) = TRIM(ISNULL(source.[Defendant_Self_Insured_Name],''))	   
	   	-- For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
           (Defendant_Name
		   ,[Case_Num]
			,Defendant_Parent
			,Defendant_Phone
			,Defendant_Address1
			,Defendant_Address2
			,Defendant_City
			,FK_State
			,Defendant_Zip
			,Defendant_Licensed_Number
			,FK_InsuredStatus
			,Defendant_Self_Insured_Name
			,Defendant_FEIN
           ,[CreatedOn] )
     VALUES
           (
		   source.[Defendant_Name]
		   ,source.[Case_Num]
			,source.[Defendant_Parent]
			,source.[Defendant_Phone]
			,source.[Defendant_Street_or_P.O._Box_Address1]
			,source.[Defendant_Street_or_P.O._Box_Address2]
			,source.[Defendant_City]
			,source.[ID_State]
			,source.[Defendant_Zip]
			,source.[Defendat_Self_Insured_Licensed_Number]
			,source.[ID_InsuredStatus]
			,source.[Defendant_Self_Insured_Name]
			,source.[Defendant_FEIN]
           ,@CurrentDate)
           
	-- For Updates
	WHEN matched THEN
	  UPDATE SET TARGET.[Defendant_Parent] = SOURCE.[Defendant_Parent],
				 TARGET.[Case_Num] = SOURCE.[Case_Num],
				 TARGET.Defendant_Phone = SOURCE.Defendant_Phone,
				 TARGET.FK_State = SOURCE.ID_State,
				 TARGET.Defendant_Address1 = SOURCE.[Defendant_Street_or_P.O._Box_Address1],
				 TARGET.Defendant_Address2 = SOURCE.[Defendant_Street_or_P.O._Box_Address2],
				 TARGET.Defendant_City = SOURCE.Defendant_City,
				 TARGET.Defendant_Zip = SOURCE.Defendant_Zip,
				 TARGET.Defendant_Self_Insured_Name = SOURCE.Defendant_Self_Insured_Name,
				 TARGET.Defendant_FEIN = SOURCE.Defendant_FEIN,
				 TARGET.FK_InsuredStatus = SOURCE.ID_InsuredStatus,
				 TARGET.ModifiedOn = @CurrentDate;



-- Case
	MERGE [dbo].[Defendant_Case] AS Target
	using (Select DISTINCT
			ID_Defendant
			,ID_Case
			,SDF.[Case_Num]
			,ISNULL([Defendant_Claim_Number],'')[Defendant_Claim_Number]
			,ISNULL([Date_Injury_or_Illness_Reported_to_Employer],'1900-01-01') [Date_Injury_or_Illness_Reported_to_Employer]
			from [Stg].[Defendant] SDF
			INNER JOIN [dbo].[Defendant] TDF ON SDF.[Defendant_Name]= TDF.Defendant_Name AND SDF.[Case_Num]= TDF.[Case_Num]
			AND ISNULL(SDF.[Defendant_Self_Insured_Name],'')= TDF.Defendant_Self_Insured_Name
			AND ISNULL(SDF.[Case_Num],'')= TDF.[Case_Num]
			INNER JOIN [dbo].[Cases] CAS ON SDF.CASE_NUM= CAS.CaseNumber 
			WHERE SDF.IsValidRecord=1
			)AS Source
	ON TRIM(TARGET.Case_Num) = TRIM(source.[CASE_NUM])
	AND ISNULL(TARGET.ReportedInjuryDate,'1900-01-01') = ISNULL(source.[Date_Injury_or_Illness_Reported_to_Employer],'1900-01-01')
	AND TRIM(TARGET.ClaimNumber) = TRIM(source.[Defendant_Claim_Number]) 
	AND TARGET.FK_Defendent = source.[ID_Defendant] 
	---- For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
	(	FK_Defendent
		,FK_Case
		,Case_Num
		,ClaimNumber
		,ReportedInjuryDate
		,CreatedOn
		)
     VALUES
     (		   
		 source.ID_Defendant
		,source.ID_Case
		,source.CASE_NUM
		,source.Defendant_Claim_Number
		,source.[Date_Injury_or_Illness_Reported_to_Employer]
        ,@CurrentDate
		   
    )
           
	---- For Updates
	WHEN matched THEN
	  UPDATE SET	TARGET.FK_Defendent=source.ID_Defendant,
					TARGET.FK_Case=source.ID_Case,
					TARGET.CASE_NUM=source.CASE_NUM,
					TARGET.ClaimNumber=source.Defendant_Claim_Number,
					TARGET.ReportedInjuryDate=source.[Date_Injury_or_Illness_Reported_to_Employer],
					TARGET.ModifiedOn = @CurrentDate;  

EXEC  [dbo].[usp_Update_Defendant_CaseSEQNo]
	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Determination]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Determination]
AS
/*===========================================
	Author:Praveen
	Created Date: 09-JAN-2023
	Description:To transform and load Determination data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Determination]
	[dbo].[usp_Clean_Reseed_Table] '[dbo].[Determination_Case]'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

 --Merge for Case Table 
	MERGE [dbo].[Determination_Case] AS Target
	using ( SELECT DISTINCT 
			   D.[Determination_Amount]
			  ,D.[Determination_Payor_Name]
			  ,D.[Determination_Payor_Amount]
			  ,D.[Determination_Date]
			  ,CASE WHEN D.[Confidential_Flag] = 'Y' OR D.[Confidential_Flag] = '0' THEN 0
					WHEN D.[Confidential_Flag] = 'N' OR D.[Confidential_Flag] = '1' THEN 1 END AS Confidential_Flag
			  ,D.[Court_Decision]
			  ,D.[Other Decision_Information]
			  ,D.[Associated_Files]
			  ,D.[Determination_Award_Costs]
			  ,D.[Determination_Attorney_Fees_Award]
			  ,D.[Benefits_Secured_Amount]
			  ,D.[Total_Determination_Award]
			  ,DT.ID_DeterminationType,C.ID_Case
			  ,D.DETERMINATION_UNQ_NO
			FROM [Stg].[Determination] D
			INNER JOIN [dbo].[Cases] C ON C.CaseNumber = D.[Court_Case_Number]
			INNER JOIN [dbo].[RefDeterminationType] DT ON D.[Determination_Type] = DT.DeterminationType
			WHERE IsValidRecord = 1
			)AS SOURCE
	ON TARGET.FK_Case = SOURCE.ID_Case 
	AND ISNULL(TARGET.DeterminationDate,'1901-01-01') = ISNULL(SOURCE.[Determination_Date],'1901-01-01')  --Need to consider other columns to obtain unique keys.
	AND ISNULL(Amount,0)=  ISNULL([Determination_Amount],0) 
	AND TARGET.DETERMINATION_UNQ_NO=SOURCE.DETERMINATION_UNQ_NO
	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT (  
				 FK_Case
				,FK_DeterminationType
				,Amount
				,PayorName
				,PayorAmount
				,DeterminationDate
				,IsConfidential
				,CourtDecision
				,OtherDecisionInformation
				,AssociatedFiles
				,AwardCostAmount
				,AttorneyFeeAmount
				,OrderNumber
				,BenefitSecuredAmount
				,TotalAwardAmount
				,EffectedOn
				,CreatedOn
				,DETERMINATION_UNQ_NO
			  )
	  VALUES (
			   SOURCE.ID_Case
			  ,SOURCE.ID_DeterminationType
			  ,SOURCE.[Determination_Amount]
			  ,SOURCE.[Determination_Payor_Name]
			  ,SOURCE.[Determination_Payor_Amount]
			  ,SOURCE.[Determination_Date]
			  ,SOURCE.[Confidential_Flag]
			  ,SOURCE.[Court_Decision]
			  ,SOURCE.[Other Decision_Information]
			  ,SOURCE.[Associated_Files]
			  ,SOURCE.[Determination_Award_Costs]
			  ,SOURCE.[Determination_Attorney_Fees_Award]
			  ,NULL
			  ,SOURCE.[Benefits_Secured_Amount]
			  ,SOURCE.[Total_Determination_Award]
			  ,NULL
			  ,@CurrentDate
			  ,SOURCE.DETERMINATION_UNQ_NO
			  )
	-- For Updates
	WHEN matched THEN
	  UPDATE SET 
			TARGET.FK_Case						= SOURCE.ID_Case
			,TARGET.FK_DeterminationType			= SOURCE.ID_DeterminationType
			,TARGET.Amount						= SOURCE.[Determination_Amount]
			,TARGET.PayorName					= SOURCE.[Determination_Payor_Name]
			,TARGET.PayorAmount					= SOURCE.[Determination_Payor_Amount]
			,TARGET.DeterminationDate			= SOURCE.[Determination_Date]
			,TARGET.IsConfidential				= SOURCE.[Confidential_Flag]
			,TARGET.CourtDecision				= SOURCE.[Court_Decision]
			,TARGET.OtherDecisionInformation		= SOURCE.[Other Decision_Information]
			,TARGET.AssociatedFiles				= SOURCE.[Associated_Files]
			,TARGET.AwardCostAmount				= SOURCE.[Determination_Award_Costs]
			,TARGET.AttorneyFeeAmount			= SOURCE.[Determination_Attorney_Fees_Award]
			,TARGET.OrderNumber					= NULL
			,TARGET.BenefitSecuredAmount			= SOURCE.[Benefits_Secured_Amount]
			,TARGET.TotalAwardAmount				= SOURCE.[Total_Determination_Award]
			,TARGET.EffectedOn					= NULL
			,TARGET.ModifiedOn						    = @CurrentDate
			,TARGET.DETERMINATION_UNQ_NO=SOURCE.DETERMINATION_UNQ_NO;
			EXEC [dbo].[usp_Update_DeterminationSEQNo]

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Future_Damages]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_Data_Load_Future_Damages]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
 BEGIN TRANSACTION;

	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_Future_Damages'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()
	

 -------------------------- Merge for FutureDamages_Case Table ----------------------------------
   MERGE [dbo].[FutureDamages_Case] AS TARGET
   USING (
		   SELECT  STG.[Case_Num], 
				   C.[ID_Case],
				   [FUTURE_Lien_Amount], 
				   [FUTURE_Benefits_MO], 
				   [FUTURE_Benefits_IND],
				   [FUTURE_Benefits_Disability],
				   RDTA.[ID_DisabilityType]				   
		   FROM [Stg].[Future_Damages] STG
		   JOIN [dbo].[Cases] C ON C.CaseNumber = STG.[Case_Num]
		   LEFT JOIN [dbo].[RefDisabilityType] RDTA ON RDTA.[DisabilityType] = [FUTURE_Disability_Type] AND RDTA.Mode = 'A'
		   --LEFT JOIN [dbo].[RefDisabilityType] RDTO ON RDTO.[DisabilityType] = [FUTURE_Disability_Type] AND RDTO.Mode = 'O' -- Original
		   --LEFT JOIN [dbo].[RefDisabilityType] RDTS ON RDTS.[DisabilityType] = [FUTURE_Disability_Type] AND RDTS.Mode = 'S' -- Severe
		   WHERE [IsValidRecord] = 1   
   ) AS SOURCE
   ON TARGET.[FK_Case] = SOURCE.[ID_Case]     
   WHEN NOT MATCHED BY TARGET THEN
   INSERT ([FK_Case], 
           [LienAmount], 
		   [MOBenefitAmount], 
		   [INDBenefitTotalAmount], 
		   [INDBenefitSuppAmount], 
		   [INDPTDBenefitAmount], 
		   [DisabilityBenefitAmount], 
		   [FK_DisabilityType], 
		   [FK_DisabilityTypeOriginal], 
		   [FK_DisabilityTypeSevere], 
		   [CreatedOn], 
		   [CreatedBy], 
		   [ModifiedOn], 
		   [ModifiedBy], 
		   [IsDeleted])
   VALUES( SOURCE.[ID_Case],
		  SOURCE.[FUTURE_Lien_Amount],
		  SOURCE.[FUTURE_Benefits_MO], 
		  SOURCE.[FUTURE_Benefits_IND], 
		  NULL,
		  NULL,
		  SOURCE.[FUTURE_Benefits_Disability],
		  SOURCE.[ID_DisabilityType],
		  NULL,
		  NULL,
		  @CurrentDate,
		  0,
		  @CurrentDate,
		  0,
		  0
		  )
   WHEN MATCHED AND ( ISNULL(TARGET.[LienAmount],'') <>  ISNULL(SOURCE.[FUTURE_Lien_Amount],'') OR
					ISNULL(TARGET.[MOBenefitAmount],'') <> ISNULL(SOURCE.[FUTURE_Benefits_MO],'') OR
					ISNULL(TARGET.[INDBenefitTotalAmount],'') <> ISNULL(SOURCE.[FUTURE_Benefits_IND],'') OR
					ISNULL(TARGET.[DisabilityBenefitAmount],'') <> ISNULL(SOURCE.[FUTURE_Benefits_Disability],'') OR
					ISNULL(TARGET.[FK_DisabilityType],'') <> ISNULL(SOURCE.[ID_DisabilityType],'')) THEN
    UPDATE SET
   	TARGET.[LienAmount] =  SOURCE.[FUTURE_Lien_Amount],
	TARGET.[MOBenefitAmount] = SOURCE.[FUTURE_Benefits_MO], 
	TARGET.[INDBenefitTotalAmount] = SOURCE.[FUTURE_Benefits_IND], 
	TARGET.[DisabilityBenefitAmount] = SOURCE.[FUTURE_Benefits_Disability],
	TARGET.[FK_DisabilityType] = SOURCE.[ID_DisabilityType],		
	TARGET.[ModifiedOn] = @CurrentDate,
	TARGET.[ModifiedBy] = 0	;

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added/Updated Future Damage case details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Injury]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Injury]
AS
/*===========================================
	Author:Praveen
	Created Date: 09-JAN-2023
	Description:To transform and load Injury data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Injury]
[dbo].[usp_Clean_Reseed_Table] '[dbo].[Injury]'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;

  	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_Injury'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()

	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

   --Merge for Injury Table 
	MERGE [dbo].[Injury] AS TARGET
	USING (SELECT DISTINCT C.ID_Case,
							RBP.[ID_BodyPart],
							RBPL.[ID_BodyPartLocation],
							ICD.[ID_ICD_Code],
							[Injury_Name],
							[Body_Part_ID_Num],
							[Recovery_Date],
							(CASE WHEN RBP.[ID_BodyPart] IS NOT NULL THEN [OrderNo] ELSE 0 END) BodyPartOrderNo,
							(CASE WHEN [Injury_Name] IS NOT NULL THEN [OrderNo] ELSE 0 END) InjuryOrderNo,
							[OrderNo] ColumnOrderNo
			FROM [Stg].[VwInjuries] STG
			JOIN [dbo].[Cases] C ON C.[CaseNumber] = STG.[Case_number]
			LEFT JOIN [dbo].[RefBodyPart] RBP ON ISNULL(RBP.[BodyPart],'') = ISNULL(STG.[Body_Part_Name],'')
			LEFT JOIN [dbo].[RefBodyPartLocation] RBPL ON ISNULL(RBPL.[BodyPartLocation],'') = ISNULL(STG.[Body_Part_Loc],'')
			LEFT JOIN [dbo].[ICDCode_Master] ICD ON ISNULL(ICD.[ICD_Code],'') = ISNULL(STG.[ICD_Code],'')
			WHERE IsValidRecord = 1 
		)AS SOURCE
	ON TARGET.FK_Case = SOURCE.ID_Case	  	   
	-- For Inserts
	WHEN NOT MATCHED BY TARGET THEN
	  INSERT ([FK_Case], 
	          [FK_BodyPart], 
			  [FK_BodyPartLocation], 
			  [FK_ICD_Code], 
			  [BodyPart_IDNumber], 
			  [InjuryName], 
			  [RecoveryDate], 
			  [OrderNoBodyPart], 
			  [OrderNoInjury], 
              [OrderNoColumn],
			  [CreatedOn], 
			  [CreatedBy], 
			  [ModifiedOn], 
			  [ModifiedBy], 
			  [IsDeleted] 
			  )
	  VALUES (SOURCE.ID_Case
			  ,SOURCE.ID_BodyPart
			  ,SOURCE.ID_BodyPartLocation
			  ,SOURCE.ID_ICD_Code
			  ,SOURCE.Body_Part_ID_Num
			  ,SOURCE.Injury_Name
			  ,SOURCE.Recovery_Date
			  ,SOURCE.BodyPartOrderNo
			  ,SOURCE.InjuryOrderNo
			  ,SOURCE.ColumnOrderNo
			  ,@CurrentDate
			  ,0
			  ,@CurrentDate
			  ,0
			  ,0
			  )
	-- For Updates
	WHEN MATCHED  AND TARGET.OrderNoColumn = SOURCE.ColumnOrderNo
				  AND  (ISNULL(TARGET.FK_Case,0)  <> ISNULL(SOURCE.ID_Case,0) OR
						ISNULL(TARGET.FK_BodyPart,0) <> ISNULL(SOURCE.ID_BodyPart,0) OR
						ISNULL(TARGET.FK_BodyPartLocation,0) <> ISNULL(SOURCE.ID_BodyPartLocation,0) OR
						ISNULL(TARGET.FK_ICD_Code,0) <> ISNULL(SOURCE.ID_ICD_Code,0) OR
						ISNULL(TARGET.BodyPart_IDNumber,0) <> ISNULL(SOURCE.Body_Part_ID_Num,0) OR
						ISNULL(TARGET.InjuryName,'')	<> ISNULL(SOURCE.Injury_Name,'') OR
						ISNULL(TARGET.RecoveryDate,'1999-01-01') <> ISNULL(SOURCE.Recovery_Date,'1999-01-01') OR	
						ISNULL(TARGET.OrderNoBodyPart,0) <> ISNULL(SOURCE.BodyPartOrderNo,0) OR
						ISNULL(TARGET.OrderNoInjury,0) <> ISNULL(SOURCE.InjuryOrderNo,0))THEN
	  UPDATE SET 
			TARGET.[FK_Case]  = SOURCE.ID_Case,
			TARGET.[FK_BodyPart]= SOURCE.ID_BodyPart,
			TARGET.[FK_BodyPartLocation] = SOURCE.ID_BodyPartLocation,
			TARGET.[FK_ICD_Code] = SOURCE.ID_ICD_Code,
			TARGET.[BodyPart_IDNumber] = SOURCE.Body_Part_ID_Num,
			TARGET.[InjuryName]	= SOURCE.Injury_Name,
			TARGET.[RecoveryDate]= SOURCE.Recovery_Date,	
			TARGET.[OrderNoBodyPart] = SOURCE.BodyPartOrderNo,
			TARGET.[OrderNoInjury] = SOURCE.InjuryOrderNo,
			TARGET.ModifiedOn = @CurrentDate;

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added Injury details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP
	EXEC [dbo].[usp_Update_InjurySEQNo]
	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
			
			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Judge]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Judge]
AS
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Judge data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Judge]
	[dbo].[usp_Clean_Reseed_Table] '[dbo].[Judge]'
=============================================*/
BEGIN

 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()

	MERGE [dbo].[Judge] AS Target
	using (SELECT DISTINCT
		[JUDGE_FIRST_NAME],
		[JUDGE_MI],
		[Judge_Last_Name],
		[Initials],
		[OJCC_District],
		[Term_Expiration],
		ID_State  
		    FROM [Stg].[Judges] SJD 
				LEFT JOIN dbo.[State] St ON SJD.[JUDGE_STATE] = St.States
				WHERE IsValidRecord=1
	
			)AS Source
	ON TRIM(TARGET.[FirstName]) = TRIM(source.[JUDGE_FIRST_NAME])
	   AND TRIM(TARGET.[LastName]) = TRIM(source.[Judge_Last_Name])

	-- For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
           ( FirstName
			,MiddleName
			,LastName
			,Initials
			,City
			,FK_State
			,Zip4
			,District
			,TermExpiration
           ,[CreatedOn] )
     VALUES
           ( 
			source.[JUDGE_FIRST_NAME]
			,source.[JUDGE_MI]
			,source.[Judge_Last_Name]
			,source.[Initials]
			,''
			,source.ID_State
			,''
			,source.[OJCC_District]
			,source.[Term_Expiration]
           ,@CurrentDate)
           
	-- For Updates
	WHEN matched THEN
	  UPDATE SET TARGET.[District] = SOURCE.[OJCC_District],
				 TARGET.TermExpiration = SOURCE.[Term_Expiration],
				 --TARGET.FK_State = SOURCE.ID_State,
				 TARGET.ModifiedOn = @CurrentDate;


	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Negotiations]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Negotiations]
AS
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Judge data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_Negotiations]

	usp_Clean_Reseed_Table '[dbo].[Negotiations]'
=============================================*/
BEGIN

 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()

	MERGE [dbo].[Negotiations] AS Target
	using (SELECT DISTINCT
			ID_Case
			,Demand_Letter_Date
			,ISNULL(Demand_Letter_Damages,0) Demand_Letter_Damages
			,ISNULL(Demand_Letter_Amount,0) Demand_Letter_Amount
			,Counter_Offer_Date
			,ISNULL(Counter_Amount,0) Counter_Amount
			,Court_Case_Num
			FROM STG.Negotiations NG
			LEFT JOIN DBO.Cases CS ON NG.Court_Case_Num=CS.CaseNumber
			WHERE IsValidRecord=1
	
			)AS Source
	ON TRIM(TARGET.[Court_Case_Num]) = TRIM(source.[Court_Case_Num])
	AND  ISNULL(TARGET.Demand_Letter_Date,'1900-01-01') = ISNULL(source.Demand_Letter_Date,'1900-01-01')  -- Added by praveen as we have duplicate case num in negotiation	   

	-- For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
           ( FK_Case
			,Demand_Letter_Date
			,Demand_Letter_Damages
			,Demand_Letter_Amount
			,Counter_Offer_Date
			,Counter_Amount
			,Court_Case_Num
			,CreatedOn)
     VALUES
           ( 
			source.[ID_Case]
			,source.[Demand_Letter_Date]
			,ISNULL(source.[Demand_Letter_Damages],0)
			,ISNULL(source.[Demand_Letter_Amount],0)
			,source.[Counter_Offer_Date]
			,ISNULL(source.[Counter_Amount],0)
			,source.[Court_Case_Num]
           ,@CurrentDate)
           
	-- For Updates
	WHEN matched THEN
	  UPDATE SET TARGET.[Demand_Letter_Date] = SOURCE.[Demand_Letter_Date],
	  TARGET.[Demand_Letter_Damages] = ISNULL(SOURCE.[Demand_Letter_Damages],0),
	  TARGET.[Demand_Letter_Amount] = ISNULL(SOURCE.[Demand_Letter_Amount],0),
	  TARGET.[Counter_Offer_Date] = SOURCE.[Counter_Offer_Date],
	  TARGET.[Counter_Amount] = ISNULL(SOURCE.[Counter_Amount],0),
	  TARGET.ModifiedOn = @CurrentDate;





	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_OJCC]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_OJCC]
AS
/*===========================================
	Author:Praveen
	Created Date: 02-JAN-2023
	Description:To transform and load master OJCC data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_OJCC]
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.Master_OJCC_Offices
	--END

	MERGE [dbo].[OJCCOffices] AS Target
	using (SELECT DISTINCT
			OJO.*,ID_State
		    FROM 
				[Stg].[OJCC_Offices] OJO 
				LEFT JOIN dbo.State St ON OJO.State = St.States
				WHERE IsValidRecord=1
			)AS Source
	ON TARGET.district = source.[OJCC_District]
	   AND TARGET.district_counties = source.[District_Counties]
	-- For Inserts
	WHEN NOT matched BY target THEN
	  INSERT (district,
			  address,
			  city,
			  fk_state,
			  zip4,
			  district_counties,
			  telephone,
			  fax,
			  CreatedOn)
	  VALUES (SOURCE.[ojcc_district],
			  SOURCE.[street_address],
			  SOURCE.city,
			  SOURCE.ID_State,
			  SOURCE.zip,
			  SOURCE.[district_counties],
			  SOURCE.telephone,
			  SOURCE.fax,
			  @CurrentDate)
	-- For Updates
	WHEN matched THEN
	  UPDATE SET TARGET.[address] = SOURCE.[street_address],
				 TARGET.city = SOURCE.city,
				 TARGET.fk_state = SOURCE.ID_State,
				 TARGET.zip4 = SOURCE.zip,
				 TARGET.telephone = SOURCE.telephone,
				 TARGET.fax = SOURCE.fax,
				 TARGET.ModifiedOn = @CurrentDate;
	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Past_Damages]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================================================
--Created Date : 09/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_Data_Load_Past_Damages]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
 BEGIN TRANSACTION;

	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_Past_Damages'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()
	

 -------------------------- Merge for PastDamages_Case Table ----------------------------------
   MERGE [dbo].[PastDamages_Case] AS TARGET
   USING (
		   SELECT DISTINCT STG.[Case_Num], 
				   C.[ID_Case],
				   [PAST_Medical_Benefits], 
				   [PAST_Indemnity_Benefits], 
				   (CASE WHEN [Light_Duty] = 'Yes' THEN 1
				         WHEN [Light_Duty] = 'No' THEN 0 ELSE NULL END) Light_Duty, 
				   (CASE WHEN [Return_to_Work] = 'Yes' THEN 1
				        WHEN [Return_to_Work] = 'No' THEN 0 ELSE NULL END) Return_to_Work,
				   [PAST_Pre_Determination_Number_of_Hours_Billed], 
				   [PAST_Pre_Determination_Attorneys_Fees],
			(ISNULL((SELECT COUNT(1) FROM [dbo].[PastDamages_Case]  WHERE FK_Case = C.ID_Case),0) + RANK() OVER(PARTITION BY STG.[Case_Num] ORDER BY STG.ID_PastDamage)) OrderNo				   
		   FROM [Stg].[Past_Damages] STG
		   JOIN [dbo].[Cases] C ON C.CaseNumber = STG.[Case_Num]
		   WHERE [IsValidRecord] = 1   
   ) AS SOURCE
   ON TARGET.[FK_Case] = SOURCE.[ID_Case]
   AND TARGET.[SequenceNumber] = SOURCE.OrderNo   
   WHEN NOT MATCHED BY TARGET THEN
   INSERT ([FK_Case], 
           [MedicalBenefitAmount], 
		   [IndemnityBenefitsTotalAmount], 
		   [PTDBenefitAmount], 
		   [SupplementalBenefitAmount], 
		   [LienAmount], 
		   [AttorneyFeeAmount], 
		   [WorkedHoursAmount], 
		   [SequenceNumber], 
		   [StatutoryFeeAmount], 
		   [MOBenefitAmount], 
		   [INDBenefitAmount], 
		   [DisabilityBenefitAmount], 
		   [IsLightDuty], 
		   [IsReturnedToWork], 
		   [CreatedOn], 
		   [ModifiedOn], 
		   [IsDeleted])
   VALUES( SOURCE.[ID_Case],
		  SOURCE.[PAST_Medical_Benefits],
		  SOURCE.[PAST_Indemnity_Benefits], 
		  NULL, 
		  NULL,
		  NULL,
		  SOURCE.[PAST_Pre_Determination_Attorneys_Fees], 
		  SOURCE.[PAST_Pre_Determination_Number_of_Hours_Billed],
		  SOURCE.OrderNo,
		  NULL,
		  NULL,
		  NULL,
		  NULL,
		  SOURCE.[Light_Duty],
		  SOURCE.[Return_to_Work], 		  
		  @CurrentDate,
		  @CurrentDate,
		  0
		  )
   WHEN MATCHED AND ( ISNULL(TARGET.[MedicalBenefitAmount],'') <>  ISNULL(SOURCE.[PAST_Medical_Benefits],'') OR
					ISNULL(TARGET.[IndemnityBenefitsTotalAmount],'') <> ISNULL(SOURCE.[PAST_Indemnity_Benefits],'') OR
					ISNULL(TARGET.[AttorneyFeeAmount],'') <> ISNULL(SOURCE.[PAST_Pre_Determination_Attorneys_Fees],'') OR
					ISNULL(TARGET.[WorkedHoursAmount],'') <> ISNULL(SOURCE.[PAST_Pre_Determination_Number_of_Hours_Billed],'') OR
					ISNULL(TARGET.[IsLightDuty],'') <> ISNULL(SOURCE.[Light_Duty],'') OR
					ISNULL(TARGET.[IsReturnedToWork],'') <> ISNULL(SOURCE.[Return_to_Work],'')) THEN
    UPDATE SET
   	TARGET.[MedicalBenefitAmount] =  SOURCE.[PAST_Medical_Benefits],
	TARGET.[IndemnityBenefitsTotalAmount] = SOURCE.[PAST_Indemnity_Benefits], 
	TARGET.[AttorneyFeeAmount] = SOURCE.[PAST_Pre_Determination_Attorneys_Fees], 
	TARGET.[WorkedHoursAmount] = SOURCE.[PAST_Pre_Determination_Number_of_Hours_Billed],
	TARGET.[IsLightDuty] = SOURCE.[Light_Duty],
	TARGET.[IsReturnedToWork] = SOURCE.[Return_to_Work], 	
	TARGET.[ModifiedOn] = @CurrentDate;

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added/Updated Past Damage case details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_Plaintiff]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Data_Load_Plaintiff]
AS
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : [dbo].[usp_Data_Load_Plantiff]
	[dbo].[usp_Clean_Reseed_Table] '[dbo].[Plaintiff_Hist]'
	[dbo].[usp_Clean_Reseed_Table] '[dbo].[Plaintiff_Case]'
=============================================*/
BEGIN
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()

	MERGE [dbo].[Plaintiff_Hist] AS Target
	USING (SELECT DISTINCT
			Pla.Plaintiff1_Full_Name Plaintiff1_Full_Name
           ,Pla.Plaintiff1_FIRST_NAME Plaintiff1_FIRST_NAME
           ,Pla.Plaintiff1_MI Plaintiff1_MIDDLE_NAME
           ,Pla.Plaintiff1_LAST_NAME 
           ,Pla.Plaintiff1_SUFFIX
           ,Pla.Plaintiff1_Address1
		   ,Plaintiff1_Address2
           ,Plaintiff1_City
           ,Pla.Plaintiff1_Zip4
           , Plaintiff1_Phone
           ,Pla.Plaintiff1_BIRTHDATE
           ,CASE WHEN ISNULL(Pla.Plaintiff1_DISABLED,'NO') = 'YES' THEN  1 ELSE 0 END AS Plaintiff1_DISABLED
		   ,ID_State, ID_Occupation,ID_Gender,COURT_CASE_NUM AS Case_Num
		    FROM [Stg].[VwPlantiff] Pla 
				LEFT JOIN dbo.State St ON Pla.Plaintiff1_State = St.States
				LEFT JOIN dbo.RefPlaintiff_Occupation Ocp ON Pla.Plaintiff1_OCCUPATION = Ocp.[Occupation]
				LEFT JOIN dbo.RefGender Gen ON Pla.Plaintiff1_GENDER = Gen.GenderName
			WHERE Pla.IsValidRecord=1 
			)AS Source
	ON 
	   ISNULL(TARGET.LastName,'') = ISNULL(source.[Plaintiff1_LAST_NAME],'')
	   AND ISNULL(TARGET.[FirstName],'') = ISNULL(source.Plaintiff1_FIRST_NAME,'')
	   AND ISNULL(TARGET.[Case_Num],'') = ISNULL(source.Case_Num,'')
	   --AND ISNULL(TARGET.[Address1],'') = ISNULL(source.Plaintiff1_Address1,'')
	   --AND ISNULL(TARGET.[Phone],'') = ISNULL(source.Plaintiff1_Phone,'')
	   --AND ISNULL(TARGET.[City],'') = ISNULL(source.Plaintiff1_City,'')
	   --AND ISNULL(TARGET.[Zip4],'') = ISNULL(source.Plaintiff1_Zip4,'')
	   --AND ISNULL(TARGET.[Birthdate],'1900-01-01') = ISNULL(source.Plaintiff1_BIRTHDATE,'1900-01-01')
	   --AND ISNULL(TARGET.FK_Gender,'') = ISNULL(source.ID_Gender,'')
	 ------For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
           ([FullName]
           ,[FirstName]
           ,[MiddleName]
           ,[LastName]
           ,[Suffix]
           ,[Address1]
		   ,[Address2]
           ,[City]
           ,[FK_State]
           ,[Zip4]
           ,[Phone]
           ,[Birthdate]
           ,[IsDisabled]
           ,[FK_Gender]
           ,[FK_Occupation]
           ,[CreatedOn]
		   ,[Case_Num])
     VALUES
           (source.Plaintiff1_Full_Name
           ,source.[Plaintiff1_FIRST_NAME]
           ,source.Plaintiff1_MIDDLE_NAME
           ,source.[Plaintiff1_LAST_NAME]
           ,source.Plaintiff1_SUFFIX
           ,source.Plaintiff1_Address1
		   ,source.Plaintiff1_Address2
           ,source.Plaintiff1_City
           ,source.ID_State
           ,source.Plaintiff1_Zip4
           ,source.Plaintiff1_Phone
           ,source.Plaintiff1_BIRTHDATE
           ,source.Plaintiff1_DISABLED
           ,source.ID_Gender
           ,source.ID_Occupation
           ,@CurrentDate
		   ,source.Case_Num)
           --select * from dbo.Plaintiff where FullName='ZENAIDA  RODRIGUEZ'
		   --select * from STG.Plaintiff where Plaintiff1_Full_Name='ZENAIDA  RODRIGUEZ'
		 --------For Updates
	WHEN matched THEN
	  UPDATE SET TARGET.[FirstName]=source.Plaintiff1_FIRST_NAME
				,TARGET.[MiddleName]=source.Plaintiff1_MIDDLE_NAME
				,TARGET.[LastName]=source.Plaintiff1_LAST_NAME
				,TARGET.[Suffix]=source.Plaintiff1_SUFFIX
				,TARGET.[Address1]=source.Plaintiff1_Address1
				,TARGET.[Address2]=source.Plaintiff1_Address2
				,TARGET.[City]=source.Plaintiff1_City
				,TARGET.[FK_State]=source.ID_State
				,TARGET.[Zip4]=source.Plaintiff1_Zip4
				,TARGET.[Phone]=source.Plaintiff1_Phone
				,TARGET.[Birthdate]=source.Plaintiff1_BIRTHDATE
				,TARGET.[IsDisabled]=source.Plaintiff1_DISABLED
				,TARGET.[FK_Gender]=source.ID_Gender
				,TARGET.[FK_Occupation]=source.ID_Occupation
				,TARGET.[ModifiedOn]=@CurrentDate;

----Plantiff Case

MERGE [dbo].[Plaintiff_Case] AS Target
	using (Select 
			COURT_CASE_NUM,
			ID_Plaintiff,
			ID_Case,
			ISNULL(SPL.Plaintiff1_AGE_RANGE_AT_TIME_OF_ACCIDENT,0) ID_AgeRange,
			Plaintiff1_AWW_13_WEEKS_PRECEDING_ACCIDENT,
			Plaintiff1_CURRENT_AWW,
			CASE WHEN Plaintiff1_CURRENTLY_WITH_SAME_EMPLOYER ='YES' THEN 1 ELSE 0 END AS Plaintiff1_CURRENTLY_WITH_SAME_EMPLOYER,
			Plaintiff1_CURRENT_WORK_LEVEL,
			Plaintiff1_HAS_MMI_DATE MMIDate, 
			Plaintiff1_DETAIL_DESCRIPTION_OF_JOB,
			ID_JobClassCode,
			Plaintiff1_DOL_JOB_CLASSIFICATION_DESCRIPTION,
			Plaintiff1_SSDI_DATE,
			Plaintiff1_AGE_RANGE_AT_TIME_OF_ACCIDENT,
			Plaintiff1_FIRST_PARTY_HEALTHCARE_COVERAGE,
			CASE WHEN Plaintiff1_HAS_MMI_BEEN_REACHED ='YES' THEN 1 ELSE 0 END AS Plaintiff1_HAS_MMI_BEEN_REACHED,
			CASE WHEN Plaintiff1_MEDICAL_BENEFITS_ONLY ='YES' THEN 1 ELSE 0 END AS Plaintiff1_MEDICAL_BENEFITS_ONLY,
			CASE WHEN Plaintiff1_SSDI_APPLIED ='YES' THEN 1 ELSE 0 END AS Plaintiff1_SSDI_APPLIED,
			CASE WHEN Plaintiff1_SSDI_ACCEPTED  ='YES' THEN 1 ELSE 0 END AS Plaintiff1_SSDI_ACCEPTED, 
			AssociatedFILES
			
FROM [Stg].[VwPlantiff] SPL
			INNER JOIN [dbo].[Plaintiff_Hist] TPL ON SPL.[Plaintiff1_FIRST_NAME]= TPL.FirstName
			AND SPL.[Plaintiff1_LAST_NAME]= TPL.LastName 
			AND SPL.COURT_CASE_NUM= TPL.Case_Num 
			LEFT JOIN [dbo].[Cases] CAS ON SPL.COURT_CASE_NUM= CAS.CaseNumber
			LEFT JOIN [dbo].[RefAgeRange] AR ON ISNULL(AR.ID_AgeRange,0)= ISNULL(SPL.Plaintiff1_AGE_RANGE_AT_TIME_OF_ACCIDENT,0)
			LEFT JOIN [dbo].RefJobClassificationCode JC ON ISNULL(JC.JobClassCode,'')= ISNULL(SPL.Plaintiff1_DOL_JOB_CLASSIFICATION_CODE,'')
WHERE SPL.IsValidRecord=1 

			)AS Source
	ON TRIM(TARGET.Case_Num) = TRIM(source.COURT_CASE_NUM)
	AND ISNULL(TARGET.FK_Case,'') = ISNULL(source.ID_Case,'')
	AND ISNULL(TARGET.FK_Plaintiff,'') = ISNULL(source.ID_Plaintiff,'')
	-- For Inserts
	WHEN NOT matched BY target THEN
	INSERT 
	(	FK_Case,
		FK_Plaintiff,
		FK_AgeRange,
		Case_Num,
		IsMedicalBenefit,
		AWW13WeekPreAccident,
		AWWCurrent,
		IsClaimantWithSameEmpoyer,
		WorkLevel,
		MMIReached,
		MMIDate,
		FK_JobClassCode,
		JobDescription,
		IsSSDIApplied,
		IsSSDIAccepted,
		SSDIDate,
		AssociatedFiles,
		CreatedOn)
     VALUES
           (
		   source.ID_Case
		   ,source.ID_Plaintiff
		   ,source.ID_AgeRange
			,source.COURT_CASE_NUM
			,source.Plaintiff1_MEDICAL_BENEFITS_ONLY
			,source.Plaintiff1_AWW_13_WEEKS_PRECEDING_ACCIDENT
			,source.Plaintiff1_CURRENT_AWW
			,source.Plaintiff1_CURRENTLY_WITH_SAME_EMPLOYER
			,source.Plaintiff1_CURRENT_WORK_LEVEL
			,source.Plaintiff1_HAS_MMI_BEEN_REACHED
			,source.MMIDate
			,source.ID_JobClassCode
			,source.Plaintiff1_DETAIL_DESCRIPTION_OF_JOB
			,source.Plaintiff1_SSDI_APPLIED
			,source.Plaintiff1_SSDI_ACCEPTED
			,source.Plaintiff1_SSDI_DATE
			,source.AssociatedFILES
           ,@CurrentDate)
           
	-- For Updates
	WHEN matched THEN
	  UPDATE SET	TARGET.IsMedicalBenefit=source.Plaintiff1_MEDICAL_BENEFITS_ONLY,
					TARGET.	AWW13WeekPreAccident=source.Plaintiff1_AWW_13_WEEKS_PRECEDING_ACCIDENT,
					TARGET.	AWWCurrent=source.Plaintiff1_CURRENT_AWW,
					TARGET.	IsClaimantWithSameEmpoyer=source.Plaintiff1_CURRENTLY_WITH_SAME_EMPLOYER,
					TARGET.WorkLevel=source.Plaintiff1_CURRENT_WORK_LEVEL,
					TARGET.MMIReached=source.Plaintiff1_HAS_MMI_BEEN_REACHED,
					TARGET.MMIDate=source.MMIDate,
					TARGET.FK_JobClassCode=source.ID_JobClassCode,
					TARGET.JobDescription=source.Plaintiff1_DETAIL_DESCRIPTION_OF_JOB,
					TARGET.IsSSDIApplied=source.Plaintiff1_SSDI_APPLIED,
					TARGET.IsSSDIAccepted=source.Plaintiff1_SSDI_ACCEPTED,
					TARGET.SSDIDate=source.Plaintiff1_SSDI_DATE,
					TARGET.AssociatedFiles=source.AssociatedFILES,
					TARGET.ModifiedOn = @CurrentDate;  

EXEC [dbo].[usp_Update_Plaintiff_CaseSEQNo]

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;
		SELECT ERROR_NUMBER() AS ErrorNumber;
		SELECT ERROR_MESSAGE() AS ErrorMessage;
	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_TPA]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================================================
--Created Date : 11/01/2023
--Author       : FairCode
--Purpose      : 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_Data_Load_TPA]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
 BEGIN TRANSACTION;

	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_TPA_Master'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	DECLARE @CurrentDate DATETIME = GETDATE()
	

 -------------------------- Merge for TPA Table ----------------------------------
   MERGE [dbo].[TPA] AS TARGET
   USING (SELECT DISTINCT [TPA_Name], 
                          [TPA_Parent], 
						  [ID_EntityType], 
						  ISNULL([TPA_State_ID],'FL') [TPA_State_ID], 
						  [TPA_Internal_ID], 
						  [TPA_Address_1], 
						  [TPA_Address_2], 
						  [TPA_City], 
						  [ID_State], 
						  [TPA_Zip4], 
						  [TPA_Phone]
		   FROM [Stg].[TPA_Master] STG
		   LEFT JOIN [dbo].[RefEntityType] RET ON RET.[EntityType] = STG.[TPA_Type] 
		   LEFT JOIN [dbo].[State] S ON S.[States] = STG.[TPA_State] AND S.[IsDeleted] = 0   
		   WHERE STG.IsValidRecord = 1
   ) AS SOURCE
   ON ISNULL(TARGET.[TPAName],'') = ISNULL(SOURCE.[TPA_Name],'')
   AND ISNULL(TARGET.[InternalID],'') = ISNULL(SOURCE.[TPA_Internal_ID],'')   
   AND ISNULL(TARGET.[ParentName],'') = ISNULL(SOURCE.[TPA_Parent],'')
   WHEN NOT MATCHED BY TARGET THEN
   INSERT ([FK_CompanyType], 
           FK_EntityType, 
		   [StateID],
		   [InternalID],
		   [ParentName], 
		   [TPAName], 
		   [Address1], 
		   [Address2], 
		   [City], 
		   [FK_State], 
		   [Zip4], 
		   [Phone], 
		   [CreatedOn], 
		   [CreatedBy], 
		   [ModifiedOn], 
		   [ModifiedBy], 
		   [IsDeleted])
   VALUES( NULL,
		  SOURCE.[ID_EntityType],
		  SOURCE.[TPA_State_ID],
		  SOURCE.[TPA_Internal_ID],
		  SOURCE.[TPA_Parent], 
		  SOURCE.[TPA_Name], 
		  SOURCE.[TPA_Address_1],
		  SOURCE.[TPA_Address_2],
		  SOURCE.[TPA_City], 
		  SOURCE.[ID_State],
		  SOURCE.[TPA_Zip4],
		  SOURCE.[TPA_Phone],		  
		  @CurrentDate,
		  0,
		  @CurrentDate,
		  0,
		  0
		  )
   WHEN MATCHED AND ( ISNULL(TARGET.FK_EntityType,'') <>  ISNULL(SOURCE.[ID_EntityType],'') OR	
					ISNULL(TARGET.[Address1],'') <> ISNULL(SOURCE.[TPA_Address_1],'') OR
					ISNULL(TARGET.[Address2],'') <> ISNULL(SOURCE.[TPA_Address_2],'') OR
					ISNULL(TARGET.[City],'') <> ISNULL(SOURCE.[TPA_City],'') OR
					ISNULL(TARGET.[FK_State],'') <> ISNULL(SOURCE.[ID_State],'') OR
					ISNULL(TARGET.[Zip4],'') <> ISNULL(SOURCE.[TPA_Zip4],'') OR
					ISNULL(TARGET.[Phone],'') <> ISNULL(SOURCE.[TPA_Phone],'')) THEN
   UPDATE SET
   	TARGET.FK_EntityType =  SOURCE.[ID_EntityType],
	TARGET.[Address1] = SOURCE.[TPA_Address_1],
	TARGET.[Address2] = SOURCE.[TPA_Address_2],
	TARGET.[City] = SOURCE.[TPA_City], 
	TARGET.[FK_State] = SOURCE.[ID_State],
	TARGET.[Zip4] = SOURCE.[TPA_Zip4],
	TARGET.[Phone] = SOURCE.[TPA_Phone],
	TARGET.[ModifiedOn] = @CurrentDate,
	TARGET.[ModifiedBy] = 0	;

	SET @RowCnt = @@ROWCOUNT
    SET @ImportEnd = CURRENT_TIMESTAMP;
    SET @Note = 'Added/Updated TPA details'	
    EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
	SET @ImportStart = CURRENT_TIMESTAMP

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_Data_Load_TPA_Case]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*==========================================================================
	Author:FairCode
	Created Date: 06-JAN-2023
	Description:To transform and load master TPA data to main table
	EXECUTION : EXEC [dbo].[usp_Data_Load_TPA_Case]
	usp_Clean_Reseed_Table  '[dbo].[TPA_Case]'
===========================================================================*/
CREATE PROCEDURE [dbo].[usp_Data_Load_TPA_Case]
AS
BEGIN
 
 SET NOCOUNT ON;
 BEGIN TRY
  BEGIN TRANSACTION;
	DECLARE @CurrentDate DATETIME = GETDATE()
	DECLARE @Note VARCHAR(4000)   
    DECLARE @ImportSystem VARCHAR(250) = 'usp_Data_Load_TPA_Case'
    DECLARE @ImportStart DATETIME = CURRENT_TIMESTAMP	
    DECLARE @ImportEnd DATETIME
    DECLARE @RowCnt INT= 0
	--This Truncate logic needs to be re-written based on the Control files provided
	--IF @FullLoad=1 BEGIN
	--Truncate table Stg.TPA
	--END
	
	DECLARE @ID_EntityType BIGINT = 0

	---Company is either a TPA or Self-Administered. Default is "TPA"
	SELECT @ID_EntityType = ID_EntityType FROM [dbo].[RefEntityType] WHERE EntityType = 'TPA'

	DROP TABLE IF EXISTS #TPA

	CREATE TABLE #TPA(ID BIGINT NOT NULL IDENTITY(1,1),
						CaseNumber VARCHAR(250),
						TPAName VARCHAR(200),
						Address1 VARCHAR(300),
						City VARCHAR(100),
						FK_State INT,
						Zip VARCHAR(10),
						Phone VARCHAR(30),
						InternalID VARCHAR(170),
						StateID VARCHAR(30),
						OrderNo INT,
						CaseNo VARCHAR(150),
						AdjusterEmail VARCHAR(150),
						TPA_PARENT_Name VARCHAR(150))

	INSERT INTO #TPA(CaseNumber,TPAName,Address1,City,FK_State,Zip,Phone,InternalID,StateID,OrderNo,CaseNo,AdjusterEmail,TPA_PARENT_Name)
	SELECT DISTINCT	T.Case_Num Case_Num,
				    T.[TPA_1_Name] TPAName,
					T.[TPA_1_PO_Box_or_Street_Address] Address1,
					T.[TPA_1_City] City,
					S.ID_State ID_State, 
					LEFT(T.[TPA_1_Zip],9) AS [Zip],
					T.[TPA_1_Phone] Phone,
					T.[TPA_1_FEIN] FEIN,
					T.[TPA_1_State_ID_Number] StateID,
					1 OrderNo,
                    [TPA_1_Case_Number] TPACaseNo,
                    T.[TPA_1_Adjuster_Email] AdjusterEmail,
					T.TPA_PARENT_Name
		    FROM [Stg].TPA T
				LEFT JOIN [dbo].State S ON S.States =T.TPA_1_State	
				WHERE [IsValidRecord] = 1
	UNION ALL
	SELECT DISTINCT	T.Case_Num Case_Num,
				    T.[TPA_2_Name] TPAName,
					T.[TPA_2_PO_Box_or_Street_Address] Address1,
					T.[TPA_2_City] City,
					S.ID_State ID_State, 
					LEFT(T.[TPA_2_Zip],9) AS [Zip],
					T.[TPA_2_Phone] Phone,
					T.[TPA_1_FEIN] FEIN,
					T.[TPA_1_State_ID_Number] StateID,
					2 OrderNo,
					[TPA_1_Case_Number] TPACaseNo, --TPA_2_Case_Number column is not in the table
					'' AdjusterEmail --TPA_2_Adjuster_Email column is not in the table
					,TPA_PARENT_Name
		    FROM [Stg].TPA T
				LEFT JOIN [dbo].State S ON S.States =T.TPA_2_State
				WHERE [IsValidRecord] = 1 AND T.[TPA_2_Name] is not null

 
		---------- TPA case data inserts into the table TPA_Case -----------------------------------------
				INSERT INTO [dbo].[TPA_Case]([FK_Case], 						                                 
                                                [FK_TPA],
                                                [FK_Adjuster],
												[OrderNo],	
												[CaseNo],
                                                [Adjuster_Email],
												[CreatedOn], 
												[CreatedBy], 
												[ModifiedOn], 
												[ModifiedBy], 
												[IsDeleted],												
												[FK_EntityType],
												[ParentName],
												[TPAName],
												[Address1],
												[Address2],
												[City],
												[FK_State],
												[Zip4],
												[Phone],
												[StateID],
												[InternalID])
								SELECT DISTINCT C.[ID_Case],
												ISNULL(T.ID_TPA,0),
												NULL,
												STG.OrderNo,
												STG.CaseNo,
												STG.AdjusterEmail,
												@CurrentDate,
												0,
												@CurrentDate,
												0,
												0,
												@ID_EntityType,
												STG.TPA_PARENT_Name,
												STG.TPAName,
												STG.Address1,
												NULL,
												STG.City,
												STG.FK_State,
												STG.Zip,
												STG.Phone,
												STG.StateID,
												STG.InternalID
								FROM #TPA STG
								--LEFT JOIN [dbo].TPA T ON ISNULL(T.[TPAName],'') = ISNULL(STG.[TPAName],'')
								--						  AND ISNULL(T.[InternalID],'') = ISNULL(STG.[InternalID],'')
								--	                      ---AND ISNULL(T.[ParentName],'') = ISNULL(STG.[TPA_Parent],'')
								LEFT JOIN (SELECT TPAName,InternalID,MIN(ID_TPA) ID_TPA FROM TPA
											GROUP BY TPAName,InternalID) T ON ISNULL(T.[TPAName],'') = ISNULL(STG.[TPAName],'')
											 AND ISNULL(T.[InternalID],'') = ISNULL(STG.[InternalID],'')
								JOIN [dbo].[Cases] C ON C.CaseNumber = STG.CaseNumber
								---LEFT JOIN [dbo].[TPA_Case] TC ON TC.[FK_TPA] = ISNULL(T.[ID_TPA],0) AND TC.[FK_Case] = C.[ID_Case] AND ISNULL(TC.OrderNo,0) = ISNULL(STG.OrderNo,0)
								LEFT JOIN [dbo].[TPA_Case] TC ON ISNULL(TC.[TPAName],'') = ISNULL(STG.[TPAName],'')
											                      AND ISNULL(TC.[InternalID],'') = ISNULL(STG.[InternalID],'') AND ISNULL(TC.[FK_Case],0) = ISNULL(C.[ID_Case],0)
								WHERE TC.ID_TPA_Case IS NULL

		 SET @RowCnt = @@ROWCOUNT
		 SET @ImportEnd = CURRENT_TIMESTAMP;
		 SET @Note = 'Added/Update TPA case details'	
		 EXEC dbo.usp_InsertImportResults @ImportSystem, @ImportStart, @RowCnt, @ImportEnd, @Note
		 SET @ImportStart = CURRENT_TIMESTAMP
	
	DROP TABLE IF EXISTS #TPA

	COMMIT TRANSACTION
 END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

			DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
			SET @ProcName = OBJECT_NAME(@@PROCID)

			SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();
			
			EXECUTE [dbo].[usp_LogError] @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity

			SELECT @ErrNumber AS ErrorNumber,@ErrorMessage AS ErrorMessage

	END CATCH;
END;
GO
/****** Object:  StoredProcedure [dbo].[usp_InsertImportResults]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================================================================================================================
--Created Date : 01/04/2023
--Author : FairCode 
--Purpose :  Logs procedure name,start and end time,rowcount,note etc.... 
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_InsertImportResults]
	             @ImportedSystem varchar(250)
	            ,@ImportStartDate datetime
	            ,@TotalRowCount int
	            ,@ImportEndDate datetime
	            ,@Note  varchar(2000)	
	            ,@RetErr INT = NULL OUTPUT
	            ,@RetVal INT = NULL OUTPUT
AS

	SET NOCOUNT ON;
	BEGIN TRY

    INSERT  INTO dbo.sysLogImport (ImportedSystem,
								   ImportStartDate,
								   TotalRowCount,
								   ImportEndDate,
								   Note
								   )    
	VALUES (@ImportedSystem,
			@ImportStartDate,
			@TotalRowCount,
			@ImportEndDate,
			@Note
			)
				

	END TRY
     BEGIN CATCH
		GOTO HANDLE_ERROR;

     END CATCH

RETURN ISNULL(@RetVal,0)

HANDLE_ERROR:
		
		DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ProcName VARCHAR(100), @ErrNumber INT,@ErrLine INT
		SET @ProcName = OBJECT_NAME(@@PROCID)

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(), @ErrNumber = ERROR_NUMBER(),@ErrLine = ERROR_LINE();

		EXEC dbo.usp_LogError @ProcName,@ErrorMessage,@ErrNumber,@ErrorState,@ErrLine,@ErrorSeverity
		SET @RetErr = @ErrNumber;
		SET @RetVal = -1
		RETURN
GO
/****** Object:  StoredProcedure [dbo].[usp_LogError]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================================================
--Created Date : 04/01/2023
--Author       : FairCode
--Purpose      : General proc to log errors (generated in SQL procs) to the TecTool database.
--Modifications: 
--             : 
-- ==========================================================================================================================================================================
CREATE PROCEDURE [dbo].[usp_LogError]
		         @Procedure VARCHAR(250),
				 @ErrMsg  VARCHAR(4000),
				 @ErrNum INT,
				 @ErrState INT,
				 @ErrorLine INT,
				 @ErrSeverity INT
AS
BEGIN TRY
	DECLARE @ErrMessage VARCHAR(4000) = ''
	DECLARE @ID INT = NULL

	SET @Procedure = ISNULL(@Procedure,'Dynamic')
	SET @ErrMessage = 'Proc: ' + @Procedure + CHAR(13) 
				+ 'Line: ' + CAST(@ErrorLine as varchar(20)) + CHAR(13) 
				+ 'sysLogError ID: ' + ISNULL(CAST(@ID as varchar(20)),'n/a')  + CHAR(13) 
				+ @ErrMsg

		INSERT INTO [dbo].sysLogError
				   ([ErrorNumber]
				   ,[ErrorSeverity]
				   ,[ErrorState]
				   ,[ErrorProcedure]
				   ,[ErrorLine]
				   ,[ErrorMessage]
				   )
			 VALUES
				   (@ErrNum,
					@ErrSeverity,
					@ErrState,
					@Procedure,
					@ErrorLine,
					@ErrMsg
					);
END TRY
BEGIN CATCH
		RAISERROR ('Error in ssp_LogError: Updating [sysLogErrorSQL]', 16, 1);
END CATCH				

	RAISERROR (@ErrMessage, 16, 1);
 -- RAISERROR (@ErrMsg, -- Message text.
 --					16, -- Severity.
 --					1   -- State.
 --            );

RETURN
GO
/****** Object:  StoredProcedure [dbo].[usp_Truncate_Staging_Tables]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Truncate_Staging_Tables]
AS
BEGIN
 
 SET NOCOUNT ON;DECLARE @delimiter CHAR(1),
        @tableList VARCHAR(MAX),
        @tableName VARCHAR(100),
        @currLen INT,
        @truncateStatement VARCHAR(200),
		@SchemaName VARCHAR(100)

SET @delimiter = ','
SET @SchemaName='STG'

SELECT @tableList = COALESCE(@tableList + ', ','') + CAST (TABLE_NAME AS varchar(100))
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_SCHEMA = @SchemaName
	AND TABLE_TYPE='BASE TABLE'
	   
    WHILE LEN(@tableList) > 0
    BEGIN
        SELECT @currLen = 
        (
            CASE charindex( @delimiter, @tableList ) 
                WHEN 0 THEN len( @tableList  ) 
                ELSE ( charindex( @delimiter, @tableList  ) -1 )
            END
        ) 

        SELECT @tableName = TRIM(SUBSTRING (@tableList,1,@currLen ))

        SET @truncateStatement = 'TRUNCATE TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@tableName)
        EXEC (@truncateStatement)

        SELECT @tableList = 
        (
            CASE ( len( @tableList ) - @currLen  ) 
                WHEN 0 THEN '' 
                ELSE right( @tableList, len( @tableList ) - @currLen  - 1 ) 
            END
        ) 
    END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_AdjusterSEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Update_AdjusterSEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(

  SELECT 		FirstName  		,MiddleName  
		,LastName ,CompanyName,
ROW_NUMBER() OVER(PARTITION BY FirstName,MiddleName,LastName  ORDER BY CompanyName) RN
FROM [dbo].Adjuster

group by FirstName 
		,MiddleName 
		,LastName ,CompanyName
having count(*)>1
)
UPDATE [dbo].Adjuster SET Company_SeqNo = RN
FROM [dbo].Adjuster
INNER JOIN UpdateData ON Adjuster.FirstName = Adjuster.FirstName 
		--AND Adjuster.MiddleName = Adjuster.MiddleName 
		AND UpdateData.LastName = Adjuster.LastName 
		AND UpdateData.CompanyName = Adjuster.CompanyName ;


--With UpdateCaseData  As
--(
--SELECT FK_Adjuster,FK_Case,
--ROW_NUMBER() OVER(PARTITION BY FK_Adjuster  ORDER BY FK_Case) RN
--FROM  [dbo].Adjuster_Case
--group by FK_Adjuster 
--		,FK_Case
--)
--UPDATE [dbo].Adjuster_Case SET SEQ_CASE = RN
--FROM [dbo].Adjuster_Case
--INNER JOIN UpdateCaseData ON UpdateCaseData.FK_Adjuster = Adjuster_Case.FK_Adjuster 
--		AND UpdateCaseData.FK_Case = Adjuster_Case.FK_Case 

With UpdateAdjusterData  As
(
  SELECT 		FirstName  		,MiddleName  
		,LastName ,GENDER,
ROW_NUMBER() OVER (ORDER BY FirstName,MiddleName,LastName ASC) AS SrNo
FROM [dbo].Adjuster
group by FirstName 
		,MiddleName 
		,LastName ,GENDER
)
UPDATE [dbo].Adjuster SET Adjuster_UNQID = SrNo
FROM [dbo].Adjuster
INNER JOIN UpdateAdjusterData ON UpdateAdjusterData.FirstName = Adjuster.FirstName 
		AND UpdateAdjusterData.LastName = Adjuster.LastName 
		AND isnull(UpdateAdjusterData.GENDER,'') = isnull(Adjuster.GENDER,'') 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_AWW_CaseSEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Update_AWW_CaseSEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(
SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY MMI_Date,AWWType) RN,ID
FROM AWW_Case
where AWWType='PFB' AND FK_Case in(select FK_Case from AWW_Case where AWWType='PFB'
group by FK_Case
having count(*)>1)

UNION ALL

SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY MMI_Date,AWWType) RN,ID
FROM AWW_Case
where AWWType='SO' AND FK_Case in(select FK_Case from AWW_Case where AWWType='SO'
group by FK_Case
having count(*)>1)
)
UPDATE AWW_Case SET SEQNo = RN
FROM AWW_Case
INNER JOIN UpdateData ON AWW_Case.ID = UpdateData.ID



--SELECT top 10 * FROM AWW_Case
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_Defendant_CaseSEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Update_Defendant_CaseSEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(
SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY FK_Defendent) RN,ID_Defendant_Case
FROM Defendant_Case
where FK_Case in(select FK_Case from Defendant_Case
group by FK_Case
having count(*)>1)
)
UPDATE Defendant_Case SET SEQNo = RN
FROM Defendant_Case
INNER JOIN UpdateData ON Defendant_Case.ID_Defendant_Case = UpdateData.ID_Defendant_Case

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_DeterminationSEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_Update_DeterminationSEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(
SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY DeterminationDate) RN,ID_Determination_Case
FROM Determination_Case
where FK_Case in(select FK_Case from Determination_Case
group by FK_Case
having count(*)>1)
)
UPDATE Determination_Case SET SEQNo = RN
FROM Determination_Case
INNER JOIN UpdateData ON Determination_Case.ID_Determination_Case = UpdateData.ID_Determination_Case

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_InjurySEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Update_InjurySEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(
SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY FK_BodyPart) RN,ID_Injury
FROM [dbo].[Injury]
where FK_Case in(select FK_Case from [dbo].[Injury]
group by FK_Case
having count(*)>1)
)
UPDATE [dbo].[Injury] SET SEQNo = RN
FROM [dbo].[Injury]
INNER JOIN UpdateData ON [dbo].[Injury].ID_Injury = UpdateData.ID_Injury

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_Plaintiff_CaseSEQNo]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_Update_Plaintiff_CaseSEQNo]
AS
/*===========================================

=============================================*/
BEGIN

With UpdateData  As
(
SELECT FK_Case,
ROW_NUMBER() OVER(PARTITION BY FK_Case  ORDER BY FK_Plaintiff) RN,ID_Plaintiff_Case
FROM Plaintiff_Case
where FK_Case in(select FK_Case from Plaintiff_Case
group by FK_Case
having count(*)>1)
)
UPDATE Plaintiff_Case SET SEQNo = RN
FROM Plaintiff_Case
INNER JOIN UpdateData ON Plaintiff_Case.ID_Plaintiff_Case = UpdateData.ID_Plaintiff_Case

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateAdjusterStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateAdjusterStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON


	Update [Stg].[Adjuster]
	Set IsValidRecord=0,
	ERROR_DESCRIPTION='Either ADJUSTER_FirstName/ADJUSTER_LastName/ADJUSTER_Email is missing'
	Where ([ADJUSTER_FirstName] is null OR [ADJUSTER_FirstName]='' OR
	[ADJUSTER_LastName] is null OR [ADJUSTER_LastName]='' OR
	[ADJUSTER_Email] is null OR [ADJUSTER_Email]=''  
	)

	Update [Stg].[Adjuster]
	Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
	where COURT_CASE_NUMBER  not in(select CaseNumber from [dbo].[Cases]) --OR 

		Update [Stg].[Adjuster]
	Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
	where ISNULL(COURT_CASE_NUMBER,'') = ''

	UPDATE 
			A
		SET 
			A.IsValidRecord=0,
			A.ERROR_DESCRIPTION = 'Key Duplication'
		FROM
			Stg.[Adjuster] A
			INNER JOIN 
			(
				SELECT Adjuster_FirstName,Adjuster_LastName,Adjuster_Email,COURT_CASE_NUMBER,COUNT(*) Cnt
				FROM Stg.[Adjuster]
				GROUP BY Adjuster_FirstName,Adjuster_LastName,Adjuster_Email,COURT_CASE_NUMBER
				HAVING Count(*) >1
			)B ON
			A.Adjuster_FirstName = B.Adjuster_FirstName
			AND A.Adjuster_LastName = B.Adjuster_LastName
			AND A.Adjuster_Email = B.Adjuster_Email
			AND A.COURT_CASE_NUMBER = B.COURT_CASE_NUMBER
		


END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateAttorney_ListData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*===============================================================
	Author:Voleergo
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidateAttorney_ListData]
========================================================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateAttorney_ListData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate [First Name] assigned
	Update Stg.Attorney_List
	Set IsValidRecord=0,
			ERROR_DESCRIPTION = '[First_Name] is blank'
	Where ([First_Name] is null) OR [First_Name]=''

	--Validate [Middle Name] assigned
	--Update Stg.Attorney_List
	--Set IsValidRecord=0,
	--		ERROR_DESCRIPTION = '[Middle_Name] is blank'
	--Where ([Middle_Name] is null) OR [Middle_Name]=''

	--Validate [Last Name] assigned
	Update Stg.Attorney_List
	Set IsValidRecord=0,
		ERROR_DESCRIPTION = '[BADGE_TYPE_NAME] is blank'
	Where (BADGE_TYPE_NAME is null) OR BADGE_TYPE_NAME=''

		--Validate [Last Name] assigned
	Update Stg.Attorney_List
	Set IsValidRecord=0,
	ERROR_DESCRIPTION = '[Last_Name] is blank'
	Where ([Last_Name] is null) OR [Last_Name]=''

	-- Update Duplicate Records
	;WITH CTE_AttorneyMasterDup AS (
		    SELECT [Florida_BAR_Number],[First_Name],[Middle_Name],[Last_Name],BADGE_TYPE_NAME
			FROM [Stg].[Attorney_List] 
			GROUP BY [Florida_BAR_Number],[First_Name],[Middle_Name],[Last_Name],BADGE_TYPE_NAME
			HAVING COUNT(1) > 1)

   UPDATE STG SET IsValidRecord = 0,
                  ERROR_DESCRIPTION = 'Duplicate Records'
   FROM CTE_AttorneyMasterDup CTE 
   JOIN [Stg].[Attorney_List] STG ON ISNULL(STG.[Florida_BAR_Number],'') = ISNULL(CTE.[Florida_BAR_Number],'')
                                    AND ISNULL(STG.[First_Name],'') = ISNULL(CTE.[First_Name],'')
									AND ISNULL(STG.[Middle_Name],'') = ISNULL(CTE.[Middle_Name],'')
									AND ISNULL(STG.[Last_Name],'') = ISNULL(CTE.[Last_Name],'')
	
	
	SELECT count(*) ValidRecord FROM Stg.Attorney_List where IsValidRecord=1 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateAWWStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*===========================================
	Author:BB
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidateDefendantStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateAWWStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate Case No
	Update Stg.AWW
	Set IsValidRecord=0
	,ERROR_DESCRIPTION='[COURT_CASE_NUM] CANNOT BE BLANK/NULL'
	Where ([COURT_CASE_NUM] is null OR [COURT_CASE_NUM] ='')
		--Validate Case No

	--Update Stg.AWW
	--Set IsValidRecord=0
	--,ERROR_DESCRIPTION='[PFB_AWW_AMOUNT] CONTAIN CHARCTER DATA'
	--Where ISNUMERIC([PFB_AWW_AMOUNT])=0

	--	Update Stg.AWW
	--Set IsValidRecord=1
	--,ERROR_DESCRIPTION='[SO_AWW_AMOUNT] CONTAIN CHARCTER DATA'
	--Where SO_AWW_AMOUNT is null AND [PFB_AWW_AMOUNT] is null

	--	Update Stg.AWW
	--Set IsValidRecord=0
	--,ERROR_DESCRIPTION='[PFB_MMI_DATE]/[SO_MMI_DATE] CONTAIN INVALID DATA'
	--Where (ISDATE([PFB_MMI_DATE])=0)
 -- OR (ISDATE([SO_MMI_DATE])=0)


  	UPDATE P
	SET IsValidRecord = 0,
	ERROR_DESCRIPTION ='Duplicate Records'
	FROM Stg.AWW P
	INNER JOIN 
	(
select  [COURT_CASE_NUM],[AWW_Status],SO_MMI_DATE,PFB_MMI_DATE,[PFB_AWW_AMOUNT],SEQ_NO, count(*) cnt 
from Stg.AWW  
group by [COURT_CASE_NUM],[AWW_Status],SO_MMI_DATE,PFB_MMI_DATE,[PFB_AWW_AMOUNT],SEQ_NO
having count(*)>1
	)P2
	ON P.COURT_CASE_NUM=P2.COURT_CASE_NUM

UPDATE Stg.AWW
	Set ISVALIDRECORD=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'')+ 'No Case Data'
	where COURT_CASE_NUM  not in(select CaseNumber from [dbo].[Cases]) 


END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateCarrierMasterStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*===========================================
	Author:Praveen
	Created Date: 05-JAN-2023
	Description:To Validate the carrier master data
	EXECUTION : [dbo].[usp_ValidateCarrierMasterStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateCarrierMasterStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate INS_CA_ID
	UPDATE 
		Stg.Carrier_Master
	SET 
		IsValidRecord=0,
		ERROR_DESCRIPTION = 'INS_CA_ID is Blank'
	WHERE (INS_CA_ID IS NULL)

	--Validate CARRIER_PARENT
	UPDATE 
		Stg.Carrier_Master
	SET 
		IsValidRecord=0,
		ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'CARRIER_PARENT is Blank' ELSE ERROR_DESCRIPTION + ',CARRIER_PARENT is Blank' END
	WHERE (CARRIER_PARENT IS NULL)

	--Validate CARRIER_NAME
	UPDATE 
		Stg.Carrier_Master
	SET 
		IsValidRecord=0,
		ERROR_DESCRIPTION =CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'INS_CA_NAME is Blank' ELSE ERROR_DESCRIPTION + ',INS_CA_NAME is Blank' END
	WHERE (INS_CA_NAME IS NULL)

		UPDATE 
		Stg.Carrier_Master
	SET 
		IsValidRecord=0,
		ERROR_DESCRIPTION = 'ALT_CO_NAME is Blank'
	WHERE (ALT_CO_NAME IS NULL)

			UPDATE 
		Stg.Carrier_Master
	SET 
		IsValidRecord=0,
		ERROR_DESCRIPTION = 'GROUP_NUMBER is Blank'
	WHERE (GROUP_NUMBER IS NULL)
	--Validate Duplicate
	UPDATE 
		CM
	SET 
		CM.IsValidRecord=0,
		CM.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Key Duplication' ELSE ERROR_DESCRIPTION + ',Key Duplication' END
	FROM
		Stg.Carrier_Master CM
		INNER JOIN 
		(
			SELECT INS_CA_ID,CARRIER_PARENT,INS_CA_Name,ALT_CO_NAME,GROUP_NUMBER,COUNT(*) Cnt
			FROM Stg.Carrier_Master
			GROUP BY INS_CA_ID,CARRIER_PARENT,INS_CA_Name,ALT_CO_NAME,GROUP_NUMBER
			HAVING Count(*) >1
		)A ON
		A.INS_CA_ID = CM.INS_CA_ID
		AND A.CARRIER_PARENT = CM.CARRIER_PARENT
		AND A.INS_CA_Name = CM.INS_CA_Name
		AND A.ALT_CO_NAME = CM.ALT_CO_NAME
		AND A.GROUP_NUMBER = CM.GROUP_NUMBER
	
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateCarrierStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:Praveen
	Created Date: 07-FEB-2023
	Description: Validate Carrier Case
	EXECUTION : EXEC [dbo].[usp_ValidateCarrierStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateCarrierStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate Carrier Name
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=CASE WHEN [Carrier_1_Name] IS NULL THEN 0 ELSE IsValidRecord1 END,
		ERROR_DESCRIPTION = 'Carrier_Name is Blank'
	WHERE 
		([Carrier_1_Name] IS NULL)

	--Validate Carrier Parent Name
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=CASE WHEN [Carrier_1_Parent_Name] IS NULL 
		THEN 0 ELSE IsValidRecord1 END,
		ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'CARRIER_PARENT is Blank' ELSE ERROR_DESCRIPTION + ',CARRIER_PARENT is Blank' END
	WHERE 
		([Carrier_1_Parent_Name] IS NULL)

	--Validate case number assigned
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=0,
		ERROR_DESCRIPTION = CASE 
		WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'Case Number is Blank' 
		ELSE ERROR_DESCRIPTION + ',Case Number is Blank' 
		END
	WHERE
		 ([Case_Num] is null)

		 	--Validate case number assigned
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=0,
		ERROR_DESCRIPTION = CASE 
		WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'Case missing in case data' 
		ELSE ERROR_DESCRIPTION + ',Case missing in case data'  
		END
	WHERE
		 ([Case_Num] not in (SELECT CaseNumber from Cases))

	--Validate Duplicate
	UPDATE 
		C
	SET 
		C.IsValidRecord1=0,
		C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'Key Duplication' ELSE ERROR_DESCRIPTION + ',Key Duplication1' END
	FROM
		Stg.Carrier C
		INNER JOIN 
		(
			SELECT Case_Num,Carrier_1_Name,[Carrier_1_Parent_Name],[Insurance_Carrier_1_City],Carrier_1_Zip,[Carrier_1_Phone],[Carrier_1_ID_Group_Num],COUNT(*) Cnt
			FROM Stg.Carrier
			GROUP BY Case_Num,Carrier_1_Name,[Carrier_1_Parent_Name],[Insurance_Carrier_1_City],Carrier_1_Zip,[Carrier_1_Phone],[Carrier_1_ID_Group_Num]
			HAVING Count(*) >1
		)A ON
		A.CASE_NUM = C.CASE_NUM
		AND A.Carrier_1_Name = C.Carrier_1_Name
		AND A.[Carrier_1_Parent_Name] = C.[Carrier_1_Parent_Name]
		AND A.[Insurance_Carrier_1_City] = C.[Insurance_Carrier_1_City]
		AND A.Carrier_1_Zip = C.Carrier_1_Zip
		AND A.[Carrier_1_Phone] = C.[Carrier_1_Phone]
		AND A.[Carrier_1_ID_Group_Num] = C.[Carrier_1_ID_Group_Num]


	

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateCarrierStageData_OLD]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:Praveen
	Created Date: 07-FEB-2023
	Description: Validate Carrier Case
	EXECUTION : EXEC [dbo].[usp_ValidateCarrierStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateCarrierStageData_OLD]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate Carrier Name
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=CASE WHEN [Carrier_1_Name] IS NULL THEN 0 ELSE IsValidRecord1 END,
		--IsValidRecord2=CASE WHEN [Carrier_2_Name] IS NULL THEN 0 ELSE IsValidRecord2 END,
		ERROR_DESCRIPTION = 'Carrier_Name is Blank'
	WHERE 
		([Carrier_1_Name] IS NULL OR [Carrier_2_Name] IS NULL)

	--Validate Carrier Parent Name
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=CASE WHEN [Carrier_1_Parent_Name] IS NULL 
		THEN 0 ELSE IsValidRecord1 END,
		--IsValidRecord2=CASE WHEN [Carrier_2_Parent_Name] IS NULL THEN 0 ELSE IsValidRecord2 END,
		ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'CARRIER_PARENT is Blank' ELSE ERROR_DESCRIPTION + ',CARRIER_PARENT is Blank' END
	WHERE 
		([Carrier_1_Parent_Name] IS NULL)

	--Validate case number assigned
	UPDATE 
		Stg.Carrier
	SET 
		IsValidRecord1=0,IsValidRecord2=0,
		ERROR_DESCRIPTION = CASE 
		WHEN ERROR_DESCRIPTION IS NULL 
		THEN 'Case Number is Blank' 
		ELSE ERROR_DESCRIPTION + ',Case Number is Blank' 
		END
	WHERE
		 ([Case_Num] is null)

	--Validate Duplicate
	UPDATE 
		C
	SET 
		C.IsValidRecord1=0,
		C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Row1 - Key Duplication' ELSE ERROR_DESCRIPTION + ',Row1 - Key Duplication1' END
	FROM
		Stg.Carrier C
		INNER JOIN 
		(
			SELECT Case_Num,Carrier_1_Name,[Carrier_1_Parent_Name],[Insurance_Carrier_1_City],Carrier_1_Zip,[Carrier_1_Phone],[Carrier_1_ID_Group_Num],COUNT(*) Cnt
			FROM Stg.Carrier
			GROUP BY Case_Num,Carrier_1_Name,[Carrier_1_Parent_Name],[Insurance_Carrier_1_City],Carrier_1_Zip,[Carrier_1_Phone],[Carrier_1_ID_Group_Num]
			HAVING Count(*) >1
		)A ON
		A.CASE_NUM = C.CASE_NUM
		AND A.Carrier_1_Name = C.Carrier_1_Name
		AND A.[Carrier_1_Parent_Name] = C.[Carrier_1_Parent_Name]
		AND A.[Insurance_Carrier_1_City] = C.[Insurance_Carrier_1_City]
		AND A.Carrier_1_Zip = C.Carrier_1_Zip
		AND A.[Carrier_1_Phone] = C.[Carrier_1_Phone]
		AND A.[Carrier_1_ID_Group_Num] = C.[Carrier_1_ID_Group_Num]

		--UPDATE 
		--	C
		--SET 
		--	C.IsValidRecord2=0,
		--	C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Row2 - Key Duplication' ELSE ERROR_DESCRIPTION + ',Row2 - Key Duplication2' END
		--FROM
		--	Stg.Carrier C
		--	INNER JOIN 
		--	(
		--		SELECT Case_Num,Carrier_2_Name,[Carrier_2_Parent_Name],[Carrier_2_City],Carrier_2_Zip,[Carrier_2_Phone],[Carrier_2_ID_Group_Num],COUNT(*) Cnt
		--		FROM Stg.Carrier
		--		GROUP BY Case_Num,Carrier_2_Name,[Carrier_2_Parent_Name],[Carrier_2_City],Carrier_2_Zip,[Carrier_2_Phone],[Carrier_2_ID_Group_Num]
		--		HAVING Count(*) >1
		--	)A ON
		--	A.CASE_NUM = C.CASE_NUM
		--	AND A.Carrier_2_Name = C.Carrier_2_Name
		--	AND A.[Carrier_2_Parent_Name] = C.[Carrier_2_Parent_Name]
		--	AND A.[Carrier_2_City] = C.[Carrier_2_City]
		--	AND A.Carrier_2_Zip = C.Carrier_2_Zip
		--	AND A.[Carrier_2_Phone] = C.[Carrier_2_Phone]
		--	AND A.[Carrier_2_ID_Group_Num] = C.[Carrier_2_ID_Group_Num]

		UPDATE 
			C
		SET 
			C.IsValidRecord1=0,
			C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Row1 - Missing in carrier Master' ELSE ERROR_DESCRIPTION + ',Row1 - Missing in carrier Master' END
		
		FROM
		Stg.Carrier C
		LEFT JOIN [dbo].Carrier_Master CT ON 
						   CT.Carrier_Parent = C.[Carrier_1_Parent_Name]
						   AND CT.ALT_CO_Name = C.Carrier_1_Name
						   AND CT.Insured_City = C.[Insurance_Carrier_1_City]
						   AND CT.Insured_Zip4 = C.Carrier_1_Zip
						   AND CT.INS_CA_Phone = C.[Carrier_1_Phone]
						   AND CT.Group_Number = C.[Carrier_1_ID_Group_Num]
		WHERE ID_Carrier_Master IS NULL

		UPDATE 
			C
		SET 
			C.IsValidRecord2=0,
			C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Row2 - Missing in carrier Master' ELSE ERROR_DESCRIPTION + ',Row2 - Missing in carrier Master' END		
		FROM
		Stg.Carrier C
		LEFT JOIN [dbo].Carrier_Master CT ON 
						   CT.Carrier_Parent = C.[Carrier_2_Parent_Name]
						   AND CT.ALT_CO_Name = C.Carrier_2_Name
						   AND CT.Insured_City = C.[Carrier_2_City]
						   AND CT.Insured_Zip4 = C.Carrier_2_Zip
						   AND CT.INS_CA_Phone = C.[Carrier_2_Phone]
						   AND CT.Group_Number = C.[Carrier_2_ID_Group_Num]
		WHERE ID_Carrier_Master IS NULL
	
	UPDATE 
			C
		SET 
			IsValidRecord1=0,IsValidRecord2=0,
			C.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Missing in Case Master' ELSE ERROR_DESCRIPTION + ',Missing in Case Master' END		
		FROM
		Stg.Carrier C
		LEFT JOIN [dbo].[Cases] CS ON CS.CaseNumber = C.Case_Num
		WHERE ID_Case IS NULL
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateCase_AttorneyData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:Voleergo
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidateCaseAttorneyStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateCase_AttorneyData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate [First Name] assigned
	Update Stg.Case_Attorney
	Set IsValidRecord=0,
	ERROR_DESCRIPTION = 'Attorney_FirstName OR Attorney_LastName OR Attorney_FULLName is blank'
	Where (Attorney_FirstName is null) OR (Attorney_FirstName='') 
	OR (Attorney_LastName is null) OR (Attorney_LastName='') 
	OR (Attorney_FULLName is null) OR (Attorney_FULLName='')  

	UPDATE P
	SET IsValidRecord = 0,
	ERROR_DESCRIPTION = 'Duplicate Records'
	FROM Stg.Case_Attorney P
	INNER JOIN 
	(
	 SELECT  COURT_CASE_NUM,Attorney_FirstName,Attorney_LastName,Attorney_FULLName,count(*) Count
from [Stg].[Case_Attorney]
group by  COURT_CASE_NUM,Attorney_FirstName,Attorney_LastName,Attorney_FULLName
having count(*)>1
	)P2
	ON P.COURT_CASE_NUM=P2.COURT_CASE_NUM
	AND P.Attorney_FirstName=P2.Attorney_FirstName
	AND P.Attorney_LastName=P2.Attorney_LastName
	AND P.Attorney_FULLName=P2.Attorney_FULLName


	Update Stg.Case_Attorney
	Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
	where COURT_CASE_NUM  not in(select CaseNumber from [dbo].[Cases]) 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateCaseStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:Voleergo
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidateCaseStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateCaseStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate judgename assigned
	Update Stg.Case_Data
	Set IsValidRecord=0,
	ERROR_DESCRIPTION='Judge_1_Last_Name_Assigned_to_Case is blank'	
	Where ([Judge_1_Last_Name_Assigned_to_Case] is null)

	--Validate Case No
	Update Stg.Case_Data
	Set IsValidRecord=0,
	ERROR_DESCRIPTION='Case_Num is blank'	
	Where ([Case_Num] is null)

	--Validate Case Name
	Update Stg.Case_Data
	Set IsValidRecord=0	,
	ERROR_DESCRIPTION='Case_Name is blank'
	Where ([Case_Name] is null)

	--	Update Stg.Case_Data
	--Set IsValidRecord=0
	--,ERROR_DESCRIPTION='[CASE_STATUS_DATE]/[DATE_OF_ACCIDENT_OR_ILLLNESS] CONTAIN INVALID DATA'
	--Where (ISDATE([CASE_STATUS_DATE])=0 AND [CASE_STATUS_DATE] is NOT null)
 -- OR (ISDATE([DATE_OF_ACCIDENT_OR_ILLLNESS])=0 AND [DATE_OF_ACCIDENT_OR_ILLLNESS] is NOT null) 
 -- OR (ISDATE(ASSIGNED_DATE)=0 AND ASSIGNED_DATE is NOT null) 
	----Duplication Check

	Update CD
	Set IsValidRecord=0,
	ERROR_DESCRIPTION='Duplicate record'
	FROM
	Stg.Case_Data CD
	INNER JOIN
	(
	select Court_Case_Number, count (*) cnt from [Stg].[Case_Data] 
	group by Court_Case_Number
	having count (*)>1
	)A ON A.COURT_CASE_NUMBER = CD.COURT_CASE_NUMBER
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateDefendantStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidateDefendantStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateDefendantStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	--Validate Name
Update Stg.Defendant
Set IsValidRecord=0,ERROR_DESCRIPTION= '[Defendant_Name]/[CASE_NUM] is blank.'
Where ([Defendant_Name] is null) 
OR ([CASE_NUM] is null )  

UPDATE D
SET D.IsValidRecord=0,D.ERROR_DESCRIPTION = CASE WHEN ERROR_DESCRIPTION IS NULL THEN 'Row2 - Key Duplication' ELSE ERROR_DESCRIPTION + ',Row2 - Key Duplication2' END
FROM [Stg].[Defendant] D
INNER JOIN 
(select 
CASE_NUM,
DEFENDANT_NAME,Defendant_Parent,[Defendant_Self_Insured_Name],
count(*) CNT
from [Stg].[Defendant]
group by CASE_NUM,
DEFENDANT_NAME,Defendant_Parent,[Defendant_Self_Insured_Name]
having count(*)>1
)A ON A.CASE_NUM = D.CASE_NUM
AND A.DEFENDANT_NAME = D.DEFENDANT_NAME

Update Stg.Defendant
Set IsValidRecord=0,
ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
where CASE_NUM  not in(select CaseNumber from [dbo].[Cases]) 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateDeterminationStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateDeterminationStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.Determination
	Set IsValidRecord=0,ERROR_DESCRIPTION= 'Court_Case_Number is blank'
	Where (Court_Case_Number is null OR Court_Case_Number='')

	Update Stg.Determination
	Set IsValidRecord=0,ERROR_DESCRIPTION= 'Determination_Type is blank'
	Where (Determination_Type is null OR Determination_Type='')

	--Update Stg.Determination
	--Set IsValidRecord=0,ERROR_DESCRIPTION= 'Determination_Amount is blank'
	--Where (Determination_Amount is null OR Determination_Amount='')

	--Update Stg.Determination
	--Set IsValidRecord=0,ERROR_DESCRIPTION= 'Determination_Date is blank'
	--Where (Determination_Date is null OR Determination_Date='')

	Update Stg.Determination
	Set IsValidRecord=0,ERROR_DESCRIPTION= 'Confidential_Flag is blank'
	Where (Confidential_Flag is null OR Confidential_Flag='')


		    Update Stg.Determination
		Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
		where Court_Case_Number  not in(select CaseNumber from [dbo].[Cases]) 



END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateFutureDamagesStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateFutureDamagesStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.[Future_Damages]
	Set IsValidRecord=0,ERROR_DESCRIPTION= '[Case_Num] is blank'
	Where ([Case_Num] is null OR [Case_Num]='')

	
	    Update Stg.[Future_Damages]
		Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
		where [Case_Num]  not in(select CaseNumber from [dbo].[Cases]) 


END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateInjuriesStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateInjuriesStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.Injuries
	Set IsValidRecord=0,
	ERROR_DESCRIPTION='Court_Case_Number is blank or null'
	Where ( [Court_Case_Number] is null OR [Court_Case_Number] ='')

	UPDATE  Stg.Injuries
	Set ISVALIDRECORD=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'')+ 'No Case Data'
	where [Court_Case_Number]  not in(select CaseNumber from [dbo].[Cases]) 



END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateJudgeStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[Plaintiff_Master_Data_Load]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateJudgeStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.Judges
	Set IsValidRecord=0
	Where ([Judge_First_Name] is null OR [Judge_First_Name]='' OR
	[Judge_Last_Name] is null OR [Judge_Last_Name]='' OR
	[JUDGE_MI] is null OR [JUDGE_MI]='' OR
	[INITIALS] is null OR [INITIALS]=''
	
	)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateNegotiationsStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateNegotiationsStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.Negotiations
	Set IsValidRecord=0, ERROR_DESCRIPTION= 'Court_Case_Num is null OR blank'
	Where (Court_Case_Num is null OR Court_Case_Num='')

	Update Stg.Negotiations
		Set IsValidRecord=0, ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case Data'
		where Court_Case_Num  not in(select CaseNumber from [dbo].[Cases]) 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateOJCCOfficeStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 03-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[Plaintiff_Master_Data_Load]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateOJCCOfficeStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update [Stg].[OJCC_Offices]
	Set IsValidRecord=0
	Where (OJCC_DISTRICT is null OR [OJCC_DISTRICT]='' OR
	[DISTRICT_COUNTIES] is null OR [DISTRICT_COUNTIES]=''
	
	)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidatePastDamagesStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidatePastDamagesStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON

	Update Stg.Past_Damages
	Set IsValidRecord=0
	Where ([Case_Num] is null OR [Case_Num]='')

	Update STG	 
	Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
	FROM Stg.Past_Damages STG
	LEFT JOIN [dbo].[Cases] C ON ISNULL(C.CaseNumber,'') = ISNULL(STG.CASE_NUM,'')
	WHERE C.ID_Case IS NULL

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidatePlaintiffStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 05-JAN-2023
	Description:To transform and load Plaintiff data to main table
	EXECUTION : EXEC [dbo].[usp_ValidatePlaintiffStageData]
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidatePlaintiffStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON
	

	Update Stg.Plaintiff
	SET IsValidRecord = 0,
	ERROR_DESCRIPTION = CASE WHEN COURT_CASE_NUM is null OR COURT_CASE_NUM='' THEN 'COURT_CASE_NUM CANT NOT BE EMPTY' 
							 WHEN Plaintiff1_FIRST_NAME is null OR Plaintiff1_LAST_NAME is null OR Plaintiff1_Full_Name is null 
							 OR Plaintiff1_FIRST_NAME ='' OR Plaintiff1_LAST_NAME ='' OR Plaintiff1_Full_Name ='' THEN 'Plaintiff1_Full_Name/Plaintiff1_LAST_NAME/Plaintiff1_FIRST_NAME CANT NOT BE NULL/BLANK'
						END
	Where ( COURT_CASE_NUM is null ) OR  (Plaintiff1_FIRST_NAME is null OR Plaintiff1_LAST_NAME is null OR Plaintiff1_Full_Name is null )
	
	


	UPDATE P
	SET IsValidRecord = 0,
	ERROR_DESCRIPTION ='Duplicate Records'
	FROM Stg.Plaintiff P
	INNER JOIN 
	(
	 SELECT COURT_CASE_NUM,[Plaintiff1_LAST_NAME],Plaintiff1_FIRST_NAME,  count(*) Count
								 FROM [Stg].[VwPlantiff] 
								 group by [Plaintiff1_LAST_NAME],Plaintiff1_FIRST_NAME,COURT_CASE_NUM
								 Having count(*)>1
	)P2
	ON P.COURT_CASE_NUM=P2.COURT_CASE_NUM
	AND P.[Plaintiff1_LAST_NAME]=P2.[Plaintiff1_LAST_NAME]
	AND P.Plaintiff1_FIRST_NAME=P2.Plaintiff1_FIRST_NAME

	    Update Stg.Plaintiff
		Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + ' No Case data record'
		where COURT_CASE_NUM  not in(select CaseNumber from [dbo].[Cases]) 


	SELECT count(*) from  Stg.Plaintiff where IsValidRecord = 1
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateTPAMasterData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*============================================================
	Author:FairCode
	Created Date: 18-FEB-2023
	Description:To transform and load TPA data to main table
=================================================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateTPAMasterData]
AS
BEGIN
    SET NOCOUNT ON

	---- Validate TPA Name
	UPDATE [Stg].[TPA_Master]
	SET IsValidRecord = 0,
        [ERROR_DESCRIPTION] = 'TPA Name With null or blank'
	WHERE ([TPA_Name] IS NULL OR [TPA_Name] ='')

	
	-- Update Duplicate Records
	;WITH CTE_TPAMasterDup AS (
		    SELECT [TPA_Name],[TPA_Internal_ID],[TPA_Parent] 
			FROM [Stg].[TPA_Master] 
			GROUP BY [TPA_Name],[TPA_Internal_ID],[TPA_Parent]
			HAVING COUNT(1) > 1)

   UPDATE STG SET IsValidRecord = 0,
                  ERROR_DESCRIPTION = (CASE WHEN ERROR_DESCRIPTION IS NOT NULL THEN ',Duplicate Records' ELSE 'Duplicate Records' END)
   FROM CTE_TPAMasterDup CTE 
   JOIN [Stg].[TPA_Master] STG ON ISNULL(STG.[TPA_Name],'') = ISNULL(CTE.[TPA_Name],'')
                                    AND ISNULL(STG.[TPA_Internal_ID],'') = ISNULL(CTE.[TPA_Internal_ID],'')
									AND ISNULL(STG.[TPA_Parent],'') = ISNULL(CTE.[TPA_Parent],'')									
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateTPAStageData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===========================================
	Author:BB
	Created Date: 06-JAN-2023
	Description:To transform and load TPA data to main table
=============================================*/
CREATE  PROCEDURE [dbo].[usp_ValidateTPAStageData]
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON
	

	Update Stg.TPA
	Set IsValidRecord=0,
	ERROR_DESCRIPTION= '[CASE_NUM] is null OR blank'
	Where ([CASE_NUM] is null OR [CASE_NUM]='')

	    Update Stg.TPA
		Set IsValidRecord=0,
	ERROR_DESCRIPTION= isnull(ERROR_DESCRIPTION,'') + 'No Case data record'
		where CASE_NUM  not in(select CaseNumber from [dbo].[Cases]) 


END
GO
/****** Object:  StoredProcedure [Stg].[usp_ClearStagingData]    Script Date: 12-05-2023 22:47:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Stg].[usp_ClearStagingData]
	@Schema NVARCHAR (50),
	@Table NVARCHAR (50)
AS
/*===========================================
	Author:Praveen
	Created Date:20-DEC-2022
	Description:To truncate staging table
=============================================*/
BEGIN

	DECLARE @Query NVARCHAR (500) = ''
	SET @Query = 'TRUNCATE TABLE '+@Schema+'.'+@Table

	EXECUTE (@Query)

END
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'F for file source & G for Generated from other files' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Cases', @level2type=N'COLUMN',@level2name=N'Source'
GO
EXEC sys.sp_addextendedproperty @name=N'microsoft_database_tools_support', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'sysdiagrams'
GO
ALTER DATABASE [DEV.PICASE_DATA] SET  READ_WRITE 
GO
